#nullable enable
abstract CCVARN.Commands.BaseCommand<TSettings>.ExecuteCore(Spectre.Console.Cli.CommandContext! context, TSettings! settings) -> int
abstract DryIoc.FastExpressionCompiler.LightExpression.Expression.NodeType.get -> System.Linq.Expressions.ExpressionType
abstract DryIoc.FastExpressionCompiler.LightExpression.MemberBinding.BindingType.get -> System.Linq.Expressions.MemberBindingType
abstract DryIoc.Setup.FactoryType.get -> DryIoc.FactoryType
CCVARN.Commands.BaseCommand<TSettings>
CCVARN.Commands.BaseCommand<TSettings>.BaseCommand() -> void
CCVARN.Commands.BaseCommand<TSettings>.Console.get -> CCVARN.Core.IO.IConsoleWriter?
CCVARN.Commands.BaseCommand<TSettings>.Console.set -> void
CCVARN.Commands.BaseCommand<TSettings>.Container.get -> DryIoc.IContainer?
CCVARN.Commands.BaseCommand<TSettings>.Container.set -> void
CCVARN.Commands.BaseCommand<TSettings>.GetRootPath(TSettings! settings) -> string?
CCVARN.Commands.InitCommand
CCVARN.Commands.InitCommand.InitCommand() -> void
CCVARN.Commands.ParseCommand
CCVARN.Commands.ParseCommand.ParseCommand(System.Collections.Generic.IReadOnlyCollection<CCVARN.Core.Exporters.IExporter!>! exporters) -> void
CCVARN.DependencyInject.TypeRegistrar
CCVARN.DependencyInject.TypeRegistrar.Build() -> Spectre.Console.Cli.ITypeResolver!
CCVARN.DependencyInject.TypeRegistrar.Register(System.Type! service, System.Type! implementation) -> void
CCVARN.DependencyInject.TypeRegistrar.RegisterInstance(System.Type! service, object! implementation) -> void
CCVARN.DependencyInject.TypeRegistrar.RegisterLazy(System.Type! service, System.Func<object!>! factory) -> void
CCVARN.DependencyInject.TypeRegistrar.TypeRegistrar(DryIoc.IContainer! container) -> void
CCVARN.DependencyInject.TypeResolver
CCVARN.DependencyInject.TypeResolver.Resolve(System.Type? type) -> object?
CCVARN.DependencyInject.TypeResolver.TypeResolver(DryIoc.IContainer! container) -> void
CCVARN.IO.ConsoleWriter
CCVARN.IO.ConsoleWriter.AddIndent() -> void
CCVARN.IO.ConsoleWriter.ConsoleWriter() -> void
CCVARN.IO.ConsoleWriter.DisableErrorOutput() -> void
CCVARN.IO.ConsoleWriter.DisableNormalOutput() -> void
CCVARN.IO.ConsoleWriter.RemoveIndent() -> void
CCVARN.IO.ConsoleWriter.StandardError.get -> System.IO.TextWriter!
CCVARN.IO.ConsoleWriter.StandardOut.get -> System.IO.TextWriter!
CCVARN.IO.ConsoleWriter.WriteErrorLine(string! format, params object![]! parameters) -> void
CCVARN.IO.ConsoleWriter.WriteInfo(string! format, params object![]! parameters) -> void
CCVARN.IO.ConsoleWriter.WriteInfoLine(string! format, params object![]! parameters) -> void
CCVARN.IO.ConsoleWriter.WriteInfoLineSafe(string! format, params string![]! parameters) -> void
CCVARN.IO.ConsoleWriter.WriteInfoSafe(string! format, params string![]! parameters) -> void
CCVARN.IO.ConsoleWriter.WriteWarningLine(string! format, params object![]! parameters) -> void
CCVARN.Options.BaseSettings
CCVARN.Options.BaseSettings.BaseSettings() -> void
CCVARN.Options.BaseSettings.RepositoryRoot.get -> string?
CCVARN.Options.BaseSettings.RepositoryRoot.set -> void
CCVARN.Options.InitOptions
CCVARN.Options.InitOptions.InitOptions() -> void
CCVARN.Options.ParseOption
CCVARN.Options.ParseOption.AdditionalOutputs.get -> string![]!
CCVARN.Options.ParseOption.AdditionalOutputs.set -> void
CCVARN.Options.ParseOption.ExcludeHeaders.get -> bool
CCVARN.Options.ParseOption.ExcludeHeaders.set -> void
CCVARN.Options.ParseOption.Output.get -> string?
CCVARN.Options.ParseOption.Output.set -> void
CCVARN.Options.ParseOption.ParseOption() -> void
CCVARN.Options.ParseOption.TagName.get -> Spectre.Console.Cli.FlagValue<string!>!
CCVARN.Options.ParseOption.TagName.set -> void
const DryIoc.CurrentScopeReuse.DefaultLifespan = 100 -> int
const DryIoc.ImTools.GrowingList.DefaultInitialCapacity = 2 -> int
const DryIoc.ImTools.GrowingList<T>.DefaultInitialCapacity = 2 -> int
const DryIoc.ImTools.PartitionedHashMap.PARTITION_COUNT_POWER_OF_TWO = 16 -> int
const DryIoc.ImTools.PartitionedHashMap.PARTITION_HASH_MASK = 15 -> int
const DryIoc.ImTools.PartitionedMap.PARTITION_COUNT_POWER_OF_TWO = 16 -> int
const DryIoc.ImTools.PartitionedMap.PARTITION_HASH_MASK = 15 -> int
const DryIoc.ImTools.Ref.RETRY_COUNT_UNTIL_THROW = 50 -> int
const DryIoc.Rules.DefaultDependencyCountInLambdaToSplitBigObjectGraph = 1024 -> int
const DryIoc.SingletonReuse.DefaultLifespan = 1000 -> int
DryIoc.Arg
DryIoc.AsyncExecutionFlowScopeContext
DryIoc.AsyncExecutionFlowScopeContext.AsyncExecutionFlowScopeContext() -> void
DryIoc.AsyncExecutionFlowScopeContext.Dispose() -> void
DryIoc.CompositeScopeName
DryIoc.Container
DryIoc.Container.Container() -> void
DryIoc.Container.Dispose() -> void
DryIoc.Container.IsDisposed.get -> bool
DryIoc.Container.ResolveManyResult
DryIoc.Container.ResolveManyResult.ResolveManyResult() -> void
DryIoc.ContainerException
DryIoc.ContainerTools
DryIoc.ContainerTools.GeneratedExpressions
DryIoc.ContainerTools.GeneratedExpressions.GeneratedExpressions() -> void
DryIoc.CreateScopedValue
DryIoc.CurrentScopeReuse
DryIoc.CurrentScopeReuse.Lifespan.get -> int
DryIoc.DefaultDynamicKey
DryIoc.DefaultKey
DryIoc.DelegateFactory
DryIoc.DynamicRegistration
DryIoc.DynamicRegistrationFlags
DryIoc.DynamicRegistrationFlags.AsFallback = 1 -> DryIoc.DynamicRegistrationFlags
DryIoc.DynamicRegistrationFlags.Decorator = 4 -> DryIoc.DynamicRegistrationFlags
DryIoc.DynamicRegistrationFlags.DecoratorOfAnyTypeViaObjectServiceType = 8 -> DryIoc.DynamicRegistrationFlags
DryIoc.DynamicRegistrationFlags.NoFlags = 0 -> DryIoc.DynamicRegistrationFlags
DryIoc.DynamicRegistrationFlags.Service = 2 -> DryIoc.DynamicRegistrationFlags
DryIoc.Error
DryIoc.ErrorCheck
DryIoc.ErrorCheck.CollectedExceptions = 6 -> DryIoc.ErrorCheck
DryIoc.ErrorCheck.InvalidCondition = 1 -> DryIoc.ErrorCheck
DryIoc.ErrorCheck.IsNotOfType = 3 -> DryIoc.ErrorCheck
DryIoc.ErrorCheck.IsNull = 2 -> DryIoc.ErrorCheck
DryIoc.ErrorCheck.OperationThrows = 5 -> DryIoc.ErrorCheck
DryIoc.ErrorCheck.TypeIsNotOfType = 4 -> DryIoc.ErrorCheck
DryIoc.ErrorCheck.Unspecified = 0 -> DryIoc.ErrorCheck
DryIoc.ExpressionFactory
DryIoc.Factory
DryIoc.Factory.AsResolutionCall.get -> bool
DryIoc.Factory.CanCache.get -> bool
DryIoc.Factory.Factory() -> void
DryIoc.Factory.FactoryID.get -> int
DryIoc.Factory.FactoryType.get -> DryIoc.FactoryType
DryIoc.Factory.Flags.get -> DryIoc.FactoryFlags
DryIoc.Factory.Flags.set -> void
DryIoc.FactoryDelegate
DryIoc.FactoryDelegate<TService>
DryIoc.FactoryDelegateCompiler
DryIoc.FactoryFlags
DryIoc.FactoryFlags.AsResolutionCall = 4 -> DryIoc.FactoryFlags
DryIoc.FactoryFlags.Default = 0 -> DryIoc.FactoryFlags
DryIoc.FactoryFlags.DoNotCache = 2 -> DryIoc.FactoryFlags
DryIoc.FactoryFlags.PleaseDontSetDoNotCache = 1 -> DryIoc.FactoryFlags
DryIoc.FactoryMethod
DryIoc.FactoryMethodSelector
DryIoc.FactoryPlaceholder
DryIoc.FactoryPlaceholder.FactoryPlaceholder() -> void
DryIoc.FactoryType
DryIoc.FactoryType.Decorator = 1 -> DryIoc.FactoryType
DryIoc.FactoryType.Service = 0 -> DryIoc.FactoryType
DryIoc.FactoryType.Wrapper = 2 -> DryIoc.FactoryType
DryIoc.FastExpressionCompiler.LightExpression.ArrayIndexExpression
DryIoc.FastExpressionCompiler.LightExpression.AssignBinaryExpression
DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression.IsLifted.get -> bool
DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression.IsLiftedToNull.get -> bool
DryIoc.FastExpressionCompiler.LightExpression.BlockExpression
DryIoc.FastExpressionCompiler.LightExpression.BreakGotoExpression
DryIoc.FastExpressionCompiler.LightExpression.BreakTypedGotoExpression
DryIoc.FastExpressionCompiler.LightExpression.BreakTypedValueGotoExpression
DryIoc.FastExpressionCompiler.LightExpression.BreakValueGotoExpression
DryIoc.FastExpressionCompiler.LightExpression.CatchBlock
DryIoc.FastExpressionCompiler.LightExpression.CodePrinter
DryIoc.FastExpressionCompiler.LightExpression.CodePrinter.IObjectToCode
DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags
DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default = 0 -> DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags
DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.EnableDelegateDebugInfo = 2 -> DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags
DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.NoInvocationLambdaInlining = 1 -> DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags
DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.ThrowOnNotSupportedExpression = 4 -> DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags
DryIoc.FastExpressionCompiler.LightExpression.ConditionalExpression
DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression
DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression.ConstantExpression() -> void
DryIoc.FastExpressionCompiler.LightExpression.ContinueGotoExpression
DryIoc.FastExpressionCompiler.LightExpression.ContinueTypedGotoExpression
DryIoc.FastExpressionCompiler.LightExpression.ConvertUnaryExpression
DryIoc.FastExpressionCompiler.LightExpression.ConvertViaCastClassIntrinsicExpression
DryIoc.FastExpressionCompiler.LightExpression.ConvertWithMethodUnaryExpression
DryIoc.FastExpressionCompiler.LightExpression.DebugInfoExpression
DryIoc.FastExpressionCompiler.LightExpression.DefaultExpression
DryIoc.FastExpressionCompiler.LightExpression.DynamicExpression
DryIoc.FastExpressionCompiler.LightExpression.ElementInit
DryIoc.FastExpressionCompiler.LightExpression.Expression
DryIoc.FastExpressionCompiler.LightExpression.Expression.Expression() -> void
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ArrayClosure
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ArrayClosureWithNonPassedParams
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.ClosureInfo() -> void
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.ConstantUsageThenVarIndex -> DryIoc.FastExpressionCompiler.LightExpression.LiveCountArray<short>
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.ContainsConstantsOrNestedLambdas() -> bool
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.LastEmitIsAddress -> bool
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.PopBlock() -> void
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.Status -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureStatus
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureStatus
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureStatus.HasClosure = 4 -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureStatus
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureStatus.ShouldBeStaticMethod = 8 -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureStatus
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureStatus.ToBeCollected = 1 -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureStatus
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureStatus.UserProvided = 2 -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureStatus
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.DebugArrayClosure
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.EmittingVisitor
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.NestedLambdaInfo
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.NestedLambdaInfo.ClosureInfo -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.NestedLambdaInfo.LambdaVarIndex -> int
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.NestedLambdaWithConstantsAndNestedLambdas
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags.Arithmetic = 16 -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags.Call = 4 -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags.Coalesce = 32 -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags.CtorCall = 516 -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags.DupMemberOwner = 128 -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags.Empty = 0 -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags.IgnoreResult = 2 -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags.IndexAccess = 1024 -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags.InlinedLambdaInvoke = 2048 -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags.InstanceAccess = 64 -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags.InstanceCall = DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags.Call | DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags.InstanceAccess -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags.MemberAccess = 8 -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags.TryCatch = 256 -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags
DryIoc.FastExpressionCompiler.LightExpression.FieldExpression
DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsInvocationExpression
DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsMethodCallExpression
DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsNewExpression
DryIoc.FastExpressionCompiler.LightExpression.FiveBindingsMemberInitExpression
DryIoc.FastExpressionCompiler.LightExpression.FiveElementNewArrayInitExpression
DryIoc.FastExpressionCompiler.LightExpression.FiveParametersLambdaExpression
DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsInvocationExpression
DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsMethodCallExpression
DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsNewExpression
DryIoc.FastExpressionCompiler.LightExpression.FourBindingsMemberInitExpression
DryIoc.FastExpressionCompiler.LightExpression.FourElementNewArrayInitExpression
DryIoc.FastExpressionCompiler.LightExpression.FourParametersLambdaExpression
DryIoc.FastExpressionCompiler.LightExpression.GotoExpression
DryIoc.FastExpressionCompiler.LightExpression.HasIndexerManyArgumentsIndexExpression
DryIoc.FastExpressionCompiler.LightExpression.HasIndexerOneArgumentIndexExpression
DryIoc.FastExpressionCompiler.LightExpression.IArgumentProvider
DryIoc.FastExpressionCompiler.LightExpression.IArgumentProvider.ArgumentCount.get -> int
DryIoc.FastExpressionCompiler.LightExpression.IArgumentProvider<T>
DryIoc.FastExpressionCompiler.LightExpression.IArgumentProvider<T>.ArgumentCount.get -> int
DryIoc.FastExpressionCompiler.LightExpression.IArgumentProvider<T>.GetArgument(int index) -> T
DryIoc.FastExpressionCompiler.LightExpression.IDelegateDebugInfo
DryIoc.FastExpressionCompiler.LightExpression.ILGeneratorHacks
DryIoc.FastExpressionCompiler.LightExpression.IndexExpression
DryIoc.FastExpressionCompiler.LightExpression.InstanceFieldExpression
DryIoc.FastExpressionCompiler.LightExpression.InstanceFiveArgumentsMethodCallExpression
DryIoc.FastExpressionCompiler.LightExpression.InstanceFourArgumentsMethodCallExpression
DryIoc.FastExpressionCompiler.LightExpression.InstanceManyArgumentsMethodCallExpression
DryIoc.FastExpressionCompiler.LightExpression.InstanceMethodCallExpression
DryIoc.FastExpressionCompiler.LightExpression.InstanceOneArgumentMethodCallExpression
DryIoc.FastExpressionCompiler.LightExpression.InstancePropertyExpression
DryIoc.FastExpressionCompiler.LightExpression.InstanceSevenArgumentsMethodCallExpression
DryIoc.FastExpressionCompiler.LightExpression.InstanceSixArgumentsMethodCallExpression
DryIoc.FastExpressionCompiler.LightExpression.InstanceThreeArgumentsMethodCallExpression
DryIoc.FastExpressionCompiler.LightExpression.InstanceTwoArgumentsMethodCallExpression
DryIoc.FastExpressionCompiler.LightExpression.IntConstantExpression
DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression.InvocationExpression() -> void
DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider
DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider.ParameterCount.get -> int
DryIoc.FastExpressionCompiler.LightExpression.LabelExpression
DryIoc.FastExpressionCompiler.LightExpression.LabelTarget
DryIoc.FastExpressionCompiler.LightExpression.LabelTarget.LabelTarget() -> void
DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
DryIoc.FastExpressionCompiler.LightExpression.ListInitExpression
DryIoc.FastExpressionCompiler.LightExpression.LiveCountArray<T>
DryIoc.FastExpressionCompiler.LightExpression.LiveCountArray<T>.Count -> int
DryIoc.FastExpressionCompiler.LightExpression.LiveCountArray<T>.LiveCountArray() -> void
DryIoc.FastExpressionCompiler.LightExpression.LiveCountArray<T>.Pop() -> void
DryIoc.FastExpressionCompiler.LightExpression.LiveCountArray<T>.PushSlot() -> T
DryIoc.FastExpressionCompiler.LightExpression.LiveCountArray<T>.PushSlot(T item) -> void
DryIoc.FastExpressionCompiler.LightExpression.LoopExpression
DryIoc.FastExpressionCompiler.LightExpression.ManyArgumentsElementInit
DryIoc.FastExpressionCompiler.LightExpression.ManyArgumentsIndexExpression
DryIoc.FastExpressionCompiler.LightExpression.ManyArgumentsInvocationExpression
DryIoc.FastExpressionCompiler.LightExpression.ManyArgumentsMethodCallExpression
DryIoc.FastExpressionCompiler.LightExpression.ManyArgumentsNewExpression
DryIoc.FastExpressionCompiler.LightExpression.ManyBindingsMemberInitExpression
DryIoc.FastExpressionCompiler.LightExpression.ManyBoundsNewArrayBoundsExpression
DryIoc.FastExpressionCompiler.LightExpression.ManyElementsNewArrayInitExpression
DryIoc.FastExpressionCompiler.LightExpression.ManyParametersLambdaExpression
DryIoc.FastExpressionCompiler.LightExpression.ManyVariablesBlockExpression
DryIoc.FastExpressionCompiler.LightExpression.MemberAssignment
DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
DryIoc.FastExpressionCompiler.LightExpression.MemberExpression
DryIoc.FastExpressionCompiler.LightExpression.MemberInitExpression
DryIoc.FastExpressionCompiler.LightExpression.MemberListBinding
DryIoc.FastExpressionCompiler.LightExpression.MemberMemberBinding
DryIoc.FastExpressionCompiler.LightExpression.MethodBinaryExpression
DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression.MethodCallExpression() -> void
DryIoc.FastExpressionCompiler.LightExpression.NamedLabelTarget
DryIoc.FastExpressionCompiler.LightExpression.NewArrayExpression
DryIoc.FastExpressionCompiler.LightExpression.NewExpression
DryIoc.FastExpressionCompiler.LightExpression.NewValueTypeExpression
DryIoc.FastExpressionCompiler.LightExpression.NoArgsNewClassIntrinsicExpression
DryIoc.FastExpressionCompiler.LightExpression.NoByRefFiveArgumentsNewExpression
DryIoc.FastExpressionCompiler.LightExpression.NoByRefFourArgumentsNewExpression
DryIoc.FastExpressionCompiler.LightExpression.NoByRefManyArgumentsNewExpression
DryIoc.FastExpressionCompiler.LightExpression.NoByRefOneArgumentNewExpression
DryIoc.FastExpressionCompiler.LightExpression.NoByRefSevenArgumentsNewExpression
DryIoc.FastExpressionCompiler.LightExpression.NoByRefSixArgumentsNewExpression
DryIoc.FastExpressionCompiler.LightExpression.NoByRefThreeArgumentsNewExpression
DryIoc.FastExpressionCompiler.LightExpression.NoByRefTwoArgumentsNewExpression
DryIoc.FastExpressionCompiler.LightExpression.NodeTypedUnaryExpression
DryIoc.FastExpressionCompiler.LightExpression.NotBooleanUnaryExpression
DryIoc.FastExpressionCompiler.LightExpression.NotNullExpressionInvocationExpression
DryIoc.FastExpressionCompiler.LightExpression.NotNullMethodCallExpression
DryIoc.FastExpressionCompiler.LightExpression.NotSupported
DryIoc.FastExpressionCompiler.LightExpression.NotSupported.Assign_Target = 7 -> DryIoc.FastExpressionCompiler.LightExpression.NotSupported
DryIoc.FastExpressionCompiler.LightExpression.NotSupported.Dynamic = 2 -> DryIoc.FastExpressionCompiler.LightExpression.NotSupported
DryIoc.FastExpressionCompiler.LightExpression.NotSupported.MemberInit_ListBinding = 5 -> DryIoc.FastExpressionCompiler.LightExpression.NotSupported
DryIoc.FastExpressionCompiler.LightExpression.NotSupported.MemberInit_MemberBinding = 4 -> DryIoc.FastExpressionCompiler.LightExpression.NotSupported
DryIoc.FastExpressionCompiler.LightExpression.NotSupported.NewArrayInit_MultidimensionalArray = 0 -> DryIoc.FastExpressionCompiler.LightExpression.NotSupported
DryIoc.FastExpressionCompiler.LightExpression.NotSupported.Quote = 1 -> DryIoc.FastExpressionCompiler.LightExpression.NotSupported
DryIoc.FastExpressionCompiler.LightExpression.NotSupported.RuntimeVariables = 3 -> DryIoc.FastExpressionCompiler.LightExpression.NotSupported
DryIoc.FastExpressionCompiler.LightExpression.NotSupported.Try_GotoReturnToTheFollowupLabel = 6 -> DryIoc.FastExpressionCompiler.LightExpression.NotSupported
DryIoc.FastExpressionCompiler.LightExpression.NotSupported.TypeEqual = 8 -> DryIoc.FastExpressionCompiler.LightExpression.NotSupported
DryIoc.FastExpressionCompiler.LightExpression.NotSupportedExpressionException
DryIoc.FastExpressionCompiler.LightExpression.NotSupportedExpressionException.NotSupportedExpressionException(DryIoc.FastExpressionCompiler.LightExpression.NotSupported reason) -> void
DryIoc.FastExpressionCompiler.LightExpression.NullConstantExpression<T>
DryIoc.FastExpressionCompiler.LightExpression.NullConstantExpression<T>.NullConstantExpression() -> void
DryIoc.FastExpressionCompiler.LightExpression.OneArgumentElementInit
DryIoc.FastExpressionCompiler.LightExpression.OneArgumentIndexExpression
DryIoc.FastExpressionCompiler.LightExpression.OneArgumentInvocationExpression
DryIoc.FastExpressionCompiler.LightExpression.OneArgumentMethodCallExpression
DryIoc.FastExpressionCompiler.LightExpression.OneArgumentNewExpression
DryIoc.FastExpressionCompiler.LightExpression.OneBindingMemberInitExpression
DryIoc.FastExpressionCompiler.LightExpression.OneBoundNewArrayBoundsExpression
DryIoc.FastExpressionCompiler.LightExpression.OneElementNewArrayInitExpression
DryIoc.FastExpressionCompiler.LightExpression.OneParameterLambdaExpression
DryIoc.FastExpressionCompiler.LightExpression.OpAssignBinaryExpression
DryIoc.FastExpressionCompiler.LightExpression.OpAssignMethodConversionBinaryExpression
DryIoc.FastExpressionCompiler.LightExpression.OpAssignMethodConversionBinaryExpression.LiftToNull.get -> bool
DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
DryIoc.FastExpressionCompiler.LightExpression.PropertyExpression
DryIoc.FastExpressionCompiler.LightExpression.ReturnGotoExpression
DryIoc.FastExpressionCompiler.LightExpression.ReturnTypedGotoExpression
DryIoc.FastExpressionCompiler.LightExpression.ReturnTypedValueGotoExpression
DryIoc.FastExpressionCompiler.LightExpression.ReturnValueGotoExpression
DryIoc.FastExpressionCompiler.LightExpression.RuntimeVariablesExpression
DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsMethodCallExpression
DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsNewExpression
DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsInvocationExpression
DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsMethodCallExpression
DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsNewExpression
DryIoc.FastExpressionCompiler.LightExpression.SixBindingsMemberInitExpression
DryIoc.FastExpressionCompiler.LightExpression.SixElementNewArrayInitExpression
DryIoc.FastExpressionCompiler.LightExpression.SixParametersLambdaExpression
DryIoc.FastExpressionCompiler.LightExpression.SwitchCase
DryIoc.FastExpressionCompiler.LightExpression.SwitchCase.SwitchCase() -> void
DryIoc.FastExpressionCompiler.LightExpression.SwitchExpression
DryIoc.FastExpressionCompiler.LightExpression.SymbolDocumentInfo
DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsInvocationExpression
DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsMethodCallExpression
DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsNewExpression
DryIoc.FastExpressionCompiler.LightExpression.ThreeBindingsMemberInitExpression
DryIoc.FastExpressionCompiler.LightExpression.ThreeElementNewArrayInitExpression
DryIoc.FastExpressionCompiler.LightExpression.ThreeParametersLambdaExpression
DryIoc.FastExpressionCompiler.LightExpression.ThrowUnaryExpression
DryIoc.FastExpressionCompiler.LightExpression.ToCSharpPrinter
DryIoc.FastExpressionCompiler.LightExpression.ToExpressionPrinter
DryIoc.FastExpressionCompiler.LightExpression.TryExpression
DryIoc.FastExpressionCompiler.LightExpression.TryPrintConstant
DryIoc.FastExpressionCompiler.LightExpression.TwoArgumentsInvocationExpression
DryIoc.FastExpressionCompiler.LightExpression.TwoArgumentsMethodCallExpression
DryIoc.FastExpressionCompiler.LightExpression.TwoArgumentsNewExpression
DryIoc.FastExpressionCompiler.LightExpression.TwoBindingsMemberInitExpression
DryIoc.FastExpressionCompiler.LightExpression.TwoElementNewArrayInitExpression
DryIoc.FastExpressionCompiler.LightExpression.TwoParametersLambdaExpression
DryIoc.FastExpressionCompiler.LightExpression.TypeBinaryExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedBlockExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedConvertUnaryExpression<T>
DryIoc.FastExpressionCompiler.LightExpression.TypedFiveArgumentsInvocationExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedFourArgumentsInvocationExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedGotoExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedInvocationExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedLabelTarget
DryIoc.FastExpressionCompiler.LightExpression.TypedLambdaExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedManyArgumentsInvocationExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedManyVariablesBlockExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedNamedLabelTarget
DryIoc.FastExpressionCompiler.LightExpression.TypedNullConstantExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedOneArgumentInvocationExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedParameterExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedParameterExpression<T>
DryIoc.FastExpressionCompiler.LightExpression.TypedReturnFiveParametersLambdaExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedReturnFourParametersLambdaExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedReturnLambdaExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedReturnManyParametersLambdaExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedReturnOneParameterLambdaExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedReturnSixParametersLambdaExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedReturnThreeParametersLambdaExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedReturnTwoParametersLambdaExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedSixArgumentsInvocationExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedThreeArgumentsInvocationExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedTwoArgumentsInvocationExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedUnaryExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedUnaryExpression<T>
DryIoc.FastExpressionCompiler.LightExpression.TypedValueConstantExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedValueGotoExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedWithFalseBranchConditionalExpression
DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
DryIoc.FastExpressionCompiler.LightExpression.ValueConstantExpression
DryIoc.FastExpressionCompiler.LightExpression.ValueConstantExpression<T>
DryIoc.FastExpressionCompiler.LightExpression.ValueGotoExpression
DryIoc.FastExpressionCompiler.LightExpression.VoidWithFalseBranchConditionalExpression
DryIoc.FastExpressionCompiler.LightExpression.WithComparisonSwitchExpression
DryIoc.FastExpressionCompiler.LightExpression.WithDefaultValueLabelExpression
DryIoc.FastExpressionCompiler.LightExpression.WithFalseBranchConditionalExpression
DryIoc.FastExpressionCompiler.LightExpression.WithFinallyTryExpression
DryIoc.HiddenDisposable
DryIoc.IContainer
DryIoc.IConvertibleToExpression
DryIoc.IfAlreadyRegistered
DryIoc.IfAlreadyRegistered.AppendNewImplementation = 4 -> DryIoc.IfAlreadyRegistered
DryIoc.IfAlreadyRegistered.AppendNotKeyed = 0 -> DryIoc.IfAlreadyRegistered
DryIoc.IfAlreadyRegistered.Keep = 2 -> DryIoc.IfAlreadyRegistered
DryIoc.IfAlreadyRegistered.Replace = 3 -> DryIoc.IfAlreadyRegistered
DryIoc.IfAlreadyRegistered.Throw = 1 -> DryIoc.IfAlreadyRegistered
DryIoc.IfUnresolved
DryIoc.IfUnresolved.ReturnDefault = 1 -> DryIoc.IfUnresolved
DryIoc.IfUnresolved.ReturnDefaultIfNotRegistered = 2 -> DryIoc.IfUnresolved
DryIoc.IfUnresolved.Throw = 0 -> DryIoc.IfUnresolved
DryIoc.ImTools.ArrayTools
DryIoc.ImTools.Fun
DryIoc.ImTools.GrowingList
DryIoc.ImTools.GrowingList<T>
DryIoc.ImTools.GrowingList<T>.Count -> int
DryIoc.ImTools.GrowingList<T>.GrowingList() -> void
DryIoc.ImTools.GrowingList<T>.Pop() -> void
DryIoc.ImTools.GrowingList<T>.PopItem() -> T
DryIoc.ImTools.GrowingList<T>.Push(T item) -> void
DryIoc.ImTools.GrowingList<T>.PushSlot() -> T
DryIoc.ImTools.Hasher
DryIoc.ImTools.ImHashMap
DryIoc.ImTools.ImHashMap<K, V>
DryIoc.ImTools.ImHashMap<K, V>.Entry
DryIoc.ImTools.ImHashMap<K, V>.Entry.Entry(int hash) -> void
DryIoc.ImTools.ImHashMap<K, V>.ImHashMap() -> void
DryIoc.ImTools.ImHashMap<K, V>.IsEmpty.get -> bool
DryIoc.ImTools.ImHashMap<K, V>.UpdaterOrKeeper<S>
DryIoc.ImTools.ImHashMapEntry<K, V>
DryIoc.ImTools.ImHashMapEntry<K, V>.ImHashMapEntry(int hash, K key) -> void
DryIoc.ImTools.ImHashMapEntry<K, V>.ImHashMapEntry(int hash, K key, V value) -> void
DryIoc.ImTools.ImHashMapEntry<K, V>.Value -> V
DryIoc.ImTools.ImList
DryIoc.ImTools.ImList<T>
DryIoc.ImTools.ImList<T>.IsEmpty.get -> bool
DryIoc.ImTools.ImMap
DryIoc.ImTools.ImMap.ImMapEnumerable<V>
DryIoc.ImTools.ImMap.ImMapEnumerable<V>.GetEnumerator() -> DryIoc.ImTools.ImMap.ImMapEnumerator<V>
DryIoc.ImTools.ImMap.ImMapEnumerable<V>.ImMapEnumerable() -> void
DryIoc.ImTools.ImMap.ImMapEnumerator<V>
DryIoc.ImTools.ImMap.ImMapEnumerator<V>.ImMapEnumerator() -> void
DryIoc.ImTools.ImMap.ImMapEnumerator<V>.MoveNext() -> bool
DryIoc.ImTools.ImMap<V>
DryIoc.ImTools.ImMap<V>.ImMap() -> void
DryIoc.ImTools.ImMap<V>.IsEmpty.get -> bool
DryIoc.ImTools.ImMapEntry<V>
DryIoc.ImTools.ImMapEntry<V>.ImMapEntry(int hash) -> void
DryIoc.ImTools.ImMapEntry<V>.ImMapEntry(int hash, V value) -> void
DryIoc.ImTools.ImMapEntry<V>.Key.get -> int
DryIoc.ImTools.ImMapEntry<V>.Value -> V
DryIoc.ImTools.ImMapParentStack<V>
DryIoc.ImTools.ImMapParentStack<V>.Entry
DryIoc.ImTools.ImMapParentStack<V>.Entry.Entry() -> void
DryIoc.ImTools.ImMapParentStack<V>.ImMapParentStack(int capacity = 4) -> void
DryIoc.ImTools.ImZipper
DryIoc.ImTools.ImZipper<T>
DryIoc.ImTools.ImZipper<T>.IsEmpty.get -> bool
DryIoc.ImTools.IPrintable
DryIoc.ImTools.KeyValuePair
DryIoc.ImTools.KV
DryIoc.ImTools.KV<K, V>
DryIoc.ImTools.KV<K, V>.KV(K key, V value) -> void
DryIoc.ImTools.Lazy
DryIoc.ImTools.MapParentStack
DryIoc.ImTools.MapParentStack.MapParentStack() -> void
DryIoc.ImTools.Opt<T>
DryIoc.ImTools.Opt<T>.Opt() -> void
DryIoc.ImTools.Opt<T>.Opt(T value) -> void
DryIoc.ImTools.Opt<T>.OrDefault(T defaultValue = default(T)) -> T
DryIoc.ImTools.PartitionedHashMap
DryIoc.ImTools.PartitionedMap
DryIoc.ImTools.Ref
DryIoc.ImTools.St
DryIoc.ImTools.St<A, B>
DryIoc.ImTools.St<A, B>.a -> A
DryIoc.ImTools.St<A, B>.b -> B
DryIoc.ImTools.St<A, B>.Reset() -> void
DryIoc.ImTools.St<A, B>.ResetButGetA() -> A
DryIoc.ImTools.St<A, B>.ResetButGetB() -> B
DryIoc.ImTools.St<A, B>.St() -> void
DryIoc.ImTools.St<A>
DryIoc.ImTools.St<A>.a -> A
DryIoc.ImTools.St<A>.Pool() -> void
DryIoc.ImTools.St<A>.Reset() -> void
DryIoc.ImTools.St<A>.ResetButGetA() -> A
DryIoc.ImTools.St<A>.St() -> void
DryIoc.ImTools.StackPool<T>.StackPool() -> void
DryIoc.ImTools.Update<K, V>
DryIoc.ImTools.Update<V>
DryIoc.InstanceFactory
DryIoc.Interpreter
DryIoc.Interpreter.ParentLambdaArgs
DryIoc.IRegistrator
DryIoc.IResolver
DryIoc.IResolverContext
DryIoc.IResolverContext.IsDisposed.get -> bool
DryIoc.IReuse
DryIoc.IReuse.Lifespan.get -> int
DryIoc.IScope
DryIoc.IScope.IsDisposed.get -> bool
DryIoc.IScopeContext
DryIoc.IScopeName
DryIoc.IsRegistryChangePermitted
DryIoc.IsRegistryChangePermitted.Error = 1 -> DryIoc.IsRegistryChangePermitted
DryIoc.IsRegistryChangePermitted.Ignored = 2 -> DryIoc.IsRegistryChangePermitted
DryIoc.IsRegistryChangePermitted.Permitted = 0 -> DryIoc.IsRegistryChangePermitted
DryIoc.ITest
DryIoc.ITest.Run() -> int
DryIoc.LazyEnumerable<TService>
DryIoc.Made
DryIoc.Made.HasCustomDependencyValue.get -> bool
DryIoc.Made.IsConditional.get -> bool
DryIoc.Made.IsConditionalImplementation.get -> bool
DryIoc.Made.IsImplMemberDependsOnRequest.get -> bool
DryIoc.Made.TypedMade<TService>
DryIoc.Messages.AsyncMessageHandler<M, R>.AsyncMessageHandler() -> void
DryIoc.Messages.EmptyResponse
DryIoc.Messages.EmptyResponse.EmptyResponse() -> void
DryIoc.Messages.IMessage
DryIoc.Messages.IMessage<TResponse>
DryIoc.Messages.IMessageMiddleware<M, R>
DryIoc.Messages.IMessageMiddleware<M, R>.RelativeOrder.get -> int
DryIoc.Messages.MessageExtensions
DryIoc.Messages.MessageMediator
DryIoc.Meta<T, TMetadata>
DryIoc.Meta<T, TMetadata>.Meta(T value, TMetadata metadata) -> void
DryIoc.OpenGenericTypeKey
DryIoc.Parameters
DryIoc.ParameterSelector
DryIoc.ParameterServiceInfo
DryIoc.Portable
DryIoc.PrintTools
DryIoc.PropertiesAndFields
DryIoc.PropertiesAndFields.GetServiceInfo
DryIoc.PropertiesAndFieldsSelector
DryIoc.PropertyOrFieldServiceInfo
DryIoc.ReflectionFactory
DryIoc.ReflectionFactory.ReflectionFactory() -> void
DryIoc.ReflectionTools
DryIoc.ReflectionTools.AsImplementedType
DryIoc.ReflectionTools.AsImplementedType.None = 0 -> DryIoc.ReflectionTools.AsImplementedType
DryIoc.ReflectionTools.AsImplementedType.ObjectType = 2 -> DryIoc.ReflectionTools.AsImplementedType
DryIoc.ReflectionTools.AsImplementedType.SourceType = 1 -> DryIoc.ReflectionTools.AsImplementedType
DryIoc.Registrator
DryIoc.RegistrySharing
DryIoc.RegistrySharing.CloneAndDropCache = 2 -> DryIoc.RegistrySharing
DryIoc.RegistrySharing.CloneButKeepCache = 1 -> DryIoc.RegistrySharing
DryIoc.RegistrySharing.Share = 0 -> DryIoc.RegistrySharing
DryIoc.Request
DryIoc.Request.CombineDecoratorWithDecoratedFactoryID() -> int
DryIoc.Request.DecoratedFactoryID.get -> int
DryIoc.Request.DependencyCount -> int
DryIoc.Request.DependencyDepth -> int
DryIoc.Request.FactoryID.get -> int
DryIoc.Request.FactoryType.get -> DryIoc.FactoryType
DryIoc.Request.Flags -> DryIoc.RequestFlags
DryIoc.Request.HasRecursiveParent(int factoryID) -> bool
DryIoc.Request.HasRecursiveParentUntilResolutionRoot(int factoryID) -> bool
DryIoc.Request.IfUnresolved.get -> DryIoc.IfUnresolved
DryIoc.Request.IsDirectlyWrappedInFunc() -> bool
DryIoc.Request.IsEmpty.get -> bool
DryIoc.Request.IsNestedResolutionCall.get -> bool
DryIoc.Request.IsResolutionCall.get -> bool
DryIoc.Request.IsResolutionRoot.get -> bool
DryIoc.Request.IsSingletonOrDependencyOfSingleton.get -> bool
DryIoc.Request.IsWrappedInFunc() -> bool
DryIoc.Request.IsWrappedInFuncWithArgs() -> bool
DryIoc.Request.OpensResolutionScope.get -> bool
DryIoc.Request.ReuseLifespan.get -> int
DryIoc.Request.TracksTransientDisposable.get -> bool
DryIoc.RequestFlags
DryIoc.RequestFlags.Default = 0 -> DryIoc.RequestFlags
DryIoc.RequestFlags.IsDirectlyWrappedInFunc = 128 -> DryIoc.RequestFlags
DryIoc.RequestFlags.IsGeneratedResolutionDependencyExpression = 64 -> DryIoc.RequestFlags
DryIoc.RequestFlags.IsResolutionCall = 8 -> DryIoc.RequestFlags
DryIoc.RequestFlags.IsSingletonOrDependencyOfSingleton = 2 -> DryIoc.RequestFlags
DryIoc.RequestFlags.IsWrappedInFunc = 4 -> DryIoc.RequestFlags
DryIoc.RequestFlags.OpensResolutionScope = 16 -> DryIoc.RequestFlags
DryIoc.RequestFlags.StopRecursiveDependencyCheck = 32 -> DryIoc.RequestFlags
DryIoc.RequestFlags.TracksTransientDisposable = 1 -> DryIoc.RequestFlags
DryIoc.RequestTools
DryIoc.ResolutionScopeName
DryIoc.ResolveManyBehavior
DryIoc.ResolveManyBehavior.AsFixedArray = 1 -> DryIoc.ResolveManyBehavior
DryIoc.ResolveManyBehavior.AsLazyEnumerable = 0 -> DryIoc.ResolveManyBehavior
DryIoc.Resolver
DryIoc.ResolverContext
DryIoc.Reuse
DryIoc.Rules
DryIoc.Rules.CaptureContainerDisposeStackTrace.get -> bool
DryIoc.Rules.ConstantExpressionIsFine.get -> bool
DryIoc.Rules.DefaultIfAlreadyRegistered.get -> DryIoc.IfAlreadyRegistered
DryIoc.Rules.DependencyCountInLambdaToSplitBigObjectGraph.get -> int
DryIoc.Rules.DynamicRegistrationProvider
DryIoc.Rules.EagerCachingSingletonForFasterAccess.get -> bool
DryIoc.Rules.FactorySelectorRule
DryIoc.Rules.FuncAndLazyWithoutRegistration.get -> bool
DryIoc.Rules.HasDynamicRegistrationProvider(DryIoc.DynamicRegistrationFlags withFlags, DryIoc.DynamicRegistrationFlags withoutFlags = DryIoc.DynamicRegistrationFlags.NoFlags) -> bool
DryIoc.Rules.IgnoringReuseForFuncWithArgs.get -> bool
DryIoc.Rules.ImplicitCheckForReuseMatchingScope.get -> bool
DryIoc.Rules.IsSelectLastRegisteredFactory.get -> bool
DryIoc.Rules.ItemToExpressionConverterRule
DryIoc.Rules.OverrideRegistrationMade.get -> bool
DryIoc.Rules.ResolveIEnumerableAsLazyEnumerable.get -> bool
DryIoc.Rules.ServiceProviderGetServiceShouldThrowIfUnresolved.get -> bool
DryIoc.Rules.ThrowIfDependencyHasShorterReuseLifespan.get -> bool
DryIoc.Rules.ThrowIfRuntimeStateRequired.get -> bool
DryIoc.Rules.ThrowIfScopedOrSingletonHasTransientDependency.get -> bool
DryIoc.Rules.ThrowOnRegisteringDisposableTransient.get -> bool
DryIoc.Rules.TrackingDisposableTransients.get -> bool
DryIoc.Rules.UnknownServiceResolver
DryIoc.Rules.UseDecorateeReuseForDecorators.get -> bool
DryIoc.Rules.UsedForExpressionGeneration.get -> bool
DryIoc.Rules.UsedForValidation.get -> bool
DryIoc.Rules.UseDynamicRegistrationsAsFallbackOnly.get -> bool
DryIoc.Rules.UseInterpretation.get -> bool
DryIoc.Rules.UseInterpretationForTheFirstResolution.get -> bool
DryIoc.Rules.VariantGenericTypesInResolve.get -> bool
DryIoc.Rules.VariantGenericTypesInResolvedCollection.get -> bool
DryIoc.Scope
DryIoc.Scope.Dispose() -> void
DryIoc.Scope.IsDisposed.get -> bool
DryIoc.Scope.Scope() -> void
DryIoc.ScopeTools
DryIoc.ServiceDetails
DryIoc.ServiceInfo
DryIoc.ServiceInfo.ServiceInfo() -> void
DryIoc.ServiceInfo.Typed
DryIoc.ServiceInfo.Typed<TService>
DryIoc.ServiceInfo.Typed<TService>.Typed() -> void
DryIoc.ServiceInfoTools
DryIoc.ServiceRegistrationInfo
DryIoc.ServiceRegistrationInfo.AsResolutionRoot.get -> bool
DryIoc.ServiceRegistrationInfo.CompareTo(DryIoc.ServiceRegistrationInfo other) -> int
DryIoc.ServiceRegistrationInfo.FactoryRegistrationOrder.get -> int
DryIoc.ServiceRegistrationInfo.ServiceRegistrationInfo() -> void
DryIoc.SetCurrentScopeHandler
DryIoc.Setup
DryIoc.Setup.AllowDisposableTransient.get -> bool
DryIoc.Setup.AsResolutionCall.get -> bool
DryIoc.Setup.AsResolutionCallForExpressionGeneration.get -> bool
DryIoc.Setup.AsResolutionRoot.get -> bool
DryIoc.Setup.AvoidResolutionScopeTracking.get -> bool
DryIoc.Setup.DisposalOrder.get -> int
DryIoc.Setup.OpenResolutionScope.get -> bool
DryIoc.Setup.PreferInSingleServiceResolve.get -> bool
DryIoc.Setup.PreventDisposal.get -> bool
DryIoc.Setup.Settings
DryIoc.Setup.Settings.AllowDisposableTransient = 32 -> DryIoc.Setup.Settings
DryIoc.Setup.Settings.AsResolutionCall = 2 -> DryIoc.Setup.Settings
DryIoc.Setup.Settings.AsResolutionCallForExpressionGeneration = 1024 -> DryIoc.Setup.Settings
DryIoc.Setup.Settings.AsResolutionRoot = 128 -> DryIoc.Setup.Settings
DryIoc.Setup.Settings.AvoidResolutionScopeTracking = 2048 -> DryIoc.Setup.Settings
DryIoc.Setup.Settings.Default = 0 -> DryIoc.Setup.Settings
DryIoc.Setup.Settings.OpenResolutionScope = 4 -> DryIoc.Setup.Settings
DryIoc.Setup.Settings.PreferInSingleServiceResolve = 512 -> DryIoc.Setup.Settings
DryIoc.Setup.Settings.PreventDisposal = 8 -> DryIoc.Setup.Settings
DryIoc.Setup.Settings.TrackDisposableTransient = 64 -> DryIoc.Setup.Settings
DryIoc.Setup.Settings.UseParentReuse = 256 -> DryIoc.Setup.Settings
DryIoc.Setup.Settings.WeaklyReferenced = 16 -> DryIoc.Setup.Settings
DryIoc.Setup.TrackDisposableTransient.get -> bool
DryIoc.Setup.UseParentReuse.get -> bool
DryIoc.Setup.WeaklyReferenced.get -> bool
DryIoc.SingletonReuse
DryIoc.SingletonReuse.Lifespan.get -> int
DryIoc.SingletonReuse.SingletonReuse() -> void
DryIoc.ThreadScopeContext
DryIoc.ThreadScopeContext.Dispose() -> void
DryIoc.ThreadScopeContext.ThreadScopeContext() -> void
DryIoc.Throw
DryIoc.Throw.GetMatchedExceptionHandler
DryIoc.ThrowInGeneratedCode
DryIoc.WrapperExpressionFactory
DryIoc.WrappersSupport
override CCVARN.Commands.BaseCommand<TSettings>.Validate(Spectre.Console.Cli.CommandContext! context, TSettings! settings) -> Spectre.Console.ValidationResult!
override CCVARN.Commands.ParseCommand.Validate(Spectre.Console.Cli.CommandContext! context, CCVARN.Options.ParseOption! settings) -> Spectre.Console.ValidationResult!
override CCVARN.Options.BaseSettings.Validate() -> Spectre.Console.ValidationResult!
override CCVARN.Options.ParseOption.Validate() -> Spectre.Console.ValidationResult!
override DryIoc.DefaultDynamicKey.GetHashCode() -> int
override DryIoc.DefaultKey.GetHashCode() -> int
override DryIoc.DelegateFactory.HasRuntimeState.get -> bool
override DryIoc.FastExpressionCompiler.LightExpression.ArrayIndexExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.AssignBinaryExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.BlockExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.BreakGotoExpression.Kind.get -> System.Linq.Expressions.GotoExpressionKind
override DryIoc.FastExpressionCompiler.LightExpression.BreakTypedGotoExpression.Kind.get -> System.Linq.Expressions.GotoExpressionKind
override DryIoc.FastExpressionCompiler.LightExpression.BreakTypedValueGotoExpression.Kind.get -> System.Linq.Expressions.GotoExpressionKind
override DryIoc.FastExpressionCompiler.LightExpression.BreakValueGotoExpression.Kind.get -> System.Linq.Expressions.GotoExpressionKind
override DryIoc.FastExpressionCompiler.LightExpression.ConditionalExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.ContinueGotoExpression.Kind.get -> System.Linq.Expressions.GotoExpressionKind
override DryIoc.FastExpressionCompiler.LightExpression.ContinueTypedGotoExpression.Kind.get -> System.Linq.Expressions.GotoExpressionKind
override DryIoc.FastExpressionCompiler.LightExpression.ConvertUnaryExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.ConvertViaCastClassIntrinsicExpression<T>.IsIntrinsic.get -> bool
override DryIoc.FastExpressionCompiler.LightExpression.DefaultExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.DynamicExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsMethodCallExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsNewExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.FiveBindingsMemberInitExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.FiveElementNewArrayInitExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.FiveElementNewArrayInitExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsMethodCallExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsNewExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.FourBindingsMemberInitExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.FourElementNewArrayInitExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.FourElementNewArrayInitExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.GotoExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.LabelExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.ListInitExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.LoopExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.ManyArgumentsElementInit.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.ManyArgumentsNewExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.ManyBindingsMemberInitExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.ManyBoundsNewArrayBoundsExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.ManyElementsNewArrayInitExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.MemberAssignment.BindingType.get -> System.Linq.Expressions.MemberBindingType
override DryIoc.FastExpressionCompiler.LightExpression.MemberListBinding.BindingType.get -> System.Linq.Expressions.MemberBindingType
override DryIoc.FastExpressionCompiler.LightExpression.MemberMemberBinding.BindingType.get -> System.Linq.Expressions.MemberBindingType
override DryIoc.FastExpressionCompiler.LightExpression.MethodBinaryExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.NoArgsNewClassIntrinsicExpression.IsIntrinsic.get -> bool
override DryIoc.FastExpressionCompiler.LightExpression.NoByRefFiveArgumentsNewExpression.IsIntrinsic.get -> bool
override DryIoc.FastExpressionCompiler.LightExpression.NoByRefFiveArgumentsNewExpression.NoByRefArgs.get -> bool
override DryIoc.FastExpressionCompiler.LightExpression.NoByRefFourArgumentsNewExpression.IsIntrinsic.get -> bool
override DryIoc.FastExpressionCompiler.LightExpression.NoByRefFourArgumentsNewExpression.NoByRefArgs.get -> bool
override DryIoc.FastExpressionCompiler.LightExpression.NoByRefManyArgumentsNewExpression.NoByRefArgs.get -> bool
override DryIoc.FastExpressionCompiler.LightExpression.NoByRefOneArgumentNewExpression.IsIntrinsic.get -> bool
override DryIoc.FastExpressionCompiler.LightExpression.NoByRefOneArgumentNewExpression.NoByRefArgs.get -> bool
override DryIoc.FastExpressionCompiler.LightExpression.NoByRefSevenArgumentsNewExpression.IsIntrinsic.get -> bool
override DryIoc.FastExpressionCompiler.LightExpression.NoByRefSevenArgumentsNewExpression.NoByRefArgs.get -> bool
override DryIoc.FastExpressionCompiler.LightExpression.NoByRefSixArgumentsNewExpression.IsIntrinsic.get -> bool
override DryIoc.FastExpressionCompiler.LightExpression.NoByRefSixArgumentsNewExpression.NoByRefArgs.get -> bool
override DryIoc.FastExpressionCompiler.LightExpression.NoByRefThreeArgumentsNewExpression.IsIntrinsic.get -> bool
override DryIoc.FastExpressionCompiler.LightExpression.NoByRefThreeArgumentsNewExpression.NoByRefArgs.get -> bool
override DryIoc.FastExpressionCompiler.LightExpression.NoByRefTwoArgumentsNewExpression.IsIntrinsic.get -> bool
override DryIoc.FastExpressionCompiler.LightExpression.NoByRefTwoArgumentsNewExpression.NoByRefArgs.get -> bool
override DryIoc.FastExpressionCompiler.LightExpression.NodeTypedUnaryExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.NotBooleanUnaryExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.OneArgumentElementInit.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.OneArgumentIndexExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.OneArgumentMethodCallExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.OneArgumentNewExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.OneBindingMemberInitExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.OneBoundNewArrayBoundsExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.OneBoundNewArrayBoundsExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.OneElementNewArrayInitExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.OneElementNewArrayInitExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.ReturnGotoExpression.Kind.get -> System.Linq.Expressions.GotoExpressionKind
override DryIoc.FastExpressionCompiler.LightExpression.ReturnTypedGotoExpression.Kind.get -> System.Linq.Expressions.GotoExpressionKind
override DryIoc.FastExpressionCompiler.LightExpression.ReturnTypedValueGotoExpression.Kind.get -> System.Linq.Expressions.GotoExpressionKind
override DryIoc.FastExpressionCompiler.LightExpression.ReturnValueGotoExpression.Kind.get -> System.Linq.Expressions.GotoExpressionKind
override DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsMethodCallExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsNewExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsMethodCallExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsNewExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.SixBindingsMemberInitExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.SixElementNewArrayInitExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.SixElementNewArrayInitExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.SwitchCase.GetHashCode() -> int
override DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsMethodCallExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsNewExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.ThreeBindingsMemberInitExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.ThreeElementNewArrayInitExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.ThreeElementNewArrayInitExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.ThrowUnaryExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.TryExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.TwoArgumentsMethodCallExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.TwoArgumentsNewExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.TwoBindingsMemberInitExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.TwoElementNewArrayInitExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.TwoElementNewArrayInitExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.TypeBinaryExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.TypedConvertUnaryExpression<T>.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.TypedUnaryExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.TypedUnaryExpression<T>.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.ImTools.KV<K, V>.GetHashCode() -> int
override DryIoc.InstanceFactory.HasRuntimeState.get -> bool
override DryIoc.OpenGenericTypeKey.GetHashCode() -> int
override DryIoc.ReflectionFactory.CanAccessImplementationType.get -> bool
override DryIoc.ReflectionFactory.RegistrationOrder.get -> int
override DryIoc.Request.GetHashCode() -> int
override sealed CCVARN.Commands.BaseCommand<TSettings>.Execute(Spectre.Console.Cli.CommandContext! context, TSettings! settings) -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override sealed DryIoc.FastExpressionCompiler.LightExpression.ConvertViaCastClassIntrinsicExpression<T>.NodeType.get -> System.Linq.Expressions.ExpressionType
override sealed DryIoc.FastExpressionCompiler.LightExpression.DebugInfoExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override sealed DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsInvocationExpression.ArgumentCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.FiveParametersExpression<TDelegate>.ParameterCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.FiveParametersLambdaExpression.ParameterCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsInvocationExpression.ArgumentCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.FourParametersExpression<TDelegate>.ParameterCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.FourParametersLambdaExpression.ParameterCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.IndexExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override sealed DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override sealed DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override sealed DryIoc.FastExpressionCompiler.LightExpression.ManyArgumentsInvocationExpression.ArgumentCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.ManyArgumentsMethodCallExpression.ArgumentCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.ManyParametersExpression<TDelegate>.ParameterCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.ManyParametersLambdaExpression.ParameterCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.ManyVariablesBlockExpression.ArgumentCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.MemberExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override sealed DryIoc.FastExpressionCompiler.LightExpression.MemberInitExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override sealed DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override sealed DryIoc.FastExpressionCompiler.LightExpression.NewExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override sealed DryIoc.FastExpressionCompiler.LightExpression.OneArgumentInvocationExpression.ArgumentCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.OneParameterExpression<TDelegate>.ParameterCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.OneParameterLambdaExpression.ParameterCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.OpAssignBinaryExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override sealed DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override sealed DryIoc.FastExpressionCompiler.LightExpression.RuntimeVariablesExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override sealed DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsInvocationExpression.ArgumentCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.SixParametersExpression<TDelegate>.ParameterCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.SixParametersLambdaExpression.ParameterCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.SwitchExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override sealed DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsInvocationExpression.ArgumentCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.ThreeParametersExpression<TDelegate>.ParameterCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.ThreeParametersLambdaExpression.ParameterCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.TwoArgumentsInvocationExpression.ArgumentCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.TwoParametersExpression<TDelegate>.ParameterCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.TwoParametersLambdaExpression.ParameterCount.get -> int
override sealed DryIoc.ImTools.ImHashMapEntry<K, V>.Count() -> int
override sealed DryIoc.ImTools.ImMapEntry<V>.Count() -> int
readonly DryIoc.ContainerException.Error -> int
readonly DryIoc.CurrentScopeReuse.ScopedOrSingleton -> bool
readonly DryIoc.DefaultDynamicKey.RegistrationOrder -> int
readonly DryIoc.DefaultKey.RegistrationOrder -> int
readonly DryIoc.DynamicRegistration.IfAlreadyRegistered -> DryIoc.IfAlreadyRegistered
readonly DryIoc.FastExpressionCompiler.LightExpression.IntConstantExpression.IntValue -> int
readonly DryIoc.FastExpressionCompiler.LightExpression.NotSupportedExpressionException.Reason -> DryIoc.FastExpressionCompiler.LightExpression.NotSupported
readonly DryIoc.ImTools.ImHashMap<K, V>.Entry.Hash -> int
readonly DryIoc.ImTools.ImHashMapEntry<K, V>.Key -> K
readonly DryIoc.ImTools.ImList<T>.Head -> T
readonly DryIoc.ImTools.ImMapEntry<V>.Hash -> int
readonly DryIoc.ImTools.ImZipper<T>.Count -> int
readonly DryIoc.ImTools.ImZipper<T>.Focus -> T
readonly DryIoc.ImTools.ImZipper<T>.Index -> int
readonly DryIoc.ImTools.KV<K, V>.Key -> K
readonly DryIoc.ImTools.KV<K, V>.Value -> V
readonly DryIoc.ImTools.Opt<T>.HasValue -> bool
readonly DryIoc.ImTools.Opt<T>.Value -> T
readonly DryIoc.Meta<T, TMetadata>.Metadata -> TMetadata
readonly DryIoc.Meta<T, TMetadata>.Value -> T
readonly DryIoc.ServiceDetails.HasCustomValue -> bool
readonly DryIoc.ServiceDetails.IfUnresolved -> DryIoc.IfUnresolved
static DryIoc.Arg.Index<T>(int argIndex) -> T
static DryIoc.Arg.Of<TRequired>() -> TRequired
static DryIoc.Arg.Of<TRequired>(DryIoc.IfUnresolved ifUnresolved) -> TRequired
static DryIoc.Arg.Of<TRequired>(TRequired defaultValue, DryIoc.IfUnresolved ifUnresolved) -> TRequired
static DryIoc.Arg.Of<TService, TRequired>() -> TService
static DryIoc.Arg.Of<TService, TRequired>(DryIoc.IfUnresolved ifUnresolved) -> TService
static DryIoc.ContainerTools.DefaultValidateCondition(DryIoc.ServiceRegistrationInfo reg) -> bool
static DryIoc.Factory.GetNextID() -> int
static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.IgnoresResult(this DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags parent) -> bool
static DryIoc.ImTools.Fun.Always<T>(T _) -> bool
static DryIoc.ImTools.Fun.Id<T>(T x) -> T
static DryIoc.ImTools.Fun.Swap<T>(ref T a, ref T b) -> void
static DryIoc.ImTools.Fun.ToFunc<T, R>(this R result, T ignoredArg) -> R
static DryIoc.ImTools.Hasher.Combine(int h1, int h2) -> int
static DryIoc.ImTools.Hasher.Combine<T1, T2>(T1 a, T2 b) -> int
static DryIoc.ImTools.KeyValuePair.Pair<K, V>(this K key, V value) -> System.Collections.Generic.KeyValuePair<K, V>
static DryIoc.ImTools.Opt<T>.implicit operator DryIoc.ImTools.Opt<T>(T value) -> DryIoc.ImTools.Opt<T>
static DryIoc.Portable.GetCurrentManagedThreadID() -> int
static DryIoc.Scope.WaitForScopedServiceIsCreatedTimeoutTicks -> uint
static readonly DryIoc.Error.ArgValueIndexIsOutOfProvidedArgValues -> int
static readonly DryIoc.Error.ArgValueIndexIsProvidedButNoArgValues -> int
static readonly DryIoc.Error.ContainerIsDisposed -> int
static readonly DryIoc.Error.DecoratorShouldNotBeRegisteredWithServiceKey -> int
static readonly DryIoc.Error.DependencyHasShorterReuseLifespan -> int
static readonly DryIoc.Error.DisposerTrackForDisposeError -> int
static readonly DryIoc.Error.ExpectedSingleDefaultFactory -> int
static readonly DryIoc.Error.FoundNoRootsToValidate -> int
static readonly DryIoc.Error.GenericWrapperTypeArgIndexOutOfBounds -> int
static readonly DryIoc.Error.GenericWrapperWithMultipleTypeArgsShouldSpecifyArgIndex -> int
static readonly DryIoc.Error.GotNullConstructorFromFactoryMethod -> int
static readonly DryIoc.Error.GotNullFactoryWhenResolvingService -> int
static readonly DryIoc.Error.ImplTypeIsNotSpecifiedForAutoCtorSelection -> int
static readonly DryIoc.Error.ImpossibleToRegisterOpenGenericWithRegisterDelegate -> int
static readonly DryIoc.Error.InjectedCustomValueIsOfDifferentType -> int
static readonly DryIoc.Error.InjectedIntoFactoryDummy -> int
static readonly DryIoc.Error.NoConversionOperatorFoundWhenInterpretingTheConvertExpression -> int
static readonly DryIoc.Error.NoCurrentScope -> int
static readonly DryIoc.Error.NoImplementationForPlaceholder -> int
static readonly DryIoc.Error.NoMatchedFactoryMethodDeclaringTypeWithServiceTypeArgs -> int
static readonly DryIoc.Error.NoMatchedFactoryMethodWithServiceTypeArgs -> int
static readonly DryIoc.Error.NoMatchedGenericParamConstraints -> int
static readonly DryIoc.Error.NoMatchedImplementedTypesWithServiceType -> int
static readonly DryIoc.Error.NoMatchedScopeFound -> int
static readonly DryIoc.Error.NoMoreRegistrationsAllowed -> int
static readonly DryIoc.Error.NoMoreUnregistrationsAllowed -> int
static readonly DryIoc.Error.NoServicesWereRegisteredByRegisterMany -> int
static readonly DryIoc.Error.NoServiceTypesToValidate -> int
static readonly DryIoc.Error.NotFoundMetaCtorWithTwoArgs -> int
static readonly DryIoc.Error.NotFoundOpenGenericImplTypeArgInService -> int
static readonly DryIoc.Error.NotFoundSpecifiedWritablePropertyOrField -> int
static readonly DryIoc.Error.NotSupportedMadeOfExpression -> int
static readonly DryIoc.Error.OpenGenericFactoryMethodDeclaringTypeIsNotSupportedOnThisPlatform -> int
static readonly DryIoc.Error.PassedCtorOrMemberIsNull -> int
static readonly DryIoc.Error.PassedMemberIsNotStaticButInstanceFactoryIsNull -> int
static readonly DryIoc.Error.PassedMemberIsStaticButInstanceFactoryIsNotNull -> int
static readonly DryIoc.Error.PushingToRequestWithoutFactory -> int
static readonly DryIoc.Error.RecursiveDependencyDetected -> int
static readonly DryIoc.Error.RegisteredDelegateResultIsNotOfServiceType -> int
static readonly DryIoc.Error.RegisteredDisposableTransientWontBeDisposedByContainer -> int
static readonly DryIoc.Error.RegisteredFactoryMethodResultTypesIsNotAssignableToImplementationType -> int
static readonly DryIoc.Error.RegisteringAbstractImplementationTypeAndNoFactoryMethod -> int
static readonly DryIoc.Error.RegisteringImplementationNotAssignableToServiceType -> int
static readonly DryIoc.Error.RegisteringInstanceNotAssignableToServiceType -> int
static readonly DryIoc.Error.RegisteringNotAGenericTypedefImplType -> int
static readonly DryIoc.Error.RegisteringNotAGenericTypedefServiceType -> int
static readonly DryIoc.Error.RegisteringNullImplementationTypeAndNoFactoryMethod -> int
static readonly DryIoc.Error.RegisteringObjectTypeAsImplementationIsNotSupported -> int
static readonly DryIoc.Error.RegisteringOpenGenericImplWithNonGenericService -> int
static readonly DryIoc.Error.RegisteringOpenGenericServiceWithMissingTypeArgs -> int
static readonly DryIoc.Error.RegisterMappingNotFoundRegisteredService -> int
static readonly DryIoc.Error.RegisterMappingUnableToSelectFromMultipleFactories -> int
static readonly DryIoc.Error.ResolutionNeedsRequiredServiceType -> int
static readonly DryIoc.Error.ResolvingOpenGenericServiceTypeIsNotPossible -> int
static readonly DryIoc.Error.ScopeIsDisposed -> int
static readonly DryIoc.Error.ServiceIsNotAssignableFromFactoryMethod -> int
static readonly DryIoc.Error.ServiceTypeIsNull -> int
static readonly DryIoc.Error.StateIsRequiredToUseItem -> int
static readonly DryIoc.Error.UnableToFindConstructorWithArgs -> int
static readonly DryIoc.Error.UnableToFindCtorWithAllResolvableArgs -> int
static readonly DryIoc.Error.UnableToFindSingleConstructor -> int
static readonly DryIoc.Error.UnableToInterpretTheNestedLambda -> int
static readonly DryIoc.Error.UnableToRegisterDuplicateDefault -> int
static readonly DryIoc.Error.UnableToRegisterDuplicateKey -> int
static readonly DryIoc.Error.UnableToResolveFromRegisteredServices -> int
static readonly DryIoc.Error.UnableToResolveUnknownService -> int
static readonly DryIoc.Error.UnableToSelectCtor -> int
static readonly DryIoc.Error.UnableToSelectFromManyRegistrationsWithMatchingMetadata -> int
static readonly DryIoc.Error.UnableToSelectSinglePublicConstructorFromMultiple -> int
static readonly DryIoc.Error.UnableToSelectSinglePublicConstructorFromNone -> int
static readonly DryIoc.Error.UndefinedFieldWhenGettingField -> int
static readonly DryIoc.Error.UndefinedMethodWhenGettingMethodWithSpecifiedParameters -> int
static readonly DryIoc.Error.UndefinedMethodWhenGettingTheSingleMethod -> int
static readonly DryIoc.Error.UndefinedPropertyWhenGettingProperty -> int
static readonly DryIoc.Error.UnexpectedExpressionInsteadOfArgMethodInMadeOf -> int
static readonly DryIoc.Error.UnexpectedExpressionInsteadOfConstantInMadeOf -> int
static readonly DryIoc.Error.UnexpectedFactoryMemberExpressionInMadeOf -> int
static readonly DryIoc.Error.ValidateFoundErrors -> int
static readonly DryIoc.Error.WaitForScopedServiceIsCreatedTimeoutExpired -> int
static readonly DryIoc.Error.WeakRefReuseWrapperGCed -> int
static readonly DryIoc.Messages.EmptyResponse.Value -> DryIoc.Messages.EmptyResponse
static readonly DryIoc.Rules.DefaultDynamicRegistrationFlags -> DryIoc.DynamicRegistrationFlags
virtual DryIoc.Factory.CanAccessImplementationType.get -> bool
virtual DryIoc.Factory.HasRuntimeState.get -> bool
virtual DryIoc.Factory.RegistrationOrder.get -> int
virtual DryIoc.FastExpressionCompiler.LightExpression.BlockExpression.ArgumentCount.get -> int
virtual DryIoc.FastExpressionCompiler.LightExpression.DebugInfoExpression.EndColumn.get -> int
virtual DryIoc.FastExpressionCompiler.LightExpression.DebugInfoExpression.EndLine.get -> int
virtual DryIoc.FastExpressionCompiler.LightExpression.DebugInfoExpression.IsClear.get -> bool
virtual DryIoc.FastExpressionCompiler.LightExpression.DebugInfoExpression.StartColumn.get -> int
virtual DryIoc.FastExpressionCompiler.LightExpression.DebugInfoExpression.StartLine.get -> int
virtual DryIoc.FastExpressionCompiler.LightExpression.ElementInit.ArgumentCount.get -> int
virtual DryIoc.FastExpressionCompiler.LightExpression.Expression.IsIntrinsic.get -> bool
virtual DryIoc.FastExpressionCompiler.LightExpression.GotoExpression.Kind.get -> System.Linq.Expressions.GotoExpressionKind
virtual DryIoc.FastExpressionCompiler.LightExpression.IndexExpression.ArgumentCount.get -> int
virtual DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression.ArgumentCount.get -> int
virtual DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression.ParameterCount.get -> int
virtual DryIoc.FastExpressionCompiler.LightExpression.MemberInitExpression.ArgumentCount.get -> int
virtual DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression.ArgumentCount.get -> int
virtual DryIoc.FastExpressionCompiler.LightExpression.NewArrayExpression.ArgumentCount.get -> int
virtual DryIoc.FastExpressionCompiler.LightExpression.NewExpression.ArgumentCount.get -> int
virtual DryIoc.FastExpressionCompiler.LightExpression.NewExpression.NoByRefArgs.get -> bool
virtual DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression.IsByRef.get -> bool
virtual DryIoc.FastExpressionCompiler.LightExpression.SymbolDocumentInfo.DocumentType.get -> System.Guid
virtual DryIoc.FastExpressionCompiler.LightExpression.SymbolDocumentInfo.Language.get -> System.Guid
virtual DryIoc.FastExpressionCompiler.LightExpression.SymbolDocumentInfo.LanguageVendor.get -> System.Guid
virtual DryIoc.ImTools.ImHashMap<K, V>.Count() -> int
virtual DryIoc.ImTools.ImMap<V>.Count() -> int
virtual DryIoc.ImTools.ImMap<V>.IsBranch.get -> bool
~abstract DryIoc.Factory.CreateExpressionOrDefault(DryIoc.Request request) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~abstract DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression.Value.get -> object
~abstract DryIoc.FastExpressionCompiler.LightExpression.Expression.Type.get -> System.Type
~abstract DryIoc.FastExpressionCompiler.LightExpression.IndexExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~abstract DryIoc.FastExpressionCompiler.LightExpression.NewArrayExpression.Expressions.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~abstract DryIoc.ImTools.ImHashMap<K, V>.Entry.GetEntryOrNull(int hash, K key) -> DryIoc.ImTools.ImHashMapEntry<K, V>
~abstract DryIoc.ImTools.ImHashMap<K, V>.Entry.Update(DryIoc.ImTools.ImHashMapEntry<K, V> newEntry) -> DryIoc.ImTools.ImHashMap<K, V>.Entry
~abstract DryIoc.ImTools.ImHashMap<K, V>.Entry.UpdateOrKeep<S>(S state, DryIoc.ImTools.ImHashMapEntry<K, V> newEntry, DryIoc.ImTools.ImHashMap<K, V>.UpdaterOrKeeper<S> updateOrKeep) -> DryIoc.ImTools.ImHashMap<K, V>.Entry
~abstract DryIoc.Messages.AsyncMessageHandler<M, R>.Handle(M message, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<R>
~abstract DryIoc.PropertyOrFieldServiceInfo.Member.get -> System.Reflection.MemberInfo
~abstract DryIoc.PropertyOrFieldServiceInfo.SetValue(object holder, object value) -> void
~abstract DryIoc.ServiceInfo.ServiceType.get -> System.Type
~const DryIoc.ContainerTools.FacadeKey = "@facade" -> string
~DryIoc.AsyncExecutionFlowScopeContext.GetCurrentOrDefault() -> DryIoc.IScope
~DryIoc.AsyncExecutionFlowScopeContext.SetCurrent(DryIoc.SetCurrentScopeHandler changeCurrentScope) -> DryIoc.IScope
~DryIoc.CompositeScopeName.Match(object scopeName) -> bool
~DryIoc.Container.ClearCache(System.Type serviceType, DryIoc.FactoryType? factoryType, object serviceKey) -> bool
~DryIoc.Container.Container(DryIoc.Rules rules = null, DryIoc.IScopeContext scopeContext = null) -> void
~DryIoc.Container.Container(System.Func<DryIoc.Rules, DryIoc.Rules> configure, DryIoc.IScopeContext scopeContext = null) -> void
~DryIoc.Container.CurrentOrSingletonScope.get -> DryIoc.IScope
~DryIoc.Container.CurrentScope.get -> DryIoc.IScope
~DryIoc.Container.DisposeInfo.get -> object
~DryIoc.Container.GetConstantExpression(object item, System.Type itemType = null, bool throwIfStateRequired = false) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~DryIoc.Container.GetRegisteredFactories(System.Type serviceType, object serviceKey, DryIoc.FactoryType factoryType) -> DryIoc.Factory[]
~DryIoc.Container.GetServiceRegistrations() -> System.Collections.Generic.IEnumerable<DryIoc.ServiceRegistrationInfo>
~DryIoc.Container.IsRegistered(System.Type serviceType, object serviceKey, DryIoc.FactoryType factoryType, System.Func<DryIoc.Factory, bool> condition) -> bool
~DryIoc.Container.OwnCurrentScope.get -> DryIoc.IScope
~DryIoc.Container.Parent.get -> DryIoc.IResolverContext
~DryIoc.Container.Register(DryIoc.Factory factory, System.Type serviceType, object serviceKey, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered, bool isStaticallyChecked) -> void
~DryIoc.Container.ResolveCompileTimeGeneratedOrDefault(System.Type serviceType) -> object
~DryIoc.Container.ResolveCompileTimeGeneratedOrDefault(System.Type serviceType, object serviceKey) -> object
~DryIoc.Container.ResolveManyCompileTimeGeneratedOrEmpty(System.Type serviceType) -> System.Collections.Generic.IEnumerable<DryIoc.Container.ResolveManyResult>
~DryIoc.Container.ResolveManyResult.FactoryDelegate -> DryIoc.FactoryDelegate
~DryIoc.Container.ResolveManyResult.RequiredServiceType -> System.Type
~DryIoc.Container.ResolveManyResult.ServiceKey -> object
~DryIoc.Container.Root.get -> DryIoc.IResolverContext
~DryIoc.Container.Rules.get -> DryIoc.Rules
~DryIoc.Container.ScopeContext.get -> DryIoc.IScopeContext
~DryIoc.Container.SingletonScope.get -> DryIoc.IScope
~DryIoc.Container.Unregister(System.Type serviceType, object serviceKey, DryIoc.FactoryType factoryType, System.Func<DryIoc.Factory, bool> condition) -> void
~DryIoc.Container.Use(System.Type serviceType, object instance) -> void
~DryIoc.Container.With(DryIoc.IResolverContext parent, DryIoc.Rules rules, DryIoc.IScopeContext scopeContext, DryIoc.RegistrySharing registrySharing, DryIoc.IScope singletonScope, DryIoc.IScope currentScope) -> DryIoc.IContainer
~DryIoc.Container.With(DryIoc.IResolverContext parent, DryIoc.Rules rules, DryIoc.IScopeContext scopeContext, DryIoc.RegistrySharing registrySharing, DryIoc.IScope singletonScope, DryIoc.IScope currentScope, DryIoc.IsRegistryChangePermitted? isRegistryChangePermitted) -> DryIoc.IContainer
~DryIoc.Container.With(DryIoc.Rules rules, DryIoc.IScopeContext scopeContext, DryIoc.RegistrySharing registrySharing, DryIoc.IScope singletonScope) -> DryIoc.IContainer
~DryIoc.Container.WithCurrentScope(DryIoc.IScope scope) -> DryIoc.IResolverContext
~DryIoc.Container.WithNoMoreRegistrationAllowed(bool ignoreInsteadOfThrow = false) -> DryIoc.IContainer
~DryIoc.ContainerException.ContainerException(int error, DryIoc.ContainerException[] exceptions) -> void
~DryIoc.ContainerException.ContainerException(int error, string message) -> void
~DryIoc.ContainerException.ContainerException(int errorCode, string message, System.Exception innerException) -> void
~DryIoc.ContainerException.ContainerException(int errorCode, string message, System.Exception innerException, System.Func<int, string, System.Exception, string> formatMessage) -> void
~DryIoc.ContainerException.ContainerException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void
~DryIoc.ContainerException.ErrorName.get -> string
~DryIoc.ContainerException.TryGetDetails(DryIoc.IContainer container) -> string
~DryIoc.CurrentScopeReuse.Apply(DryIoc.Request request, DryIoc.FastExpressionCompiler.LightExpression.Expression serviceFactoryExpr) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~DryIoc.CurrentScopeReuse.CanApply(DryIoc.Request request) -> bool
~DryIoc.CurrentScopeReuse.CurrentScopeReuse(object name = null, bool scopedOrSingleton = false) -> void
~DryIoc.CurrentScopeReuse.CurrentScopeReuse(object name, bool scopedOrSingleton, int lifespan) -> void
~DryIoc.CurrentScopeReuse.Name.get -> object
~DryIoc.CurrentScopeReuse.ToExpression(System.Func<object, DryIoc.FastExpressionCompiler.LightExpression.Expression> fallbackConverter) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~DryIoc.DefaultDynamicKey.Next() -> DryIoc.DefaultDynamicKey
~DryIoc.DefaultDynamicKey.ToExpression(System.Func<object, DryIoc.FastExpressionCompiler.LightExpression.Expression> fallbackConverter) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~DryIoc.DefaultKey.Next() -> DryIoc.DefaultKey
~DryIoc.DefaultKey.ToExpression(System.Func<object, DryIoc.FastExpressionCompiler.LightExpression.Expression> fallbackConverter) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~DryIoc.DelegateFactory.DelegateFactory(DryIoc.FactoryDelegate factoryDelegate) -> void
~DryIoc.DynamicRegistration.DynamicRegistration(DryIoc.Factory factory, DryIoc.IfAlreadyRegistered ifAlreadyRegistered = DryIoc.IfAlreadyRegistered.AppendNotKeyed, object serviceKey = null) -> void
~DryIoc.ExpressionFactory.ExpressionFactory(System.Func<DryIoc.Request, DryIoc.FastExpressionCompiler.LightExpression.Expression> getServiceExpression, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null) -> void
~DryIoc.Factory.CheckCondition(DryIoc.Request request) -> bool
~DryIoc.Factory.DoNotCache() -> DryIoc.Factory
~DryIoc.FactoryMethod.FactoryMethod(System.Reflection.MemberInfo memberInfo) -> void
~DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression.BinaryExpression(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> void
~DryIoc.FastExpressionCompiler.LightExpression.BlockExpression.Result.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~DryIoc.FastExpressionCompiler.LightExpression.CodePrinter.IObjectToCode.ToCode(object x, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null) -> string
~DryIoc.FastExpressionCompiler.LightExpression.ConvertUnaryExpression.ConvertUnaryExpression(DryIoc.FastExpressionCompiler.LightExpression.Expression operand, System.Type type) -> void
~DryIoc.FastExpressionCompiler.LightExpression.ConvertViaCastClassIntrinsicExpression.ConvertViaCastClassIntrinsicExpression(DryIoc.FastExpressionCompiler.LightExpression.Expression operand, System.Type type) -> void
~DryIoc.FastExpressionCompiler.LightExpression.ConvertViaCastClassIntrinsicExpression<T>
~DryIoc.FastExpressionCompiler.LightExpression.ConvertViaCastClassIntrinsicExpression<T>.ConvertViaCastClassIntrinsicExpression(DryIoc.FastExpressionCompiler.LightExpression.Expression operand) -> void
~DryIoc.FastExpressionCompiler.LightExpression.ConvertWithMethodUnaryExpression.ConvertWithMethodUnaryExpression(System.Linq.Expressions.ExpressionType nodeType, DryIoc.FastExpressionCompiler.LightExpression.Expression operand, System.Type type, System.Reflection.MethodInfo method) -> void
~DryIoc.FastExpressionCompiler.LightExpression.DynamicExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~DryIoc.FastExpressionCompiler.LightExpression.DynamicExpression.Binder.get -> System.Runtime.CompilerServices.CallSiteBinder
~DryIoc.FastExpressionCompiler.LightExpression.DynamicExpression.DelegateType.get -> System.Type
~DryIoc.FastExpressionCompiler.LightExpression.DynamicExpression.DynamicExpression(System.Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression> arguments) -> void
~DryIoc.FastExpressionCompiler.LightExpression.Expression.ToExpression() -> System.Linq.Expressions.Expression
~DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>.ToLambdaExpression() -> System.Linq.Expressions.Expression<TDelegate>
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ArrayClosure.ArrayClosure(object[] constantsAndNestedLambdas) -> void
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ArrayClosureWithNonPassedParams.ArrayClosureWithNonPassedParams(object[] constantsAndNestedLambdas, object[] nonPassedParams) -> void
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ArrayClosureWithNonPassedParams.ArrayClosureWithNonPassedParams(object[] nonPassedParams) -> void
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.AddConstantOrIncrementUsageCount(object value) -> bool
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.AddInlinedLambdaInvoke(DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression e) -> short
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.AddLabel(DryIoc.FastExpressionCompiler.LightExpression.LabelTarget labelTarget, short inlinedLambdaInvokeIndex = -1) -> void
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.AddNestedLambda(DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.NestedLambdaInfo nestedLambdaInfo) -> void
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.AddNonPassedParam(DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression expr) -> void
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.ClosureInfo(DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureStatus status, object[] constValues = null, short[] constUsage = null) -> void
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.Constants -> DryIoc.FastExpressionCompiler.LightExpression.LiveCountArray<object>
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.GetArrayOfConstantsAndNestedLambdas() -> object[]
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.GetDefinedLabel(int index, System.Reflection.Emit.ILGenerator il) -> System.Reflection.Emit.Label
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.GetDefinedLocalVarOrDefault(DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression varParamExpr) -> int
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.GetLabelOrInvokeIndex(object labelTarget) -> short
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.IsLocalVar(object varParamExpr) -> bool
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.NestedLambdaOrLambdas -> object
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.NonPassedParameters -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression[]
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.PushBlockAndConstructLocalVars(System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> blockVarExprs, System.Reflection.Emit.ILGenerator il) -> void
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.PushBlockWithVars(DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression blockVarExpr) -> void
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.PushBlockWithVars(DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression blockVarExpr, int varIndex) -> void
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.PushBlockWithVars(System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> blockVarExprs, int[] localVarIndexes = null) -> void
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.TryMarkDefinedLabel(int index, System.Reflection.Emit.ILGenerator il) -> void
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.DebugArrayClosure.CSharpString.get -> string
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.DebugArrayClosure.DebugArrayClosure(object[] constantsAndNestedLambdas, DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression expr) -> void
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.DebugArrayClosure.Expression.get -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.DebugArrayClosure.ExpressionString.get -> string
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.NestedLambdaInfo.Lambda -> object
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.NestedLambdaInfo.NestedLambdaInfo(DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression lambdaExpression) -> void
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.NestedLambdaWithConstantsAndNestedLambdas.NestedLambdaWithConstantsAndNestedLambdas(object nestedLambda, object constantsAndNestedLambdas) -> void
~DryIoc.FastExpressionCompiler.LightExpression.FieldExpression.FieldInfo.get -> System.Reflection.FieldInfo
~DryIoc.FastExpressionCompiler.LightExpression.FiveParametersExpression<TDelegate>
~DryIoc.FastExpressionCompiler.LightExpression.FourParametersExpression<TDelegate>
~DryIoc.FastExpressionCompiler.LightExpression.IArgumentProvider.GetArgument(int index) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~DryIoc.FastExpressionCompiler.LightExpression.IDelegateDebugInfo.CSharpString.get -> string
~DryIoc.FastExpressionCompiler.LightExpression.IDelegateDebugInfo.Expression.get -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~DryIoc.FastExpressionCompiler.LightExpression.IDelegateDebugInfo.ExpressionString.get -> string
~DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider.GetParameter(int index) -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression.LambdaExpression(DryIoc.FastExpressionCompiler.LightExpression.Expression body) -> void
~DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression.ToLambdaExpression() -> System.Linq.Expressions.LambdaExpression
~DryIoc.FastExpressionCompiler.LightExpression.LiveCountArray<T>.Items -> T[]
~DryIoc.FastExpressionCompiler.LightExpression.LiveCountArray<T>.LiveCountArray(T[] items) -> void
~DryIoc.FastExpressionCompiler.LightExpression.ManyParametersExpression<TDelegate>
~DryIoc.FastExpressionCompiler.LightExpression.MemberExpression.MemberExpression(System.Reflection.MemberInfo member) -> void
~DryIoc.FastExpressionCompiler.LightExpression.MemberInitExpression.NewExpression.get -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~DryIoc.FastExpressionCompiler.LightExpression.MethodBinaryExpression.MethodBinaryExpression(System.Linq.Expressions.ExpressionType nodeType, DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Type type, System.Reflection.MethodInfo method) -> void
~DryIoc.FastExpressionCompiler.LightExpression.NamedLabelTarget.NamedLabelTarget(string name) -> void
~DryIoc.FastExpressionCompiler.LightExpression.NodeTypedUnaryExpression.NodeTypedUnaryExpression(System.Linq.Expressions.ExpressionType nodeType, DryIoc.FastExpressionCompiler.LightExpression.Expression operand) -> void
~DryIoc.FastExpressionCompiler.LightExpression.NotBooleanUnaryExpression.NotBooleanUnaryExpression(DryIoc.FastExpressionCompiler.LightExpression.Expression operand) -> void
~DryIoc.FastExpressionCompiler.LightExpression.NotSupportedExpressionException.NotSupportedExpressionException(DryIoc.FastExpressionCompiler.LightExpression.NotSupported reason, string message) -> void
~DryIoc.FastExpressionCompiler.LightExpression.OneParameterExpression<TDelegate>
~DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression.Name.get -> string
~DryIoc.FastExpressionCompiler.LightExpression.PropertyExpression.PropertyInfo.get -> System.Reflection.PropertyInfo
~DryIoc.FastExpressionCompiler.LightExpression.SixParametersExpression<TDelegate>
~DryIoc.FastExpressionCompiler.LightExpression.SwitchCase.SwitchCase(DryIoc.FastExpressionCompiler.LightExpression.Expression body, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> testValues) -> void
~DryIoc.FastExpressionCompiler.LightExpression.SwitchExpression.Cases.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.SwitchCase>
~DryIoc.FastExpressionCompiler.LightExpression.SwitchExpression.SwitchExpression(System.Type type, DryIoc.FastExpressionCompiler.LightExpression.Expression switchValue, DryIoc.FastExpressionCompiler.LightExpression.Expression defaultBody, DryIoc.FastExpressionCompiler.LightExpression.SwitchCase[] cases) -> void
~DryIoc.FastExpressionCompiler.LightExpression.SymbolDocumentInfo.FileName.get -> string
~DryIoc.FastExpressionCompiler.LightExpression.ThreeParametersExpression<TDelegate>
~DryIoc.FastExpressionCompiler.LightExpression.ThrowUnaryExpression.ThrowUnaryExpression(DryIoc.FastExpressionCompiler.LightExpression.Expression operand) -> void
~DryIoc.FastExpressionCompiler.LightExpression.TryExpression.Handlers.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.CatchBlock>
~DryIoc.FastExpressionCompiler.LightExpression.TwoParametersExpression<TDelegate>
~DryIoc.FastExpressionCompiler.LightExpression.TypeBinaryExpression.TypeOperand.get -> System.Type
~DryIoc.FastExpressionCompiler.LightExpression.TypedConvertUnaryExpression<T>.TypedConvertUnaryExpression(DryIoc.FastExpressionCompiler.LightExpression.Expression operand) -> void
~DryIoc.FastExpressionCompiler.LightExpression.TypedLabelTarget.TypedLabelTarget(System.Type type) -> void
~DryIoc.FastExpressionCompiler.LightExpression.TypedNamedLabelTarget.TypedNamedLabelTarget(System.Type type, string name) -> void
~DryIoc.FastExpressionCompiler.LightExpression.TypedReturnExpression<TDelegate>
~DryIoc.FastExpressionCompiler.LightExpression.TypedReturnFiveParametersExpression<TDelegate>
~DryIoc.FastExpressionCompiler.LightExpression.TypedReturnFourParametersExpression<TDelegate>
~DryIoc.FastExpressionCompiler.LightExpression.TypedReturnManyParametersExpression<TDelegate>
~DryIoc.FastExpressionCompiler.LightExpression.TypedReturnOneParameterExpression<TDelegate>
~DryIoc.FastExpressionCompiler.LightExpression.TypedReturnSixParametersExpression<TDelegate>
~DryIoc.FastExpressionCompiler.LightExpression.TypedReturnThreeParametersExpression<TDelegate>
~DryIoc.FastExpressionCompiler.LightExpression.TypedReturnTwoParametersExpression<TDelegate>
~DryIoc.FastExpressionCompiler.LightExpression.TypedUnaryExpression.TypedUnaryExpression(System.Linq.Expressions.ExpressionType nodeType, DryIoc.FastExpressionCompiler.LightExpression.Expression operand, System.Type type) -> void
~DryIoc.FastExpressionCompiler.LightExpression.TypedUnaryExpression<T>.TypedUnaryExpression(System.Linq.Expressions.ExpressionType nodeType, DryIoc.FastExpressionCompiler.LightExpression.Expression operand) -> void
~DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression.UnaryExpression(DryIoc.FastExpressionCompiler.LightExpression.Expression operand) -> void
~DryIoc.FastExpressionCompiler.LightExpression.WithComparisonSwitchExpression.WithComparisonSwitchExpression(System.Type type, DryIoc.FastExpressionCompiler.LightExpression.Expression switchValue, DryIoc.FastExpressionCompiler.LightExpression.Expression defaultBody, DryIoc.FastExpressionCompiler.LightExpression.SwitchCase[] cases, System.Reflection.MethodInfo comparison) -> void
~DryIoc.HiddenDisposable.HiddenDisposable(object value) -> void
~DryIoc.IContainer.ClearCache(System.Type serviceType, DryIoc.FactoryType? factoryType, object serviceKey) -> bool
~DryIoc.IContainer.GetAllServiceFactories(System.Type serviceType, bool bothClosedAndOpenGenerics = false) -> DryIoc.ImTools.KV<object, DryIoc.Factory>[]
~DryIoc.IContainer.GetConstantExpression(object item, System.Type itemType = null, bool throwIfStateRequired = false) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~DryIoc.IContainer.GetDecoratorExpressionOrDefault(DryIoc.Request request) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~DryIoc.IContainer.GetDecoratorFactoriesOrDefault(int serviceTypeHash, System.Type serviceType) -> DryIoc.Factory[]
~DryIoc.IContainer.GetDecoratorFactoriesOrDefault(System.Type serviceType) -> DryIoc.Factory[]
~DryIoc.IContainer.GetServiceFactoryOrDefault(DryIoc.Request request) -> DryIoc.Factory
~DryIoc.IContainer.GetServiceRegisteredAndDynamicFactories(System.Type serviceType) -> DryIoc.ImTools.KV<object, DryIoc.Factory>[]
~DryIoc.IContainer.GetWrappedType(System.Type serviceType) -> System.Type
~DryIoc.IContainer.GetWrappedType(System.Type serviceType, System.Type requiredServiceType) -> System.Type
~DryIoc.IContainer.GetWrapperFactoryOrDefault(System.Type serviceType) -> DryIoc.Factory
~DryIoc.IContainer.IsWrapper(System.Type serviceType, System.Type openGenericServiceType = null) -> bool
~DryIoc.IContainer.ResolveFactory(DryIoc.Request request) -> DryIoc.Factory
~DryIoc.IContainer.Use(System.Type serviceType, object instance) -> void
~DryIoc.IContainer.With(DryIoc.IResolverContext parent, DryIoc.Rules rules, DryIoc.IScopeContext scopeContext, DryIoc.RegistrySharing registrySharing, DryIoc.IScope singletonScope, DryIoc.IScope currentScope) -> DryIoc.IContainer
~DryIoc.IContainer.With(DryIoc.IResolverContext parent, DryIoc.Rules rules, DryIoc.IScopeContext scopeContext, DryIoc.RegistrySharing registrySharing, DryIoc.IScope singletonScope, DryIoc.IScope currentScope, DryIoc.IsRegistryChangePermitted? isRegistryChangePermitted) -> DryIoc.IContainer
~DryIoc.IContainer.With(DryIoc.Rules rules, DryIoc.IScopeContext scopeContext, DryIoc.RegistrySharing registrySharing, DryIoc.IScope singletonScope) -> DryIoc.IContainer
~DryIoc.IContainer.WithNoMoreRegistrationAllowed(bool ignoreInsteadOfThrow = false) -> DryIoc.IContainer
~DryIoc.IConvertibleToExpression.ToExpression(System.Func<object, DryIoc.FastExpressionCompiler.LightExpression.Expression> fallbackConverter) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~DryIoc.ImTools.GrowingList<T>.GrowingList(T[] items, int count = 0) -> void
~DryIoc.ImTools.GrowingList<T>.Items -> T[]
~DryIoc.ImTools.GrowingList<T>.ResizeToArray() -> T[]
~DryIoc.ImTools.ImList<T>.Enumerate() -> System.Collections.Generic.IEnumerable<T>
~DryIoc.ImTools.ImList<T>.Push(T head) -> DryIoc.ImTools.ImList<T>
~DryIoc.ImTools.ImMap.ImMapEnumerable<V>.ImMapEnumerable(DryIoc.ImTools.ImMap<V> map) -> void
~DryIoc.ImTools.ImMap.ImMapEnumerator<V>.Current.get -> DryIoc.ImTools.ImMapEntry<V>
~DryIoc.ImTools.ImMapParentStack<V>.Entry.NextBranch -> DryIoc.ImTools.ImMap<V>
~DryIoc.ImTools.ImMapParentStack<V>.Entry.NextEntry -> DryIoc.ImTools.ImMapEntry<V>
~DryIoc.ImTools.ImMapParentStack<V>.Items -> DryIoc.ImTools.ImMapParentStack<V>.Entry[]
~DryIoc.ImTools.ImMapParentStack<V>.Put(int index, DryIoc.ImTools.ImMapEntry<V> entry, DryIoc.ImTools.ImMap<V> branch) -> void
~DryIoc.ImTools.ImZipper<T>.Append(T focus) -> DryIoc.ImTools.ImZipper<T>
~DryIoc.ImTools.ImZipper<T>.Insert(T focus) -> DryIoc.ImTools.ImZipper<T>
~DryIoc.ImTools.ImZipper<T>.Map<R>(System.Func<T, int, R> map) -> DryIoc.ImTools.ImZipper<R>
~DryIoc.ImTools.ImZipper<T>.Map<R>(System.Func<T, R> map) -> DryIoc.ImTools.ImZipper<R>
~DryIoc.ImTools.ImZipper<T>.PopLeft() -> DryIoc.ImTools.ImZipper<T>
~DryIoc.ImTools.ImZipper<T>.PopRight() -> DryIoc.ImTools.ImZipper<T>
~DryIoc.ImTools.ImZipper<T>.PushLeft(T focus) -> DryIoc.ImTools.ImZipper<T>
~DryIoc.ImTools.ImZipper<T>.PushRight(T focus) -> DryIoc.ImTools.ImZipper<T>
~DryIoc.ImTools.ImZipper<T>.ShiftLeft() -> DryIoc.ImTools.ImZipper<T>
~DryIoc.ImTools.ImZipper<T>.ShiftRight() -> DryIoc.ImTools.ImZipper<T>
~DryIoc.ImTools.ImZipper<T>.WithFocus(T focus) -> DryIoc.ImTools.ImZipper<T>
~DryIoc.ImTools.IPrintable.Print(System.Text.StringBuilder s, System.Func<System.Text.StringBuilder, object, System.Text.StringBuilder> printer) -> System.Text.StringBuilder
~DryIoc.ImTools.KV<K, V>.Print(System.Text.StringBuilder s, System.Func<System.Text.StringBuilder, object, System.Text.StringBuilder> printer) -> System.Text.StringBuilder
~DryIoc.ImTools.MapParentStack.Get(int index) -> object
~DryIoc.ImTools.MapParentStack.Put(object item, int index) -> void
~DryIoc.ImTools.Ref<T>
~DryIoc.ImTools.Ref<T>.Ref(T initialValue = null) -> void
~DryIoc.ImTools.Ref<T>.SetNonAtomic(T newValue) -> T
~DryIoc.ImTools.Ref<T>.Swap(System.Func<T, T> getNewValue) -> T
~DryIoc.ImTools.Ref<T>.Swap(T newValue) -> T
~DryIoc.ImTools.Ref<T>.Swap<A, B>(A a, B b, System.Func<T, A, B, T> getNewValue, int retryCountUntilThrow = 50) -> T
~DryIoc.ImTools.Ref<T>.Swap<A>(A a, System.Func<T, A, T> getNewValue, int retryCountUntilThrow = 50) -> T
~DryIoc.ImTools.Ref<T>.SwapAndGetNewValue<A>(A a, System.Func<T, A, T> getNewValue, int retryCountUntilThrow = 50) -> T
~DryIoc.ImTools.Ref<T>.TrySwapIfStillCurrent(T currentValue, T newValue) -> bool
~DryIoc.ImTools.Ref<T>.UnsafeSet(T newValue) -> void
~DryIoc.ImTools.Ref<T>.Value.get -> T
~DryIoc.ImTools.St<A, B>.Pool() -> DryIoc.ImTools.St<A, B>
~DryIoc.ImTools.StackPool<T>
~DryIoc.ImTools.StackPool<T>.RentOrDefault() -> T
~DryIoc.ImTools.StackPool<T>.Return(T x) -> void
~DryIoc.InstanceFactory.InstanceFactory(object instance) -> void
~DryIoc.Interpreter.ParentLambdaArgs.ParentLambdaArgs(DryIoc.Interpreter.ParentLambdaArgs parentWithArgs, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, object paramValues) -> void
~DryIoc.IRegistrator.GetRegisteredFactories(System.Type serviceType, object serviceKey, DryIoc.FactoryType factoryType) -> DryIoc.Factory[]
~DryIoc.IRegistrator.GetServiceRegistrations() -> System.Collections.Generic.IEnumerable<DryIoc.ServiceRegistrationInfo>
~DryIoc.IRegistrator.IsRegistered(System.Type serviceType, object serviceKey, DryIoc.FactoryType factoryType, System.Func<DryIoc.Factory, bool> condition) -> bool
~DryIoc.IRegistrator.Register(DryIoc.Factory factory, System.Type serviceType, object serviceKey, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered, bool isStaticallyChecked) -> void
~DryIoc.IRegistrator.Rules.get -> DryIoc.Rules
~DryIoc.IRegistrator.Unregister(System.Type serviceType, object serviceKey, DryIoc.FactoryType factoryType, System.Func<DryIoc.Factory, bool> condition) -> void
~DryIoc.IRegistrator.Use(System.Type serviceType, object instance) -> void
~DryIoc.IResolver.Resolve(System.Type serviceType, DryIoc.IfUnresolved ifUnresolved) -> object
~DryIoc.IResolver.Resolve(System.Type serviceType, object serviceKey, DryIoc.IfUnresolved ifUnresolved, System.Type requiredServiceType, DryIoc.Request preResolveParent, object[] args) -> object
~DryIoc.IResolver.ResolveMany(System.Type serviceType, object serviceKey, System.Type requiredServiceType, DryIoc.Request preResolveParent, object[] args) -> System.Collections.Generic.IEnumerable<object>
~DryIoc.IResolverContext.CurrentOrSingletonScope.get -> DryIoc.IScope
~DryIoc.IResolverContext.CurrentScope.get -> DryIoc.IScope
~DryIoc.IResolverContext.DisposeInfo.get -> object
~DryIoc.IResolverContext.InjectPropertiesAndFields(object instance, string[] propertyAndFieldNames) -> void
~DryIoc.IResolverContext.OwnCurrentScope.get -> DryIoc.IScope
~DryIoc.IResolverContext.Parent.get -> DryIoc.IResolverContext
~DryIoc.IResolverContext.Root.get -> DryIoc.IResolverContext
~DryIoc.IResolverContext.ScopeContext.get -> DryIoc.IScopeContext
~DryIoc.IResolverContext.SingletonScope.get -> DryIoc.IScope
~DryIoc.IResolverContext.Use(System.Type serviceType, object instance) -> void
~DryIoc.IResolverContext.WithCurrentScope(DryIoc.IScope scope) -> DryIoc.IResolverContext
~DryIoc.IReuse.Apply(DryIoc.Request request, DryIoc.FastExpressionCompiler.LightExpression.Expression serviceFactoryExpr) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~DryIoc.IReuse.CanApply(DryIoc.Request request) -> bool
~DryIoc.IReuse.Name.get -> object
~DryIoc.IScope.Clone(bool withDisposables) -> DryIoc.IScope
~DryIoc.IScope.GetOrAddViaFactoryDelegate(int id, DryIoc.FactoryDelegate createValue, DryIoc.IResolverContext r) -> object
~DryIoc.IScope.GetOrAddViaFactoryDelegateWithDisposalOrder(int id, DryIoc.FactoryDelegate createValue, DryIoc.IResolverContext r, int disposalOrder) -> object
~DryIoc.IScope.Name.get -> object
~DryIoc.IScope.Parent.get -> DryIoc.IScope
~DryIoc.IScope.SetOrAdd(int id, object item) -> void
~DryIoc.IScope.SetUsed(int hash, System.Type type, object instance) -> void
~DryIoc.IScope.TrackDisposable<T>(T disposable, int disposalOrder = 0) -> T
~DryIoc.IScope.TryGet(out object item, int id) -> bool
~DryIoc.IScope.TryGetOrAddWithoutClosure(int id, DryIoc.IResolverContext resolveContext, DryIoc.FastExpressionCompiler.LightExpression.Expression expr, System.Func<DryIoc.IResolverContext, DryIoc.FastExpressionCompiler.LightExpression.Expression, object> createValue, int disposalOrder = 0) -> object
~DryIoc.IScope.TryGetUsed(int hash, System.Type type, out object instance) -> bool
~DryIoc.IScopeContext.GetCurrentOrDefault() -> DryIoc.IScope
~DryIoc.IScopeContext.SetCurrent(DryIoc.SetCurrentScopeHandler setCurrentScope) -> DryIoc.IScope
~DryIoc.IScopeName.Match(object scopeName) -> bool
~DryIoc.LazyEnumerable<TService>.GetEnumerator() -> System.Collections.Generic.IEnumerator<TService>
~DryIoc.LazyEnumerable<TService>.LazyEnumerable(System.Collections.Generic.IEnumerable<TService> items) -> void
~DryIoc.Made.FactoryMethodOrSelector.get -> object
~DryIoc.Messages.AsyncMessageHandler<M, R>
~DryIoc.Messages.BroadcastMessageHandler<M>
~DryIoc.Messages.BroadcastMessageHandler<M>.BroadcastMessageHandler(System.Collections.Generic.IEnumerable<DryIoc.Messages.IMessageHandler<M, DryIoc.Messages.EmptyResponse>> handlers) -> void
~DryIoc.Messages.BroadcastMessageHandler<M>.Handle(M message, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<DryIoc.Messages.EmptyResponse>
~DryIoc.Messages.IMessageHandler<M, R>
~DryIoc.Messages.IMessageHandler<M, R>.Handle(M message, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<R>
~DryIoc.Messages.IMessageHandler<M>
~DryIoc.Messages.IMessageMiddleware<M, R>.Handle(M message, System.Threading.CancellationToken cancellationToken, System.Func<System.Threading.Tasks.Task<R>> nextMiddleware) -> System.Threading.Tasks.Task<R>
~DryIoc.Messages.MessageMediator.MessageMediator(DryIoc.IResolver resolver) -> void
~DryIoc.Messages.MessageMediator.Send<M, R>(M message, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<R>
~DryIoc.Messages.MessageMediator.Send<M>(M message, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
~DryIoc.Messages.MiddlewareMessageHandler<M, R>
~DryIoc.Messages.MiddlewareMessageHandler<M, R>.Handle(M message, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<R>
~DryIoc.Messages.MiddlewareMessageHandler<M, R>.MiddlewareMessageHandler(DryIoc.Messages.IMessageHandler<M, R> handler, System.Collections.Generic.IEnumerable<DryIoc.Messages.IMessageMiddleware<M, R>> middlewares) -> void
~DryIoc.OpenGenericTypeKey.OpenGenericTypeKey(System.Type requiredServiceType, object serviceKey) -> void
~DryIoc.OpenGenericTypeKey.ToExpression(System.Func<object, DryIoc.FastExpressionCompiler.LightExpression.Expression> fallbackConverter) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~DryIoc.PropertyOrFieldServiceInfo.PropertyOrFieldServiceInfo(System.Type serviceType) -> void
~DryIoc.ReflectionFactory.ReflectionFactory(System.Type implementationType) -> void
~DryIoc.Request.ChangeServiceKey(object serviceKey) -> void
~DryIoc.Request.Container.get -> DryIoc.IContainer
~DryIoc.Request.CurrentScope.get -> DryIoc.IScope
~DryIoc.Request.DirectParent -> DryIoc.Request
~DryIoc.Request.Equals(DryIoc.Request other) -> bool
~DryIoc.Request.EqualsWithoutParent(DryIoc.Request other) -> bool
~DryIoc.Request.GetActualServiceType() -> System.Type
~DryIoc.Request.GetEnumerator() -> System.Collections.Generic.IEnumerator<DryIoc.Request>
~DryIoc.Request.GetInputArgsExpr() -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~DryIoc.Request.GetKnownImplementationOrServiceType() -> System.Type
~DryIoc.Request.GetServiceDetails() -> DryIoc.ServiceDetails
~DryIoc.Request.ImplementationType.get -> System.Type
~DryIoc.Request.Is<TResult>(System.Func<TResult> root = null, System.Func<System.Reflection.ParameterInfo, TResult> parameter = null, System.Func<System.Reflection.PropertyInfo, TResult> property = null, System.Func<System.Reflection.FieldInfo, TResult> field = null) -> TResult
~DryIoc.Request.Made.get -> DryIoc.Made
~DryIoc.Request.Parent.get -> DryIoc.Request
~DryIoc.Request.Print(int recursiveFactoryID = 0) -> System.Text.StringBuilder
~DryIoc.Request.PrintCurrent(System.Text.StringBuilder s = null) -> System.Text.StringBuilder
~DryIoc.Request.Push(DryIoc.ServiceInfo info, DryIoc.RequestFlags additionalFlags = DryIoc.RequestFlags.Default) -> DryIoc.Request
~DryIoc.Request.Push(System.Reflection.ParameterInfo parameter, DryIoc.RequestFlags additionalFlags = DryIoc.RequestFlags.Default) -> DryIoc.Request
~DryIoc.Request.Push(System.Type serviceType, int factoryID, System.Type implementationType, DryIoc.IReuse reuse) -> DryIoc.Request
~DryIoc.Request.Push(System.Type serviceType, object serviceKey = null, DryIoc.IfUnresolved ifUnresolved = DryIoc.IfUnresolved.Throw, System.Type requiredServiceType = null, DryIoc.RequestFlags flags = DryIoc.RequestFlags.Default) -> DryIoc.Request
~DryIoc.Request.Push(System.Type serviceType, System.Type requiredServiceType, object serviceKey, DryIoc.IfUnresolved ifUnresolved, int factoryID, DryIoc.FactoryType factoryType, System.Type implementationType, DryIoc.IReuse reuse, DryIoc.RequestFlags flags, int decoratedFactoryID) -> DryIoc.Request
~DryIoc.Request.Push(System.Type serviceType, System.Type requiredServiceType, object serviceKey, int factoryID, DryIoc.FactoryType factoryType, System.Type implementationType, DryIoc.IReuse reuse, DryIoc.RequestFlags flags) -> DryIoc.Request
~DryIoc.Request.Push(System.Type serviceType, System.Type requiredServiceType, object serviceKey, string metadataKey, object metadata, DryIoc.IfUnresolved ifUnresolved, int factoryID, DryIoc.FactoryType factoryType, System.Type implementationType, DryIoc.IReuse reuse, DryIoc.RequestFlags flags, int decoratedFactoryID) -> DryIoc.Request
~DryIoc.Request.PushServiceType(System.Type serviceType, DryIoc.RequestFlags additionalFlags = DryIoc.RequestFlags.Default) -> DryIoc.Request
~DryIoc.Request.RequiredServiceType.get -> System.Type
~DryIoc.Request.Reuse.get -> DryIoc.IReuse
~DryIoc.Request.Rules.get -> DryIoc.Rules
~DryIoc.Request.ServiceKey.get -> object
~DryIoc.Request.ServiceType.get -> System.Type
~DryIoc.Request.SingletonScope.get -> DryIoc.IScope
~DryIoc.Request.WithChangedType<S>(S state, System.Func<System.Type, S, System.Type> getInfo) -> DryIoc.Request
~DryIoc.Request.WithFlags(DryIoc.RequestFlags newFlags) -> DryIoc.Request
~DryIoc.Request.WithIfUnresolved(DryIoc.IfUnresolved ifUnresolved) -> DryIoc.Request
~DryIoc.Request.WithInputArgs(DryIoc.FastExpressionCompiler.LightExpression.Expression[] inputArgs) -> DryIoc.Request
~DryIoc.Request.WithResolvedFactory(DryIoc.Factory factory, bool skipRecursiveDependencyCheck = false, bool skipCaptiveDependencyCheck = false, bool copyRequest = false) -> DryIoc.Request
~DryIoc.Request.WithWrappedServiceFactory(DryIoc.Factory f) -> DryIoc.Request
~DryIoc.ResolutionScopeName.Match(object scopeName) -> bool
~DryIoc.Rules.DefaultRegistrationServiceKey.get -> object
~DryIoc.Rules.DefaultReuse.get -> DryIoc.IReuse
~DryIoc.Rules.DependencyResolutionCallExprs.get -> DryIoc.ImTools.Ref<DryIoc.ImTools.ImHashMap<DryIoc.Request, System.Linq.Expressions.Expression>>
~DryIoc.Rules.DynamicRegistrationFlags.get -> DryIoc.DynamicRegistrationFlags[]
~DryIoc.Rules.DynamicRegistrationProviders.get -> DryIoc.Rules.DynamicRegistrationProvider[]
~DryIoc.Rules.FactoryMethodOrSelector.get -> object
~DryIoc.Rules.FactorySelector.get -> DryIoc.Rules.FactorySelectorRule
~DryIoc.Rules.ForExpressionGeneration(bool allowRuntimeState = false) -> DryIoc.Rules
~DryIoc.Rules.ForValidate() -> DryIoc.Rules
~DryIoc.Rules.ItemToExpressionConverter.get -> DryIoc.Rules.ItemToExpressionConverterRule
~DryIoc.Rules.Parameters.get -> DryIoc.ParameterSelector
~DryIoc.Rules.PropertiesAndFields.get -> DryIoc.PropertiesAndFieldsSelector
~DryIoc.Rules.TryGetParameterSelector(DryIoc.Made made) -> DryIoc.ParameterSelector
~DryIoc.Rules.TryGetPropertiesAndFieldsSelector(DryIoc.Made made) -> DryIoc.PropertiesAndFieldsSelector
~DryIoc.Rules.UnknownServiceResolvers.get -> DryIoc.Rules.UnknownServiceResolver[]
~DryIoc.Rules.With(DryIoc.FactoryMethodSelector factoryMethod = null, DryIoc.ParameterSelector parameters = null, DryIoc.PropertiesAndFieldsSelector propertiesAndFields = null) -> DryIoc.Rules
~DryIoc.Rules.With(DryIoc.Made made, bool overrideRegistrationMade = false) -> DryIoc.Rules
~DryIoc.Rules.WithAutoConcreteTypeResolution(System.Func<DryIoc.Request, bool> condition = null) -> DryIoc.Rules
~DryIoc.Rules.WithCaptureContainerDisposeStackTrace() -> DryIoc.Rules
~DryIoc.Rules.WithConcreteTypeDynamicRegistrations(System.Func<System.Type, object, bool> condition = null, DryIoc.IReuse reuse = null) -> DryIoc.Rules
~DryIoc.Rules.WithDefaultIfAlreadyRegistered(DryIoc.IfAlreadyRegistered rule) -> DryIoc.Rules
~DryIoc.Rules.WithDefaultRegistrationServiceKey(object serviceKey) -> DryIoc.Rules
~DryIoc.Rules.WithDefaultReuse(DryIoc.IReuse reuse) -> DryIoc.Rules
~DryIoc.Rules.WithDependencyCountInLambdaToSplitBigObjectGraph(int dependencyCount) -> DryIoc.Rules
~DryIoc.Rules.WithDynamicRegistration(DryIoc.Rules.DynamicRegistrationProvider provider, DryIoc.DynamicRegistrationFlags flags) -> DryIoc.Rules
~DryIoc.Rules.WithDynamicRegistrations(DryIoc.DynamicRegistrationFlags flags, params DryIoc.Rules.DynamicRegistrationProvider[] rules) -> DryIoc.Rules
~DryIoc.Rules.WithDynamicRegistrations(params DryIoc.Rules.DynamicRegistrationProvider[] rules) -> DryIoc.Rules
~DryIoc.Rules.WithDynamicRegistrationsAsFallback(DryIoc.DynamicRegistrationFlags flags, params DryIoc.Rules.DynamicRegistrationProvider[] rules) -> DryIoc.Rules
~DryIoc.Rules.WithDynamicRegistrationsAsFallback(params DryIoc.Rules.DynamicRegistrationProvider[] rules) -> DryIoc.Rules
~DryIoc.Rules.WithExpressionGeneration(bool allowRuntimeState = false) -> DryIoc.Rules
~DryIoc.Rules.WithFactorySelector(DryIoc.Rules.FactorySelectorRule rule) -> DryIoc.Rules
~DryIoc.Rules.WithFuncAndLazyWithoutRegistration() -> DryIoc.Rules
~DryIoc.Rules.WithIgnoringReuseForFuncWithArgs() -> DryIoc.Rules
~DryIoc.Rules.WithItemToExpressionConverter(DryIoc.Rules.ItemToExpressionConverterRule itemToExpressionOrDefault) -> DryIoc.Rules
~DryIoc.Rules.WithMicrosoftDependencyInjectionRules() -> DryIoc.Rules
~DryIoc.Rules.WithoutDependencyCountInLambdaToSplitBigObjectGraph() -> DryIoc.Rules
~DryIoc.Rules.WithoutEagerCachingSingletonForFasterAccess() -> DryIoc.Rules
~DryIoc.Rules.WithoutFuncAndLazyWithoutRegistration() -> DryIoc.Rules
~DryIoc.Rules.WithoutImplicitCheckForReuseMatchingScope() -> DryIoc.Rules
~DryIoc.Rules.WithoutInterpretationForTheFirstResolution() -> DryIoc.Rules
~DryIoc.Rules.WithoutThrowIfDependencyHasShorterReuseLifespan() -> DryIoc.Rules
~DryIoc.Rules.WithoutThrowIfScopedOrSingletonHasTransientDependency() -> DryIoc.Rules
~DryIoc.Rules.WithoutThrowOnRegisteringDisposableTransient() -> DryIoc.Rules
~DryIoc.Rules.WithoutTrackingDisposableTransients() -> DryIoc.Rules
~DryIoc.Rules.WithoutUnknownServiceResolver(DryIoc.Rules.UnknownServiceResolver rule) -> DryIoc.Rules
~DryIoc.Rules.WithoutUseInterpretation() -> DryIoc.Rules
~DryIoc.Rules.WithoutVariantGenericTypesInResolve() -> DryIoc.Rules
~DryIoc.Rules.WithoutVariantGenericTypesInResolvedCollection() -> DryIoc.Rules
~DryIoc.Rules.WithResolveIEnumerableAsLazyEnumerable() -> DryIoc.Rules
~DryIoc.Rules.WithServiceProviderGetServiceShouldThrowIfUnresolved() -> DryIoc.Rules
~DryIoc.Rules.WithThrowIfRuntimeStateRequired() -> DryIoc.Rules
~DryIoc.Rules.WithThrowIfScopedOrSingletonHasTransientDependency() -> DryIoc.Rules
~DryIoc.Rules.WithTrackingDisposableTransients() -> DryIoc.Rules
~DryIoc.Rules.WithUnknownServiceHandler(System.Action<DryIoc.Request> handler) -> DryIoc.Rules
~DryIoc.Rules.WithUnknownServiceResolvers(params DryIoc.Rules.UnknownServiceResolver[] rules) -> DryIoc.Rules
~DryIoc.Rules.WithUseDecorateeReuseForDecorators() -> DryIoc.Rules
~DryIoc.Rules.WithUseInterpretation() -> DryIoc.Rules
~DryIoc.Rules.WithVariantGenericTypesInResolve() -> DryIoc.Rules
~DryIoc.Rules.WithVariantGenericTypesInResolvedCollection() -> DryIoc.Rules
~DryIoc.Scope.GetEnumerator() -> System.Collections.Generic.IEnumerator<DryIoc.IScope>
~DryIoc.Scope.GetOrAddViaFactoryDelegate(int id, DryIoc.FactoryDelegate createValue, DryIoc.IResolverContext r) -> object
~DryIoc.Scope.GetOrAddViaFactoryDelegateWithDisposalOrder(int id, DryIoc.FactoryDelegate createValue, DryIoc.IResolverContext r, int disposalOrder) -> object
~DryIoc.Scope.Scope(DryIoc.ImTools.ImMap<object>[] maps, DryIoc.ImTools.ImHashMap<System.Type, object> used, DryIoc.ImTools.ImMap<DryIoc.ImTools.ImList<System.IDisposable>> disposables) -> void
~DryIoc.Scope.SetOrAdd(int id, object item) -> void
~DryIoc.Scope.SetUsed(int hash, System.Type type, object instance) -> void
~DryIoc.Scope.TrackDisposable<T>(T item, int disposalOrder = 0) -> T
~DryIoc.Scope.TryGet(out object item, int id) -> bool
~DryIoc.Scope.TryGetOrAddWithoutClosure(int id, DryIoc.IResolverContext resolveContext, DryIoc.FastExpressionCompiler.LightExpression.Expression expr, System.Func<DryIoc.IResolverContext, DryIoc.FastExpressionCompiler.LightExpression.Expression, object> createValue, int disposalOrder = 0) -> object
~DryIoc.Scope.TryGetUsed(int hash, System.Type type, out object used) -> bool
~DryIoc.ServiceDetails.CustomValue.get -> object
~DryIoc.ServiceDetails.DefaultValue.get -> object
~DryIoc.ServiceDetails.Equals(DryIoc.ServiceDetails d) -> bool
~DryIoc.ServiceInfo.Typed.Typed(System.Type serviceType) -> void
~DryIoc.ServiceRegistrationInfo.Factory -> DryIoc.Factory
~DryIoc.ServiceRegistrationInfo.ImplementationType.get -> System.Type
~DryIoc.ServiceRegistrationInfo.OptionalServiceKey -> object
~DryIoc.ServiceRegistrationInfo.ServiceRegistrationInfo(DryIoc.Factory factory, System.Type serviceType, object optionalServiceKey) -> void
~DryIoc.ServiceRegistrationInfo.ServiceType -> System.Type
~DryIoc.ServiceRegistrationInfo.ToServiceInfo() -> DryIoc.ServiceInfo
~DryIoc.ServiceRegistrationInfo.ToServiceInfo(System.Type serviceType) -> DryIoc.ServiceInfo
~DryIoc.ServiceRegistrationInfo.ToServiceInfo<TService>() -> DryIoc.ServiceInfo
~DryIoc.Setup.Condition.get -> System.Func<DryIoc.Request, bool>
~DryIoc.Setup.GetMetadataValueMatchedByMetadataType(System.Type metadataType) -> object
~DryIoc.Setup.MatchesMetadata(string metadataKey, object metadata) -> bool
~DryIoc.SingletonReuse.Apply(DryIoc.Request request, DryIoc.FastExpressionCompiler.LightExpression.Expression serviceFactoryExpr) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~DryIoc.SingletonReuse.CanApply(DryIoc.Request request) -> bool
~DryIoc.SingletonReuse.Name.get -> object
~DryIoc.SingletonReuse.ToExpression(System.Func<object, DryIoc.FastExpressionCompiler.LightExpression.Expression> fallbackConverter) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~DryIoc.ThreadScopeContext.GetCurrentOrDefault() -> DryIoc.IScope
~DryIoc.ThreadScopeContext.SetCurrent(DryIoc.SetCurrentScopeHandler setCurrentScope) -> DryIoc.IScope
~override DryIoc.Container.ToString() -> string
~override DryIoc.CurrentScopeReuse.ToString() -> string
~override DryIoc.DefaultDynamicKey.Equals(object key) -> bool
~override DryIoc.DefaultDynamicKey.ToString() -> string
~override DryIoc.DefaultKey.Equals(object key) -> bool
~override DryIoc.DefaultKey.ToString() -> string
~override DryIoc.DelegateFactory.CreateExpressionOrDefault(DryIoc.Request request) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.DelegateFactory.GetDelegateOrDefault(DryIoc.Request request) -> DryIoc.FactoryDelegate
~override DryIoc.DelegateFactory.Setup.get -> DryIoc.Setup
~override DryIoc.ExpressionFactory.CreateExpressionOrDefault(DryIoc.Request request) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.ExpressionFactory.Reuse.get -> DryIoc.IReuse
~override DryIoc.ExpressionFactory.Setup.get -> DryIoc.Setup
~override DryIoc.Factory.ToString() -> string
~override DryIoc.FactoryMethod.ToString() -> string
~override DryIoc.FactoryPlaceholder.CreateExpressionOrDefault(DryIoc.Request request) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FactoryPlaceholder.Reuse.get -> DryIoc.IReuse
~override DryIoc.FactoryPlaceholder.Setup.get -> DryIoc.Setup
~override DryIoc.FastExpressionCompiler.LightExpression.ArrayIndexExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.BlockExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.ConditionalExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression.ToString() -> string
~override DryIoc.FastExpressionCompiler.LightExpression.ConvertUnaryExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.ConvertViaCastClassIntrinsicExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.ConvertViaCastClassIntrinsicExpression<T>.TryCollectBoundConstants(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags config, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, bool isNestedLambda, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo rootClosure) -> bool
~override DryIoc.FastExpressionCompiler.LightExpression.ConvertViaCastClassIntrinsicExpression<T>.TryEmit(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags config, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, System.Reflection.Emit.ILGenerator il, DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags parent, int byRefIndex = -1) -> bool
~override DryIoc.FastExpressionCompiler.LightExpression.ConvertViaCastClassIntrinsicExpression<T>.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.ConvertWithMethodUnaryExpression.Method.get -> System.Reflection.MethodInfo
~override DryIoc.FastExpressionCompiler.LightExpression.DefaultExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.DynamicExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.Expression.ToString() -> string
~override DryIoc.FastExpressionCompiler.LightExpression.FieldExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsMethodCallExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsMethodCallExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsNewExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsNewExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.FiveBindingsMemberInitExpression.Bindings.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.MemberBinding>
~override DryIoc.FastExpressionCompiler.LightExpression.FiveBindingsMemberInitExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~override DryIoc.FastExpressionCompiler.LightExpression.FiveElementNewArrayInitExpression.Expressions.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.FiveElementNewArrayInitExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsMethodCallExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsMethodCallExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsNewExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsNewExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.FourBindingsMemberInitExpression.Bindings.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.MemberBinding>
~override DryIoc.FastExpressionCompiler.LightExpression.FourBindingsMemberInitExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~override DryIoc.FastExpressionCompiler.LightExpression.FourElementNewArrayInitExpression.Expressions.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.FourElementNewArrayInitExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.GotoExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.HasIndexerManyArgumentsIndexExpression.Indexer.get -> System.Reflection.PropertyInfo
~override DryIoc.FastExpressionCompiler.LightExpression.HasIndexerOneArgumentIndexExpression.Indexer.get -> System.Reflection.PropertyInfo
~override DryIoc.FastExpressionCompiler.LightExpression.InstanceFieldExpression.Expression.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.InstanceFiveArgumentsMethodCallExpression.Object.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.InstanceFourArgumentsMethodCallExpression.Object.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.InstanceManyArgumentsMethodCallExpression.Object.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.InstanceMethodCallExpression.Object.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.InstanceOneArgumentMethodCallExpression.Object.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.InstancePropertyExpression.Expression.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.InstanceSevenArgumentsMethodCallExpression.Object.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.InstanceSixArgumentsMethodCallExpression.Object.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.InstanceThreeArgumentsMethodCallExpression.Object.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.InstanceTwoArgumentsMethodCallExpression.Object.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.IntConstantExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.IntConstantExpression.Value.get -> object
~override DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.LabelExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.LabelTarget.ToString() -> string
~override DryIoc.FastExpressionCompiler.LightExpression.ListInitExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.LoopExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.ManyArgumentsElementInit.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.ManyArgumentsElementInit.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.ManyArgumentsNewExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.ManyArgumentsNewExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.ManyBindingsMemberInitExpression.Bindings.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.MemberBinding>
~override DryIoc.FastExpressionCompiler.LightExpression.ManyBindingsMemberInitExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~override DryIoc.FastExpressionCompiler.LightExpression.ManyBoundsNewArrayBoundsExpression.Expressions.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.ManyElementsNewArrayInitExpression.Expressions.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.MemberInitExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.MethodBinaryExpression.Method.get -> System.Reflection.MethodInfo
~override DryIoc.FastExpressionCompiler.LightExpression.MethodBinaryExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.NamedLabelTarget.Name.get -> string
~override DryIoc.FastExpressionCompiler.LightExpression.NewExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.NewValueTypeExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.NoArgsNewClassIntrinsicExpression.TryCollectBoundConstants(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags config, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, bool isNestedLambda, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo rootClosure) -> bool
~override DryIoc.FastExpressionCompiler.LightExpression.NoArgsNewClassIntrinsicExpression.TryEmit(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags setup, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, System.Reflection.Emit.ILGenerator il, DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags parent, int byRefIndex = -1) -> bool
~override DryIoc.FastExpressionCompiler.LightExpression.NoByRefFiveArgumentsNewExpression.TryCollectBoundConstants(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags config, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, bool isNestedLambda, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo rootClosure) -> bool
~override DryIoc.FastExpressionCompiler.LightExpression.NoByRefFiveArgumentsNewExpression.TryEmit(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags setup, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, System.Reflection.Emit.ILGenerator il, DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags parent, int byRefIndex = -1) -> bool
~override DryIoc.FastExpressionCompiler.LightExpression.NoByRefFourArgumentsNewExpression.TryCollectBoundConstants(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags config, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, bool isNestedLambda, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo rootClosure) -> bool
~override DryIoc.FastExpressionCompiler.LightExpression.NoByRefFourArgumentsNewExpression.TryEmit(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags setup, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, System.Reflection.Emit.ILGenerator il, DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags parent, int byRefIndex = -1) -> bool
~override DryIoc.FastExpressionCompiler.LightExpression.NoByRefOneArgumentNewExpression.TryCollectBoundConstants(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags config, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, bool isNestedLambda, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo rootClosure) -> bool
~override DryIoc.FastExpressionCompiler.LightExpression.NoByRefOneArgumentNewExpression.TryEmit(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags setup, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, System.Reflection.Emit.ILGenerator il, DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags parent, int byRefIndex = -1) -> bool
~override DryIoc.FastExpressionCompiler.LightExpression.NoByRefSevenArgumentsNewExpression.TryCollectBoundConstants(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags config, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, bool isNestedLambda, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo rootClosure) -> bool
~override DryIoc.FastExpressionCompiler.LightExpression.NoByRefSevenArgumentsNewExpression.TryEmit(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags setup, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, System.Reflection.Emit.ILGenerator il, DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags parent, int byRefIndex = -1) -> bool
~override DryIoc.FastExpressionCompiler.LightExpression.NoByRefSixArgumentsNewExpression.TryCollectBoundConstants(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags config, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, bool isNestedLambda, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo rootClosure) -> bool
~override DryIoc.FastExpressionCompiler.LightExpression.NoByRefSixArgumentsNewExpression.TryEmit(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags setup, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, System.Reflection.Emit.ILGenerator il, DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags parent, int byRefIndex = -1) -> bool
~override DryIoc.FastExpressionCompiler.LightExpression.NoByRefThreeArgumentsNewExpression.TryCollectBoundConstants(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags config, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, bool isNestedLambda, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo rootClosure) -> bool
~override DryIoc.FastExpressionCompiler.LightExpression.NoByRefThreeArgumentsNewExpression.TryEmit(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags setup, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, System.Reflection.Emit.ILGenerator il, DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags parent, int byRefIndex = -1) -> bool
~override DryIoc.FastExpressionCompiler.LightExpression.NoByRefTwoArgumentsNewExpression.TryCollectBoundConstants(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags config, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, bool isNestedLambda, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo rootClosure) -> bool
~override DryIoc.FastExpressionCompiler.LightExpression.NoByRefTwoArgumentsNewExpression.TryEmit(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags setup, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, System.Reflection.Emit.ILGenerator il, DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags parent, int byRefIndex = -1) -> bool
~override DryIoc.FastExpressionCompiler.LightExpression.NotBooleanUnaryExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.NotNullMethodCallExpression.Method.get -> System.Reflection.MethodInfo
~override DryIoc.FastExpressionCompiler.LightExpression.NullConstantExpression<T>.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.NullConstantExpression<T>.Value.get -> object
~override DryIoc.FastExpressionCompiler.LightExpression.OneArgumentElementInit.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.OneArgumentElementInit.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.OneArgumentIndexExpression.GetArgument(int index) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.OneArgumentMethodCallExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.OneArgumentMethodCallExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.OneArgumentNewExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.OneArgumentNewExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.OneBindingMemberInitExpression.Bindings.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.MemberBinding>
~override DryIoc.FastExpressionCompiler.LightExpression.OneBindingMemberInitExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~override DryIoc.FastExpressionCompiler.LightExpression.OneBoundNewArrayBoundsExpression.Expressions.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.OneBoundNewArrayBoundsExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.OneElementNewArrayInitExpression.Expressions.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.OneElementNewArrayInitExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.OpAssignMethodConversionBinaryExpression.Conversion.get -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~override DryIoc.FastExpressionCompiler.LightExpression.OpAssignMethodConversionBinaryExpression.Method.get -> System.Reflection.MethodInfo
~override DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.PropertyExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsMethodCallExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsMethodCallExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsNewExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsNewExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsMethodCallExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsMethodCallExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsNewExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsNewExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.SixBindingsMemberInitExpression.Bindings.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.MemberBinding>
~override DryIoc.FastExpressionCompiler.LightExpression.SixBindingsMemberInitExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~override DryIoc.FastExpressionCompiler.LightExpression.SixElementNewArrayInitExpression.Expressions.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.SixElementNewArrayInitExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.SwitchCase.Equals(object obj) -> bool
~override DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsMethodCallExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsMethodCallExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsNewExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsNewExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.ThreeBindingsMemberInitExpression.Bindings.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.MemberBinding>
~override DryIoc.FastExpressionCompiler.LightExpression.ThreeBindingsMemberInitExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~override DryIoc.FastExpressionCompiler.LightExpression.ThreeElementNewArrayInitExpression.Expressions.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.ThreeElementNewArrayInitExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.ThrowUnaryExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TryExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TwoArgumentsMethodCallExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.TwoArgumentsMethodCallExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.TwoArgumentsNewExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.TwoArgumentsNewExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.TwoBindingsMemberInitExpression.Bindings.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.MemberBinding>
~override DryIoc.FastExpressionCompiler.LightExpression.TwoBindingsMemberInitExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~override DryIoc.FastExpressionCompiler.LightExpression.TwoElementNewArrayInitExpression.Expressions.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.TwoElementNewArrayInitExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.TypeBinaryExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedBlockExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedConvertUnaryExpression<T>.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedFiveArgumentsInvocationExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedFourArgumentsInvocationExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedGotoExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedInvocationExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedLabelTarget.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedManyArgumentsInvocationExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedManyVariablesBlockExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedNamedLabelTarget.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedNullConstantExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedNullConstantExpression.Value.get -> object
~override DryIoc.FastExpressionCompiler.LightExpression.TypedOneArgumentInvocationExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedParameterExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedParameterExpression<T>.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedReturnExpression<TDelegate>.ReturnType.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedReturnFiveParametersExpression<TDelegate>.ReturnType.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedReturnFiveParametersLambdaExpression.ReturnType.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedReturnFourParametersExpression<TDelegate>.ReturnType.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedReturnFourParametersLambdaExpression.ReturnType.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedReturnLambdaExpression.ReturnType.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedReturnManyParametersExpression<TDelegate>.ReturnType.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedReturnManyParametersLambdaExpression.ReturnType.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedReturnOneParameterExpression<TDelegate>.ReturnType.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedReturnOneParameterLambdaExpression.ReturnType.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedReturnSixParametersExpression<TDelegate>.ReturnType.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedReturnSixParametersLambdaExpression.ReturnType.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedReturnThreeParametersExpression<TDelegate>.ReturnType.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedReturnThreeParametersLambdaExpression.ReturnType.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedReturnTwoParametersExpression<TDelegate>.ReturnType.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedReturnTwoParametersLambdaExpression.ReturnType.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedSixArgumentsInvocationExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedThreeArgumentsInvocationExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedTwoArgumentsInvocationExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedUnaryExpression<T>.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedValueConstantExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedValueConstantExpression.Value.get -> object
~override DryIoc.FastExpressionCompiler.LightExpression.TypedValueGotoExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedWithFalseBranchConditionalExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.ValueConstantExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.ValueConstantExpression.Value.get -> object
~override DryIoc.FastExpressionCompiler.LightExpression.ValueConstantExpression<T>.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.ValueConstantExpression<T>.Value.get -> object
~override DryIoc.FastExpressionCompiler.LightExpression.ValueGotoExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.ValueGotoExpression.Value.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.VoidWithFalseBranchConditionalExpression.IfFalse.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.WithComparisonSwitchExpression.Comparison.get -> System.Reflection.MethodInfo
~override DryIoc.FastExpressionCompiler.LightExpression.WithDefaultValueLabelExpression.DefaultValue.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.WithFalseBranchConditionalExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.WithFinallyTryExpression.Finally.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.ImTools.GrowingList<T>.ToString() -> string
~override DryIoc.ImTools.ImHashMap<K, V>.ToString() -> string
~override DryIoc.ImTools.ImList<T>.ToString() -> string
~override DryIoc.ImTools.ImMap<V>.ToString() -> string
~override DryIoc.ImTools.ImZipper<T>.ToString() -> string
~override DryIoc.ImTools.KV<K, V>.Equals(object obj) -> bool
~override DryIoc.ImTools.KV<K, V>.ToString() -> string
~override DryIoc.InstanceFactory.CreateExpressionOrDefault(DryIoc.Request request) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.InstanceFactory.GetDelegateOrDefault(DryIoc.Request request) -> DryIoc.FactoryDelegate
~override DryIoc.InstanceFactory.GetExpressionOrDefault(DryIoc.Request request) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.InstanceFactory.ImplementationType.get -> System.Type
~override DryIoc.InstanceFactory.Reuse.get -> DryIoc.IReuse
~override DryIoc.InstanceFactory.Setup.get -> DryIoc.Setup
~override DryIoc.Made.ToString() -> string
~override DryIoc.Made.TypedMade<TService>.FactoryMethodKnownResultType.get -> System.Type
~override DryIoc.OpenGenericTypeKey.Equals(object obj) -> bool
~override DryIoc.OpenGenericTypeKey.ToString() -> string
~override DryIoc.ParameterServiceInfo.Create(System.Type serviceType, DryIoc.ServiceDetails details) -> DryIoc.ServiceInfo
~override DryIoc.ParameterServiceInfo.ServiceType.get -> System.Type
~override DryIoc.ParameterServiceInfo.ToString() -> string
~override DryIoc.PropertyOrFieldServiceInfo.Details.get -> DryIoc.ServiceDetails
~override DryIoc.ReflectionFactory.CreateExpressionOrDefault(DryIoc.Request request) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.ReflectionFactory.ImplementationType.get -> System.Type
~override DryIoc.ReflectionFactory.Made.get -> DryIoc.Made
~override DryIoc.Request.Equals(object obj) -> bool
~override DryIoc.Request.ToString() -> string
~override DryIoc.ResolutionScopeName.ToString() -> string
~override DryIoc.Rules.ToString() -> string
~override DryIoc.Scope.ToString() -> string
~override DryIoc.ServiceDetails.ToString() -> string
~override DryIoc.ServiceInfo.ToString() -> string
~override DryIoc.ServiceInfo.Typed.ServiceType.get -> System.Type
~override DryIoc.ServiceInfo.Typed<TService>.ServiceType.get -> System.Type
~override DryIoc.ServiceRegistrationInfo.ToString() -> string
~override DryIoc.SingletonReuse.ToString() -> string
~override DryIoc.WrapperExpressionFactory.CreateExpressionOrDefault(DryIoc.Request request) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.WrapperExpressionFactory.CreateExpressionWithWrappedFactory(DryIoc.Request request, DryIoc.Factory serviceFactory) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.WrapperExpressionFactory.Setup.get -> DryIoc.Setup
~override sealed DryIoc.FastExpressionCompiler.LightExpression.AssignBinaryExpression.Type.get -> System.Type
~override sealed DryIoc.FastExpressionCompiler.LightExpression.DebugInfoExpression.Type.get -> System.Type
~override sealed DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>.Type.get -> System.Type
~override sealed DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsInvocationExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsInvocationExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.FiveParametersExpression<TDelegate>.GetParameter(int i) -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.FiveParametersExpression<TDelegate>.Parameters.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.FiveParametersLambdaExpression.GetParameter(int i) -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.FiveParametersLambdaExpression.Parameters.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsInvocationExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsInvocationExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.FourParametersExpression<TDelegate>.GetParameter(int i) -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.FourParametersExpression<TDelegate>.Parameters.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.FourParametersLambdaExpression.GetParameter(int i) -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.FourParametersLambdaExpression.Parameters.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.IndexExpression.Type.get -> System.Type
~override sealed DryIoc.FastExpressionCompiler.LightExpression.ManyArgumentsIndexExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.ManyArgumentsInvocationExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.ManyArgumentsInvocationExpression.GetArgument(int index) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.ManyArgumentsMethodCallExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.ManyArgumentsMethodCallExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.ManyParametersExpression<TDelegate>.GetParameter(int index) -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.ManyParametersExpression<TDelegate>.Parameters.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.ManyParametersLambdaExpression.GetParameter(int index) -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.ManyParametersLambdaExpression.Parameters.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.ManyVariablesBlockExpression.GetArgument(int index) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.ManyVariablesBlockExpression.Variables.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression.Type.get -> System.Type
~override sealed DryIoc.FastExpressionCompiler.LightExpression.NewArrayExpression.Type.get -> System.Type
~override sealed DryIoc.FastExpressionCompiler.LightExpression.NotNullExpressionInvocationExpression.Expression.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.OneArgumentIndexExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.OneArgumentInvocationExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.OneArgumentInvocationExpression.GetArgument(int index) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.OneParameterExpression<TDelegate>.GetParameter(int index) -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.OneParameterExpression<TDelegate>.Parameters.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.OneParameterLambdaExpression.GetParameter(int index) -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.OneParameterLambdaExpression.Parameters.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.RuntimeVariablesExpression.Type.get -> System.Type
~override sealed DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsInvocationExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsInvocationExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.SixParametersExpression<TDelegate>.GetParameter(int i) -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.SixParametersExpression<TDelegate>.Parameters.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.SixParametersLambdaExpression.GetParameter(int i) -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.SixParametersLambdaExpression.Parameters.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.SwitchExpression.Type.get -> System.Type
~override sealed DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsInvocationExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsInvocationExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.ThreeParametersExpression<TDelegate>.GetParameter(int i) -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.ThreeParametersExpression<TDelegate>.Parameters.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.ThreeParametersLambdaExpression.GetParameter(int i) -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.ThreeParametersLambdaExpression.Parameters.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.TwoArgumentsInvocationExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.TwoArgumentsInvocationExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.TwoParametersExpression<TDelegate>.GetParameter(int i) -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.TwoParametersExpression<TDelegate>.Parameters.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.TwoParametersLambdaExpression.GetParameter(int index) -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.TwoParametersLambdaExpression.Parameters.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.TypedLambdaExpression.Type.get -> System.Type
~override sealed DryIoc.FastExpressionCompiler.LightExpression.TypedUnaryExpression.Type.get -> System.Type
~override sealed DryIoc.ImTools.ImHashMap<K, V>.Entry.AddOrGetEntry(int hash, DryIoc.ImTools.ImHashMap<K, V>.Entry entry) -> DryIoc.ImTools.ImHashMap<K, V>
~override sealed DryIoc.ImTools.ImHashMapEntry<K, V>.GetEntryOrNull(int hash, K key) -> DryIoc.ImTools.ImHashMapEntry<K, V>
~override sealed DryIoc.ImTools.ImHashMapEntry<K, V>.Update(DryIoc.ImTools.ImHashMapEntry<K, V> newEntry) -> DryIoc.ImTools.ImHashMap<K, V>.Entry
~override sealed DryIoc.ImTools.ImHashMapEntry<K, V>.UpdateOrKeep<S>(S state, DryIoc.ImTools.ImHashMapEntry<K, V> newEntry, DryIoc.ImTools.ImHashMap<K, V>.UpdaterOrKeeper<S> updateOrKeep) -> DryIoc.ImTools.ImHashMap<K, V>.Entry
~readonly DryIoc.ContainerException.CollectedExceptions -> DryIoc.ContainerException[]
~readonly DryIoc.ContainerException.Details -> object
~readonly DryIoc.ContainerTools.GeneratedExpressions.Errors -> System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<DryIoc.ServiceInfo, DryIoc.ContainerException>>
~readonly DryIoc.ContainerTools.GeneratedExpressions.ResolveDependencies -> System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<DryIoc.Request, System.Linq.Expressions.Expression>>
~readonly DryIoc.ContainerTools.GeneratedExpressions.Roots -> System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<DryIoc.ServiceInfo, System.Linq.Expressions.Expression<DryIoc.FactoryDelegate>>>
~readonly DryIoc.DynamicRegistration.Factory -> DryIoc.Factory
~readonly DryIoc.DynamicRegistration.ServiceKey -> object
~readonly DryIoc.FactoryMethod.ConstructorOrMethodOrMember -> System.Reflection.MemberInfo
~readonly DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression.Left -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression.Right -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.BlockExpression.Expressions -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~readonly DryIoc.FastExpressionCompiler.LightExpression.CatchBlock.Body -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.CatchBlock.Filter -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.CatchBlock.Test -> System.Type
~readonly DryIoc.FastExpressionCompiler.LightExpression.CatchBlock.Variable -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ConditionalExpression.IfTrue -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ConditionalExpression.Test -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.DebugInfoExpression.Document -> DryIoc.FastExpressionCompiler.LightExpression.SymbolDocumentInfo
~readonly DryIoc.FastExpressionCompiler.LightExpression.ElementInit.AddMethod -> System.Reflection.MethodInfo
~readonly DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ArrayClosure.ConstantsAndNestedLambdas -> object[]
~readonly DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ArrayClosureWithNonPassedParams.NonPassedParams -> object[]
~readonly DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.NestedLambdaInfo.LambdaExpression -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.NestedLambdaWithConstantsAndNestedLambdas.ConstantsAndNestedLambdas -> object
~readonly DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.NestedLambdaWithConstantsAndNestedLambdas.NestedLambda -> object
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsInvocationExpression.Argument0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsInvocationExpression.Argument1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsInvocationExpression.Argument2 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsInvocationExpression.Argument3 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsInvocationExpression.Argument4 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsMethodCallExpression.Argument0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsMethodCallExpression.Argument1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsMethodCallExpression.Argument2 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsMethodCallExpression.Argument3 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsMethodCallExpression.Argument4 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsNewExpression.Argument0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsNewExpression.Argument1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsNewExpression.Argument2 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsNewExpression.Argument3 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsNewExpression.Argument4 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveBindingsMemberInitExpression.Binding0 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveBindingsMemberInitExpression.Binding1 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveBindingsMemberInitExpression.Binding2 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveBindingsMemberInitExpression.Binding3 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveBindingsMemberInitExpression.Binding4 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveElementNewArrayInitExpression.Element0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveElementNewArrayInitExpression.Element1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveElementNewArrayInitExpression.Element2 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveElementNewArrayInitExpression.Element3 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveElementNewArrayInitExpression.Element4 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveParametersExpression<TDelegate>.Parameter0 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveParametersExpression<TDelegate>.Parameter1 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveParametersExpression<TDelegate>.Parameter2 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveParametersExpression<TDelegate>.Parameter3 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveParametersExpression<TDelegate>.Parameter4 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveParametersLambdaExpression.Parameter0 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveParametersLambdaExpression.Parameter1 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveParametersLambdaExpression.Parameter2 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveParametersLambdaExpression.Parameter3 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveParametersLambdaExpression.Parameter4 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsInvocationExpression.Argument0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsInvocationExpression.Argument1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsInvocationExpression.Argument2 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsInvocationExpression.Argument3 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsMethodCallExpression.Argument0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsMethodCallExpression.Argument1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsMethodCallExpression.Argument2 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsMethodCallExpression.Argument3 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsNewExpression.Argument0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsNewExpression.Argument1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsNewExpression.Argument2 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsNewExpression.Argument3 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourBindingsMemberInitExpression.Binding0 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourBindingsMemberInitExpression.Binding1 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourBindingsMemberInitExpression.Binding2 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourBindingsMemberInitExpression.Binding3 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourElementNewArrayInitExpression.Element0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourElementNewArrayInitExpression.Element1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourElementNewArrayInitExpression.Element2 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourElementNewArrayInitExpression.Element3 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourParametersExpression<TDelegate>.Parameter0 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourParametersExpression<TDelegate>.Parameter1 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourParametersExpression<TDelegate>.Parameter2 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourParametersExpression<TDelegate>.Parameter3 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourParametersLambdaExpression.Parameter0 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourParametersLambdaExpression.Parameter1 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourParametersLambdaExpression.Parameter2 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourParametersLambdaExpression.Parameter3 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.GotoExpression.Target -> DryIoc.FastExpressionCompiler.LightExpression.LabelTarget
~readonly DryIoc.FastExpressionCompiler.LightExpression.IndexExpression.Object -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.LabelExpression.Target -> DryIoc.FastExpressionCompiler.LightExpression.LabelTarget
~readonly DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression.Body -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ListInitExpression.Initializers -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ElementInit>
~readonly DryIoc.FastExpressionCompiler.LightExpression.ListInitExpression.NewExpression -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.LoopExpression.Body -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.LoopExpression.BreakLabel -> DryIoc.FastExpressionCompiler.LightExpression.LabelTarget
~readonly DryIoc.FastExpressionCompiler.LightExpression.LoopExpression.ContinueLabel -> DryIoc.FastExpressionCompiler.LightExpression.LabelTarget
~readonly DryIoc.FastExpressionCompiler.LightExpression.MemberAssignment.Expression -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.MemberBinding.Member -> System.Reflection.MemberInfo
~readonly DryIoc.FastExpressionCompiler.LightExpression.MemberExpression.Member -> System.Reflection.MemberInfo
~readonly DryIoc.FastExpressionCompiler.LightExpression.MemberInitExpression.Expression -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.MemberListBinding.Initializers -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ElementInit>
~readonly DryIoc.FastExpressionCompiler.LightExpression.MemberMemberBinding.Bindings -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.MemberBinding>
~readonly DryIoc.FastExpressionCompiler.LightExpression.NewExpression.Constructor -> System.Reflection.ConstructorInfo
~readonly DryIoc.FastExpressionCompiler.LightExpression.OneArgumentElementInit.Argument -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.OneArgumentIndexExpression.Argument -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.OneArgumentInvocationExpression.Argument -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.OneArgumentMethodCallExpression.Argument -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.OneArgumentNewExpression.Argument -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.OneBindingMemberInitExpression.Binding -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.OneBoundNewArrayBoundsExpression.Bound -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.OneElementNewArrayInitExpression.Element -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.OneParameterExpression<TDelegate>.Parameter0 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.OneParameterLambdaExpression.Parameter0 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.RuntimeVariablesExpression.Variables -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression>
~readonly DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsMethodCallExpression.Argument0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsMethodCallExpression.Argument1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsMethodCallExpression.Argument2 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsMethodCallExpression.Argument3 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsMethodCallExpression.Argument4 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsMethodCallExpression.Argument5 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsMethodCallExpression.Argument6 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsNewExpression.Argument0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsNewExpression.Argument1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsNewExpression.Argument2 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsNewExpression.Argument3 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsNewExpression.Argument4 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsNewExpression.Argument5 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsNewExpression.Argument6 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsInvocationExpression.Argument0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsInvocationExpression.Argument1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsInvocationExpression.Argument2 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsInvocationExpression.Argument3 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsInvocationExpression.Argument4 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsInvocationExpression.Argument5 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsMethodCallExpression.Argument0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsMethodCallExpression.Argument1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsMethodCallExpression.Argument2 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsMethodCallExpression.Argument3 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsMethodCallExpression.Argument4 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsMethodCallExpression.Argument5 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsNewExpression.Argument0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsNewExpression.Argument1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsNewExpression.Argument2 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsNewExpression.Argument3 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsNewExpression.Argument4 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsNewExpression.Argument5 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixBindingsMemberInitExpression.Binding0 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixBindingsMemberInitExpression.Binding1 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixBindingsMemberInitExpression.Binding2 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixBindingsMemberInitExpression.Binding3 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixBindingsMemberInitExpression.Binding4 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixBindingsMemberInitExpression.Binding5 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixElementNewArrayInitExpression.Element0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixElementNewArrayInitExpression.Element1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixElementNewArrayInitExpression.Element2 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixElementNewArrayInitExpression.Element3 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixElementNewArrayInitExpression.Element4 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixElementNewArrayInitExpression.Element5 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixParametersExpression<TDelegate>.Parameter0 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixParametersExpression<TDelegate>.Parameter1 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixParametersExpression<TDelegate>.Parameter2 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixParametersExpression<TDelegate>.Parameter3 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixParametersExpression<TDelegate>.Parameter4 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixParametersExpression<TDelegate>.Parameter5 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixParametersLambdaExpression.Parameter0 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixParametersLambdaExpression.Parameter1 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixParametersLambdaExpression.Parameter2 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixParametersLambdaExpression.Parameter3 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixParametersLambdaExpression.Parameter4 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixParametersLambdaExpression.Parameter5 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SwitchCase.Body -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SwitchCase.TestValues -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~readonly DryIoc.FastExpressionCompiler.LightExpression.SwitchExpression.DefaultBody -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SwitchExpression.SwitchValue -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsInvocationExpression.Argument0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsInvocationExpression.Argument1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsInvocationExpression.Argument2 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsMethodCallExpression.Argument0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsMethodCallExpression.Argument1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsMethodCallExpression.Argument2 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsNewExpression.Argument0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsNewExpression.Argument1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsNewExpression.Argument2 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeBindingsMemberInitExpression.Binding0 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeBindingsMemberInitExpression.Binding1 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeBindingsMemberInitExpression.Binding2 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeElementNewArrayInitExpression.Element0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeElementNewArrayInitExpression.Element1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeElementNewArrayInitExpression.Element2 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeParametersExpression<TDelegate>.Parameter0 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeParametersExpression<TDelegate>.Parameter1 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeParametersExpression<TDelegate>.Parameter2 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeParametersLambdaExpression.Parameter0 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeParametersLambdaExpression.Parameter1 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeParametersLambdaExpression.Parameter2 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.TryExpression.Body -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.TwoArgumentsInvocationExpression.Argument0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.TwoArgumentsInvocationExpression.Argument1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.TwoArgumentsMethodCallExpression.Argument0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.TwoArgumentsMethodCallExpression.Argument1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.TwoArgumentsNewExpression.Argument0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.TwoArgumentsNewExpression.Argument1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.TwoBindingsMemberInitExpression.Binding0 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.TwoBindingsMemberInitExpression.Binding1 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.TwoElementNewArrayInitExpression.Element0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.TwoElementNewArrayInitExpression.Element1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.TwoParametersExpression<TDelegate>.Parameter0 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.TwoParametersExpression<TDelegate>.Parameter1 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.TwoParametersLambdaExpression.Parameter0 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.TwoParametersLambdaExpression.Parameter1 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.TypeBinaryExpression.Expression -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression.Operand -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.HiddenDisposable.Value -> object
~readonly DryIoc.ImTools.ImList<T>.Tail -> DryIoc.ImTools.ImList<T>
~readonly DryIoc.ImTools.ImZipper<T>.Left -> DryIoc.ImTools.ImList<T>
~readonly DryIoc.ImTools.ImZipper<T>.Right -> DryIoc.ImTools.ImList<T>
~readonly DryIoc.InstanceFactory.Instance -> object
~readonly DryIoc.Interpreter.ParentLambdaArgs.ParamExprs -> DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider
~readonly DryIoc.Interpreter.ParentLambdaArgs.ParamValues -> object
~readonly DryIoc.Interpreter.ParentLambdaArgs.ParentWithArgs -> DryIoc.Interpreter.ParentLambdaArgs
~readonly DryIoc.LazyEnumerable<TService>.Items -> System.Collections.Generic.IEnumerable<TService>
~readonly DryIoc.OpenGenericTypeKey.RequiredServiceType -> System.Type
~readonly DryIoc.OpenGenericTypeKey.ServiceKey -> object
~readonly DryIoc.ParameterServiceInfo.Parameter -> System.Reflection.ParameterInfo
~readonly DryIoc.ResolutionScopeName.ServiceKey -> object
~readonly DryIoc.ResolutionScopeName.ServiceType -> System.Type
~readonly DryIoc.ServiceDetails.Metadata -> object
~readonly DryIoc.ServiceDetails.MetadataKey -> string
~readonly DryIoc.ServiceDetails.RequiredServiceType -> System.Type
~readonly DryIoc.ServiceDetails.ServiceKey -> object
~static DryIoc.Arg.ArgIndexMethodName -> string
~static DryIoc.Arg.Of<TRequired>(DryIoc.IfUnresolved ifUnresolved, object serviceKey) -> TRequired
~static DryIoc.Arg.Of<TRequired>(object serviceKey) -> TRequired
~static DryIoc.Arg.Of<TRequired>(string metadataKey, object metadata) -> TRequired
~static DryIoc.Arg.Of<TRequired>(TRequired defaultValue, DryIoc.IfUnresolved ifUnresolved, object serviceKey) -> TRequired
~static DryIoc.Arg.Of<TService, TRequired>(DryIoc.IfUnresolved ifUnresolved, object serviceKey) -> TService
~static DryIoc.Arg.Of<TService, TRequired>(object serviceKey) -> TService
~static DryIoc.Arg.Of<TService, TRequired>(string metadataKey, object metadata) -> TService
~static DryIoc.CompositeScopeName.Of(object[] names) -> DryIoc.CompositeScopeName
~static DryIoc.Container.NewSingletonScope() -> DryIoc.IScope
~static DryIoc.Container.ResolveManyResult.Of(DryIoc.FactoryDelegate factoryDelegate, object serviceKey = null, System.Type requiredServiceType = null) -> DryIoc.Container.ResolveManyResult
~static DryIoc.ContainerException.FormatMessage(string errorName, string message) -> string
~static DryIoc.ContainerException.GetMessage(DryIoc.ErrorCheck errorCheck, int errorCode) -> string
~static DryIoc.ContainerException.Of(DryIoc.ErrorCheck errorCheck, int errorCode, object arg0, object arg1 = null, object arg2 = null, object arg3 = null, System.Exception innerException = null) -> DryIoc.ContainerException
~static DryIoc.ContainerException.Print(object arg) -> string
~static DryIoc.ContainerException.WithDetails(object details, int error, object arg0 = null, object arg1 = null, object arg2 = null, object arg3 = null) -> object
~static DryIoc.ContainerTools.ClearCache(this DryIoc.IContainer container, System.Type serviceType, DryIoc.FactoryType? factoryType = null, object serviceKey = null) -> bool
~static DryIoc.ContainerTools.ClearCache<T>(this DryIoc.IContainer container, DryIoc.FactoryType? factoryType = null, object serviceKey = null) -> bool
~static DryIoc.ContainerTools.CreateChild(this DryIoc.IContainer container, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, DryIoc.Rules newRules = null, bool withDisposables = false) -> DryIoc.IContainer
~static DryIoc.ContainerTools.CreateChild(this DryIoc.IContainer container, DryIoc.RegistrySharing registrySharing, object childDefaultServiceKey, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, DryIoc.Rules newRules = null, bool withDisposables = false) -> DryIoc.IContainer
~static DryIoc.ContainerTools.CreateFacade(this DryIoc.IContainer container, string facadeKey = "@facade") -> DryIoc.IContainer
~static DryIoc.ContainerTools.GenerateResolutionExpressions(this DryIoc.IContainer container, params DryIoc.ServiceInfo[] roots) -> DryIoc.ContainerTools.GeneratedExpressions
~static DryIoc.ContainerTools.GenerateResolutionExpressions(this DryIoc.IContainer container, System.Func<DryIoc.ServiceRegistrationInfo, bool> condition) -> DryIoc.ContainerTools.GeneratedExpressions
~static DryIoc.ContainerTools.GenerateResolutionExpressions(this DryIoc.IContainer container, System.Func<System.Collections.Generic.IEnumerable<DryIoc.ServiceRegistrationInfo>, System.Collections.Generic.IEnumerable<DryIoc.ServiceInfo>> getRoots = null, bool allowRuntimeState = false) -> DryIoc.ContainerTools.GeneratedExpressions
~static DryIoc.ContainerTools.GetRequestExpression(this DryIoc.IContainer container, DryIoc.Request request, DryIoc.RequestFlags requestParentFlags = DryIoc.RequestFlags.Default) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~static DryIoc.ContainerTools.InjectPropertiesAndFields<TService>(this DryIoc.IResolverContext r, TService instance) -> TService
~static DryIoc.ContainerTools.InjectPropertiesAndFields<TService>(this DryIoc.IResolverContext r, TService instance, params string[] propertyAndFieldNames) -> TService
~static DryIoc.ContainerTools.New(this DryIoc.IContainer container, System.Type concreteType, DryIoc.Made made = null, DryIoc.RegistrySharing registrySharing = DryIoc.RegistrySharing.CloneButKeepCache) -> object
~static DryIoc.ContainerTools.New(this DryIoc.IContainer container, System.Type concreteType, DryIoc.Setup setup, DryIoc.Made made = null, DryIoc.RegistrySharing registrySharing = DryIoc.RegistrySharing.CloneButKeepCache) -> object
~static DryIoc.ContainerTools.New<T>(this DryIoc.IContainer container, DryIoc.Made made = null, DryIoc.RegistrySharing registrySharing = DryIoc.RegistrySharing.CloneButKeepCache) -> T
~static DryIoc.ContainerTools.New<T>(this DryIoc.IContainer container, DryIoc.Made.TypedMade<T> made, DryIoc.RegistrySharing registrySharing = DryIoc.RegistrySharing.CloneButKeepCache) -> T
~static DryIoc.ContainerTools.Use(this DryIoc.IContainer container, System.Type serviceType, DryIoc.FactoryDelegate factory) -> void
~static DryIoc.ContainerTools.Validate(this DryIoc.IContainer container, params DryIoc.ServiceInfo[] roots) -> System.Collections.Generic.KeyValuePair<DryIoc.ServiceInfo, DryIoc.ContainerException>[]
~static DryIoc.ContainerTools.Validate(this DryIoc.IContainer container, params System.Type[] serviceTypes) -> System.Collections.Generic.KeyValuePair<DryIoc.ServiceInfo, DryIoc.ContainerException>[]
~static DryIoc.ContainerTools.Validate(this DryIoc.IContainer container, System.Func<DryIoc.ServiceRegistrationInfo, bool> condition = null) -> System.Collections.Generic.KeyValuePair<DryIoc.ServiceInfo, DryIoc.ContainerException>[]
~static DryIoc.ContainerTools.ValidateAndThrow(this DryIoc.IContainer container, params DryIoc.ServiceInfo[] roots) -> void
~static DryIoc.ContainerTools.ValidateAndThrow(this DryIoc.IContainer container, params System.Type[] serviceTypes) -> void
~static DryIoc.ContainerTools.ValidateAndThrow(this DryIoc.IContainer container, System.Func<DryIoc.ServiceRegistrationInfo, bool> condition = null) -> void
~static DryIoc.ContainerTools.With(this DryIoc.IContainer container, System.Func<DryIoc.Rules, DryIoc.Rules> configure = null, DryIoc.IScopeContext scopeContext = null) -> DryIoc.IContainer
~static DryIoc.ContainerTools.WithAutoFallbackDynamicRegistrations(this DryIoc.IContainer container, DryIoc.DynamicRegistrationFlags flags, System.Func<System.Type, object, System.Collections.Generic.IEnumerable<System.Reflection.Assembly>> getImplTypeAssemblies, System.Func<System.Type, DryIoc.Factory> factory = null) -> DryIoc.IContainer
~static DryIoc.ContainerTools.WithAutoFallbackDynamicRegistrations(this DryIoc.IContainer container, DryIoc.DynamicRegistrationFlags flags, System.Func<System.Type, object, System.Collections.Generic.IEnumerable<System.Type>> getImplTypes, System.Func<System.Type, DryIoc.Factory> factory = null) -> DryIoc.IContainer
~static DryIoc.ContainerTools.WithAutoFallbackDynamicRegistrations(this DryIoc.IContainer container, DryIoc.IReuse reuse, DryIoc.Setup setup, params System.Type[] implTypes) -> DryIoc.IContainer
~static DryIoc.ContainerTools.WithAutoFallbackDynamicRegistrations(this DryIoc.IContainer container, DryIoc.IReuse reuse, params System.Type[] implTypes) -> DryIoc.IContainer
~static DryIoc.ContainerTools.WithAutoFallbackDynamicRegistrations(this DryIoc.IContainer container, params System.Reflection.Assembly[] implTypeAssemblies) -> DryIoc.IContainer
~static DryIoc.ContainerTools.WithAutoFallbackDynamicRegistrations(this DryIoc.IContainer container, params System.Type[] implTypes) -> DryIoc.IContainer
~static DryIoc.ContainerTools.WithAutoFallbackDynamicRegistrations(this DryIoc.IContainer container, System.Collections.Generic.IEnumerable<System.Reflection.Assembly> implTypeAssemblies) -> DryIoc.IContainer
~static DryIoc.ContainerTools.WithAutoFallbackDynamicRegistrations(this DryIoc.IContainer container, System.Func<System.Type, object, System.Collections.Generic.IEnumerable<System.Reflection.Assembly>> getImplTypeAssemblies, System.Func<System.Type, DryIoc.Factory> factory = null) -> DryIoc.IContainer
~static DryIoc.ContainerTools.WithAutoFallbackDynamicRegistrations(this DryIoc.IContainer container, System.Func<System.Type, object, System.Collections.Generic.IEnumerable<System.Type>> getImplTypes, System.Func<System.Type, DryIoc.Factory> factory = null) -> DryIoc.IContainer
~static DryIoc.ContainerTools.WithAutoFallbackResolution(this DryIoc.IContainer container, System.Collections.Generic.IEnumerable<System.Reflection.Assembly> implTypeAssemblies, System.Func<DryIoc.IReuse, DryIoc.Request, DryIoc.IReuse> changeDefaultReuse = null, System.Func<DryIoc.Request, bool> condition = null) -> DryIoc.IContainer
~static DryIoc.ContainerTools.WithAutoFallbackResolution(this DryIoc.IContainer container, System.Collections.Generic.IEnumerable<System.Type> implTypes, System.Func<DryIoc.IReuse, DryIoc.Request, DryIoc.IReuse> changeDefaultReuse = null, System.Func<DryIoc.Request, bool> condition = null) -> DryIoc.IContainer
~static DryIoc.ContainerTools.WithDependencies(this DryIoc.IContainer container, DryIoc.ParameterSelector parameters = null, DryIoc.PropertiesAndFieldsSelector propertiesAndFields = null) -> DryIoc.IContainer
~static DryIoc.ContainerTools.WithExpressionGeneration(this DryIoc.IContainer container, bool allowRuntimeState = false) -> DryIoc.IContainer
~static DryIoc.ContainerTools.WithFacadeRules(this DryIoc.Rules rules, string facadeKey = "@facade") -> DryIoc.Rules
~static DryIoc.ContainerTools.WithoutCache(this DryIoc.IContainer container) -> DryIoc.IContainer
~static DryIoc.ContainerTools.WithoutSingletonsAndCache(this DryIoc.IContainer container) -> DryIoc.IContainer
~static DryIoc.ContainerTools.WithRegistrationsCopy(this DryIoc.IContainer container, bool preserveCache = false) -> DryIoc.IContainer
~static DryIoc.ContainerTools.WithRegistrationsCopy(this DryIoc.IContainer container, DryIoc.IsRegistryChangePermitted isRegistryChangePermitted, bool preserveCache = false) -> DryIoc.IContainer
~static DryIoc.CurrentScopeReuse.GetNameScopedViaFactoryDelegate(DryIoc.IResolverContext r, object scopeName, bool throwIfNoScope, int id, DryIoc.FactoryDelegate createValue, int disposalOrder) -> object
~static DryIoc.CurrentScopeReuse.GetScopedOrSingletonViaFactoryDelegateWithDisposalOrder(DryIoc.IResolverContext r, int id, DryIoc.FactoryDelegate createValue, int disposalOrder = 0) -> object
~static DryIoc.CurrentScopeReuse.GetScopedViaFactoryDelegate(DryIoc.IResolverContext r, bool throwIfNoScope, int id, DryIoc.FactoryDelegate createValue) -> object
~static DryIoc.CurrentScopeReuse.GetScopedViaFactoryDelegateWithDisposalOrder(DryIoc.IResolverContext r, bool throwIfNoScope, int id, DryIoc.FactoryDelegate createValue, int disposalOrder) -> object
~static DryIoc.CurrentScopeReuse.TrackNameScoped(DryIoc.IResolverContext r, object scopeName, bool throwIfNoScope, object item) -> object
~static DryIoc.CurrentScopeReuse.TrackScoped(DryIoc.IResolverContext r, bool throwIfNoScope, object item) -> object
~static DryIoc.CurrentScopeReuse.TrackScopedOrSingleton(DryIoc.IResolverContext r, object item) -> object
~static DryIoc.DefaultDynamicKey.Of(int registrationOrder) -> DryIoc.DefaultDynamicKey
~static DryIoc.DefaultKey.Of(int registrationOrder) -> DryIoc.DefaultKey
~static DryIoc.DelegateFactory.Of(DryIoc.FactoryDelegate factoryDelegate) -> DryIoc.DelegateFactory
~static DryIoc.DelegateFactory.Of(DryIoc.FactoryDelegate factoryDelegate, DryIoc.IReuse reuse) -> DryIoc.DelegateFactory
~static DryIoc.DelegateFactory.Of(DryIoc.FactoryDelegate factoryDelegate, DryIoc.IReuse reuse, DryIoc.Setup setup) -> DryIoc.DelegateFactory
~static DryIoc.DelegateFactory.Of(DryIoc.FactoryDelegate factoryDelegate, DryIoc.Setup setup) -> DryIoc.DelegateFactory
~static DryIoc.Error.NameOf(int error) -> string
~static DryIoc.FactoryDelegateCompiler.CompileToFactoryDelegate(this DryIoc.FastExpressionCompiler.LightExpression.Expression expression, bool preferInterpretation) -> DryIoc.FactoryDelegate
~static DryIoc.FactoryDelegateCompiler.CompileToFactoryDelegate(this DryIoc.FastExpressionCompiler.LightExpression.Expression expression, System.Type factoryDelegateType, System.Type resultType, bool preferInterpretation) -> object
~static DryIoc.FactoryDelegateCompiler.InvokeMethod -> System.Reflection.MethodInfo
~static DryIoc.FactoryDelegateCompiler.NormalizeExpression(this DryIoc.FastExpressionCompiler.LightExpression.Expression expr) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~static DryIoc.FactoryDelegateCompiler.WrapInFactoryExpression(this DryIoc.FastExpressionCompiler.LightExpression.Expression expression) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<DryIoc.FactoryDelegate>
~static DryIoc.FactoryDelegateCompiler.WrapInFactoryExpressionWithoutNormalization(this DryIoc.FastExpressionCompiler.LightExpression.Expression expression) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<DryIoc.FactoryDelegate>
~static DryIoc.FactoryMethod.Constructor(bool mostResolvable = false, bool includeNonPublic = false) -> DryIoc.FactoryMethodSelector
~static DryIoc.FactoryMethod.DefaultConstructor(bool includeNonPublic = false) -> DryIoc.FactoryMethodSelector
~static DryIoc.FactoryMethod.Of(System.Reflection.MemberInfo ctorOrMethodOrMember, DryIoc.ServiceInfo factoryInfo = null) -> DryIoc.FactoryMethod
~static DryIoc.FactoryMethod.Of(System.Reflection.MemberInfo methodOrMember, object factoryInstance) -> DryIoc.FactoryMethod
~static DryIoc.FactoryMethod.Of<TFactory>(string methodOrMemberName) -> DryIoc.FactoryMethod
~static DryIoc.FastExpressionCompiler.LightExpression.CodePrinter.AppendMethod(this System.Text.StringBuilder sb, System.Reflection.MethodInfo method, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null) -> System.Text.StringBuilder
~static DryIoc.FastExpressionCompiler.LightExpression.CodePrinter.AppendTypeof(this System.Text.StringBuilder sb, System.Type type, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null, bool printGenericTypeArgs = false) -> System.Text.StringBuilder
~static DryIoc.FastExpressionCompiler.LightExpression.CodePrinter.AppendTypeofList(this System.Text.StringBuilder sb, System.Type[] types, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null, bool printGenericTypeArgs = false) -> System.Text.StringBuilder
~static DryIoc.FastExpressionCompiler.LightExpression.CodePrinter.ToArrayInitializerCode(this System.Collections.IEnumerable items, System.Type itemType, DryIoc.FastExpressionCompiler.LightExpression.CodePrinter.IObjectToCode notRecognizedToCode, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null) -> string
~static DryIoc.FastExpressionCompiler.LightExpression.CodePrinter.ToCode(this bool x) -> string
~static DryIoc.FastExpressionCompiler.LightExpression.CodePrinter.ToCode(this object x, DryIoc.FastExpressionCompiler.LightExpression.CodePrinter.IObjectToCode notRecognizedToCode, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null) -> string
~static DryIoc.FastExpressionCompiler.LightExpression.CodePrinter.ToCode(this string x) -> string
~static DryIoc.FastExpressionCompiler.LightExpression.CodePrinter.ToCode(this System.Type type, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null, bool printGenericTypeArgs = false) -> string
~static DryIoc.FastExpressionCompiler.LightExpression.CodePrinter.ToCommaSeparatedCode(this System.Collections.IEnumerable items, DryIoc.FastExpressionCompiler.LightExpression.CodePrinter.IObjectToCode notRecognizedToCode, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null) -> string
~static DryIoc.FastExpressionCompiler.LightExpression.CodePrinter.ToEnumValueCode(this System.Type enumType, object x, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null) -> string
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Add(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Add(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.AddAssign(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.AddAssignChecked(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.AddChecked(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.AddChecked(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.And(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.And(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.AndAlso(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.AndAlso(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.AndAssign(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ArrayAccess(DryIoc.FastExpressionCompiler.LightExpression.Expression array, DryIoc.FastExpressionCompiler.LightExpression.Expression index) -> DryIoc.FastExpressionCompiler.LightExpression.IndexExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ArrayAccess(DryIoc.FastExpressionCompiler.LightExpression.Expression array, params DryIoc.FastExpressionCompiler.LightExpression.Expression[] indexes) -> DryIoc.FastExpressionCompiler.LightExpression.IndexExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ArrayAccess(DryIoc.FastExpressionCompiler.LightExpression.Expression array, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> indexes) -> DryIoc.FastExpressionCompiler.LightExpression.IndexExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ArrayIndex(DryIoc.FastExpressionCompiler.LightExpression.Expression array, DryIoc.FastExpressionCompiler.LightExpression.Expression index) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ArrayIndex(DryIoc.FastExpressionCompiler.LightExpression.Expression array, DryIoc.FastExpressionCompiler.LightExpression.Expression index, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ArrayIndex(DryIoc.FastExpressionCompiler.LightExpression.Expression array, params DryIoc.FastExpressionCompiler.LightExpression.Expression[] indexes) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ArrayIndex(DryIoc.FastExpressionCompiler.LightExpression.Expression array, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> indexes) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ArrayLength(DryIoc.FastExpressionCompiler.LightExpression.Expression array) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Assign(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Bind(System.Reflection.MemberInfo member, DryIoc.FastExpressionCompiler.LightExpression.Expression expression) -> DryIoc.FastExpressionCompiler.LightExpression.MemberAssignment
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Block(DryIoc.FastExpressionCompiler.LightExpression.Expression expr0) -> DryIoc.FastExpressionCompiler.LightExpression.BlockExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Block(DryIoc.FastExpressionCompiler.LightExpression.Expression expr0, DryIoc.FastExpressionCompiler.LightExpression.Expression expr1) -> DryIoc.FastExpressionCompiler.LightExpression.BlockExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Block(DryIoc.FastExpressionCompiler.LightExpression.Expression expr0, DryIoc.FastExpressionCompiler.LightExpression.Expression expr1, DryIoc.FastExpressionCompiler.LightExpression.Expression expr2) -> DryIoc.FastExpressionCompiler.LightExpression.BlockExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Block(params DryIoc.FastExpressionCompiler.LightExpression.Expression[] expressions) -> DryIoc.FastExpressionCompiler.LightExpression.BlockExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Block(System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> expressions) -> DryIoc.FastExpressionCompiler.LightExpression.BlockExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Block(System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> variables, DryIoc.FastExpressionCompiler.LightExpression.Expression expr0) -> DryIoc.FastExpressionCompiler.LightExpression.BlockExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Block(System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> variables, DryIoc.FastExpressionCompiler.LightExpression.Expression expr0, DryIoc.FastExpressionCompiler.LightExpression.Expression expr1) -> DryIoc.FastExpressionCompiler.LightExpression.BlockExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Block(System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> variables, DryIoc.FastExpressionCompiler.LightExpression.Expression expr0, DryIoc.FastExpressionCompiler.LightExpression.Expression expr1, DryIoc.FastExpressionCompiler.LightExpression.Expression expr2) -> DryIoc.FastExpressionCompiler.LightExpression.BlockExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Block(System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> variables, params DryIoc.FastExpressionCompiler.LightExpression.Expression[] expressions) -> DryIoc.FastExpressionCompiler.LightExpression.BlockExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Block(System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> variables, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> expressions) -> DryIoc.FastExpressionCompiler.LightExpression.BlockExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Block(System.Type type, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> variables, DryIoc.FastExpressionCompiler.LightExpression.Expression expr0) -> DryIoc.FastExpressionCompiler.LightExpression.BlockExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Block(System.Type type, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> variables, DryIoc.FastExpressionCompiler.LightExpression.Expression expr0, DryIoc.FastExpressionCompiler.LightExpression.Expression expr1) -> DryIoc.FastExpressionCompiler.LightExpression.BlockExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Block(System.Type type, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> variables, DryIoc.FastExpressionCompiler.LightExpression.Expression expr0, DryIoc.FastExpressionCompiler.LightExpression.Expression expr1, DryIoc.FastExpressionCompiler.LightExpression.Expression expr2) -> DryIoc.FastExpressionCompiler.LightExpression.BlockExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Block(System.Type type, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> variables, params DryIoc.FastExpressionCompiler.LightExpression.Expression[] expressions) -> DryIoc.FastExpressionCompiler.LightExpression.BlockExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Block(System.Type type, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> variables, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> expressions) -> DryIoc.FastExpressionCompiler.LightExpression.BlockExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Break(DryIoc.FastExpressionCompiler.LightExpression.LabelTarget target) -> DryIoc.FastExpressionCompiler.LightExpression.GotoExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Break(DryIoc.FastExpressionCompiler.LightExpression.LabelTarget target, DryIoc.FastExpressionCompiler.LightExpression.Expression value) -> DryIoc.FastExpressionCompiler.LightExpression.GotoExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Break(DryIoc.FastExpressionCompiler.LightExpression.LabelTarget target, DryIoc.FastExpressionCompiler.LightExpression.Expression value, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.GotoExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Break(DryIoc.FastExpressionCompiler.LightExpression.LabelTarget target, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.GotoExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, string methodName, System.Type[] typeArguments, params DryIoc.FastExpressionCompiler.LightExpression.Expression[] arguments) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, string methodName, System.Type[] typeArguments, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> arguments) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.MethodInfo method, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.MethodInfo method, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1, DryIoc.FastExpressionCompiler.LightExpression.Expression arg2) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.MethodInfo method, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1, DryIoc.FastExpressionCompiler.LightExpression.Expression arg2, DryIoc.FastExpressionCompiler.LightExpression.Expression arg3) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.MethodInfo method, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1, DryIoc.FastExpressionCompiler.LightExpression.Expression arg2, DryIoc.FastExpressionCompiler.LightExpression.Expression arg3, DryIoc.FastExpressionCompiler.LightExpression.Expression arg4) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.MethodInfo method, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1, DryIoc.FastExpressionCompiler.LightExpression.Expression arg2, DryIoc.FastExpressionCompiler.LightExpression.Expression arg3, DryIoc.FastExpressionCompiler.LightExpression.Expression arg4, DryIoc.FastExpressionCompiler.LightExpression.Expression arg5) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.MethodInfo method, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1, DryIoc.FastExpressionCompiler.LightExpression.Expression arg2, DryIoc.FastExpressionCompiler.LightExpression.Expression arg3, DryIoc.FastExpressionCompiler.LightExpression.Expression arg4, DryIoc.FastExpressionCompiler.LightExpression.Expression arg5, DryIoc.FastExpressionCompiler.LightExpression.Expression arg6) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.MethodInfo method, DryIoc.FastExpressionCompiler.LightExpression.Expression argument) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.MethodInfo method, params DryIoc.FastExpressionCompiler.LightExpression.Expression[] arguments) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> arguments) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(System.Reflection.MethodInfo method, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(System.Reflection.MethodInfo method, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1, DryIoc.FastExpressionCompiler.LightExpression.Expression arg2) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(System.Reflection.MethodInfo method, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1, DryIoc.FastExpressionCompiler.LightExpression.Expression arg2, DryIoc.FastExpressionCompiler.LightExpression.Expression arg3) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(System.Reflection.MethodInfo method, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1, DryIoc.FastExpressionCompiler.LightExpression.Expression arg2, DryIoc.FastExpressionCompiler.LightExpression.Expression arg3, DryIoc.FastExpressionCompiler.LightExpression.Expression arg4) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(System.Reflection.MethodInfo method, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1, DryIoc.FastExpressionCompiler.LightExpression.Expression arg2, DryIoc.FastExpressionCompiler.LightExpression.Expression arg3, DryIoc.FastExpressionCompiler.LightExpression.Expression arg4, DryIoc.FastExpressionCompiler.LightExpression.Expression arg5) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(System.Reflection.MethodInfo method, DryIoc.FastExpressionCompiler.LightExpression.Expression argument) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(System.Reflection.MethodInfo method, params DryIoc.FastExpressionCompiler.LightExpression.Expression[] arguments) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> arguments) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(System.Type type, string methodName, System.Type[] typeArguments, params DryIoc.FastExpressionCompiler.LightExpression.Expression[] arguments) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(System.Type type, string methodName, System.Type[] typeArguments, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> arguments) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.CallIfNotNull(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.CallIfNotNull(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> arguments) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Catch(DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression variable, DryIoc.FastExpressionCompiler.LightExpression.Expression body) -> DryIoc.FastExpressionCompiler.LightExpression.CatchBlock
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Catch(System.Type test, DryIoc.FastExpressionCompiler.LightExpression.Expression body) -> DryIoc.FastExpressionCompiler.LightExpression.CatchBlock
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Coalesce(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Coalesce(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression conversion) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Coalesce(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Condition(DryIoc.FastExpressionCompiler.LightExpression.Expression test, DryIoc.FastExpressionCompiler.LightExpression.Expression ifTrue, DryIoc.FastExpressionCompiler.LightExpression.Expression ifFalse) -> DryIoc.FastExpressionCompiler.LightExpression.ConditionalExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Condition(DryIoc.FastExpressionCompiler.LightExpression.Expression test, DryIoc.FastExpressionCompiler.LightExpression.Expression ifTrue, DryIoc.FastExpressionCompiler.LightExpression.Expression ifFalse, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.ConditionalExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Constant(bool value) -> DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Constant(object value) -> DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Constant(object value, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ConstantInt(int value) -> DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ConstantNull(System.Type type = null) -> DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ConstantNull<T>() -> DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ConstantOf<T>(T value) -> DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Continue(DryIoc.FastExpressionCompiler.LightExpression.LabelTarget target) -> DryIoc.FastExpressionCompiler.LightExpression.GotoExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Continue(DryIoc.FastExpressionCompiler.LightExpression.LabelTarget target, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.GotoExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Convert(DryIoc.FastExpressionCompiler.LightExpression.Expression expression, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Convert(DryIoc.FastExpressionCompiler.LightExpression.Expression expression, System.Type type, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Convert<T>(DryIoc.FastExpressionCompiler.LightExpression.Expression expression) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ConvertChecked(DryIoc.FastExpressionCompiler.LightExpression.Expression expression, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ConvertChecked(DryIoc.FastExpressionCompiler.LightExpression.Expression expression, System.Type type, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ConvertViaCastClassIntrinsic(DryIoc.FastExpressionCompiler.LightExpression.Expression expression, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ConvertViaCastClassIntrinsic<T>(DryIoc.FastExpressionCompiler.LightExpression.Expression expression) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.DebugInfo(DryIoc.FastExpressionCompiler.LightExpression.SymbolDocumentInfo doc, int startLine, int startColumn, int endLine, int endColumn) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Decrement(DryIoc.FastExpressionCompiler.LightExpression.Expression expression) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Default(System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.DefaultExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Divide(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Divide(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.DivideAssign(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ElementInit(System.Reflection.MethodInfo addMethod, DryIoc.FastExpressionCompiler.LightExpression.Expression arg) -> DryIoc.FastExpressionCompiler.LightExpression.ElementInit
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ElementInit(System.Reflection.MethodInfo addMethod, params DryIoc.FastExpressionCompiler.LightExpression.Expression[] arguments) -> DryIoc.FastExpressionCompiler.LightExpression.ElementInit
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ElementInit(System.Reflection.MethodInfo addMethod, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> arguments) -> DryIoc.FastExpressionCompiler.LightExpression.ElementInit
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Empty() -> DryIoc.FastExpressionCompiler.LightExpression.DefaultExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Equal(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Equal(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, bool liftToNull, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ExclusiveOr(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ExclusiveOr(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ExclusiveOrAssign(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Field(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, string fieldName) -> DryIoc.FastExpressionCompiler.LightExpression.MemberExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Field(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.FieldInfo field) -> DryIoc.FastExpressionCompiler.LightExpression.MemberExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Field(System.Reflection.FieldInfo field) -> DryIoc.FastExpressionCompiler.LightExpression.MemberExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.GetArithmeticBinary(System.Linq.Expressions.ExpressionType nodeType, DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Reflection.MethodInfo method = null) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.GetLeftTypedBinary(System.Linq.Expressions.ExpressionType nodeType, DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Reflection.MethodInfo method = null) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.GetLogicalBinary(System.Linq.Expressions.ExpressionType nodeType, DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, bool liftToNull, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Goto(DryIoc.FastExpressionCompiler.LightExpression.LabelTarget target) -> DryIoc.FastExpressionCompiler.LightExpression.GotoExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Goto(DryIoc.FastExpressionCompiler.LightExpression.LabelTarget target, DryIoc.FastExpressionCompiler.LightExpression.Expression value) -> DryIoc.FastExpressionCompiler.LightExpression.GotoExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Goto(DryIoc.FastExpressionCompiler.LightExpression.LabelTarget target, DryIoc.FastExpressionCompiler.LightExpression.Expression value, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.GotoExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Goto(DryIoc.FastExpressionCompiler.LightExpression.LabelTarget target, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.GotoExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.GreaterThan(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.GreaterThan(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, bool liftToNull, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.GreaterThanOrEqual(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.GreaterThanOrEqual(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, bool liftToNull, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.IfThen(DryIoc.FastExpressionCompiler.LightExpression.Expression test, DryIoc.FastExpressionCompiler.LightExpression.Expression ifTrue) -> DryIoc.FastExpressionCompiler.LightExpression.ConditionalExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.IfThenElse(DryIoc.FastExpressionCompiler.LightExpression.Expression test, DryIoc.FastExpressionCompiler.LightExpression.Expression ifTrue, DryIoc.FastExpressionCompiler.LightExpression.Expression ifFalse) -> DryIoc.FastExpressionCompiler.LightExpression.ConditionalExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Increment(DryIoc.FastExpressionCompiler.LightExpression.Expression expression) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(DryIoc.FastExpressionCompiler.LightExpression.Expression expression, DryIoc.FastExpressionCompiler.LightExpression.Expression a0) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(DryIoc.FastExpressionCompiler.LightExpression.Expression expression, DryIoc.FastExpressionCompiler.LightExpression.Expression a0, DryIoc.FastExpressionCompiler.LightExpression.Expression a1) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(DryIoc.FastExpressionCompiler.LightExpression.Expression expression, DryIoc.FastExpressionCompiler.LightExpression.Expression a0, DryIoc.FastExpressionCompiler.LightExpression.Expression a1, DryIoc.FastExpressionCompiler.LightExpression.Expression a2) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(DryIoc.FastExpressionCompiler.LightExpression.Expression expression, DryIoc.FastExpressionCompiler.LightExpression.Expression a0, DryIoc.FastExpressionCompiler.LightExpression.Expression a1, DryIoc.FastExpressionCompiler.LightExpression.Expression a2, DryIoc.FastExpressionCompiler.LightExpression.Expression a3) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(DryIoc.FastExpressionCompiler.LightExpression.Expression expression, DryIoc.FastExpressionCompiler.LightExpression.Expression a0, DryIoc.FastExpressionCompiler.LightExpression.Expression a1, DryIoc.FastExpressionCompiler.LightExpression.Expression a2, DryIoc.FastExpressionCompiler.LightExpression.Expression a3, DryIoc.FastExpressionCompiler.LightExpression.Expression a4) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(DryIoc.FastExpressionCompiler.LightExpression.Expression expression, DryIoc.FastExpressionCompiler.LightExpression.Expression a0, DryIoc.FastExpressionCompiler.LightExpression.Expression a1, DryIoc.FastExpressionCompiler.LightExpression.Expression a2, DryIoc.FastExpressionCompiler.LightExpression.Expression a3, DryIoc.FastExpressionCompiler.LightExpression.Expression a4, DryIoc.FastExpressionCompiler.LightExpression.Expression a5) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(DryIoc.FastExpressionCompiler.LightExpression.Expression expression, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> args) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(DryIoc.FastExpressionCompiler.LightExpression.Expression lambda, params DryIoc.FastExpressionCompiler.LightExpression.Expression[] args) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression expression) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression expression, DryIoc.FastExpressionCompiler.LightExpression.Expression a0) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression expression, DryIoc.FastExpressionCompiler.LightExpression.Expression a0, DryIoc.FastExpressionCompiler.LightExpression.Expression a1) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression expression, DryIoc.FastExpressionCompiler.LightExpression.Expression a0, DryIoc.FastExpressionCompiler.LightExpression.Expression a1, DryIoc.FastExpressionCompiler.LightExpression.Expression a2) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression expression, DryIoc.FastExpressionCompiler.LightExpression.Expression a0, DryIoc.FastExpressionCompiler.LightExpression.Expression a1, DryIoc.FastExpressionCompiler.LightExpression.Expression a2, DryIoc.FastExpressionCompiler.LightExpression.Expression a3) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression expression, DryIoc.FastExpressionCompiler.LightExpression.Expression a0, DryIoc.FastExpressionCompiler.LightExpression.Expression a1, DryIoc.FastExpressionCompiler.LightExpression.Expression a2, DryIoc.FastExpressionCompiler.LightExpression.Expression a3, DryIoc.FastExpressionCompiler.LightExpression.Expression a4) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression expression, DryIoc.FastExpressionCompiler.LightExpression.Expression a0, DryIoc.FastExpressionCompiler.LightExpression.Expression a1, DryIoc.FastExpressionCompiler.LightExpression.Expression a2, DryIoc.FastExpressionCompiler.LightExpression.Expression a3, DryIoc.FastExpressionCompiler.LightExpression.Expression a4, DryIoc.FastExpressionCompiler.LightExpression.Expression a5) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(System.Type returnType, DryIoc.FastExpressionCompiler.LightExpression.Expression expression, DryIoc.FastExpressionCompiler.LightExpression.Expression a0) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(System.Type returnType, DryIoc.FastExpressionCompiler.LightExpression.Expression expression, DryIoc.FastExpressionCompiler.LightExpression.Expression a0, DryIoc.FastExpressionCompiler.LightExpression.Expression a1) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(System.Type returnType, DryIoc.FastExpressionCompiler.LightExpression.Expression expression, DryIoc.FastExpressionCompiler.LightExpression.Expression a0, DryIoc.FastExpressionCompiler.LightExpression.Expression a1, DryIoc.FastExpressionCompiler.LightExpression.Expression a2) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(System.Type returnType, DryIoc.FastExpressionCompiler.LightExpression.Expression expression, DryIoc.FastExpressionCompiler.LightExpression.Expression a0, DryIoc.FastExpressionCompiler.LightExpression.Expression a1, DryIoc.FastExpressionCompiler.LightExpression.Expression a2, DryIoc.FastExpressionCompiler.LightExpression.Expression a3) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(System.Type returnType, DryIoc.FastExpressionCompiler.LightExpression.Expression expression, DryIoc.FastExpressionCompiler.LightExpression.Expression a0, DryIoc.FastExpressionCompiler.LightExpression.Expression a1, DryIoc.FastExpressionCompiler.LightExpression.Expression a2, DryIoc.FastExpressionCompiler.LightExpression.Expression a3, DryIoc.FastExpressionCompiler.LightExpression.Expression a4) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(System.Type returnType, DryIoc.FastExpressionCompiler.LightExpression.Expression expression, DryIoc.FastExpressionCompiler.LightExpression.Expression a0, DryIoc.FastExpressionCompiler.LightExpression.Expression a1, DryIoc.FastExpressionCompiler.LightExpression.Expression a2, DryIoc.FastExpressionCompiler.LightExpression.Expression a3, DryIoc.FastExpressionCompiler.LightExpression.Expression a4, DryIoc.FastExpressionCompiler.LightExpression.Expression a5) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(System.Type returnType, DryIoc.FastExpressionCompiler.LightExpression.Expression expression, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> args) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.IsFalse(DryIoc.FastExpressionCompiler.LightExpression.Expression expression) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.IsTrue(DryIoc.FastExpressionCompiler.LightExpression.Expression expression) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Label() -> DryIoc.FastExpressionCompiler.LightExpression.LabelTarget
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Label(DryIoc.FastExpressionCompiler.LightExpression.LabelTarget target) -> DryIoc.FastExpressionCompiler.LightExpression.LabelExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Label(DryIoc.FastExpressionCompiler.LightExpression.LabelTarget target, DryIoc.FastExpressionCompiler.LightExpression.Expression defaultValue) -> DryIoc.FastExpressionCompiler.LightExpression.LabelExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Label(string name) -> DryIoc.FastExpressionCompiler.LightExpression.LabelTarget
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Label(System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.LabelTarget
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Label(System.Type type, string name) -> DryIoc.FastExpressionCompiler.LightExpression.LabelTarget
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(DryIoc.FastExpressionCompiler.LightExpression.Expression body) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p2) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p2, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p3) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p2, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p3, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p4) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p2, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p3, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p4, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p5) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression parameter) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(DryIoc.FastExpressionCompiler.LightExpression.Expression body, params DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression[] parameters) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(DryIoc.FastExpressionCompiler.LightExpression.Expression body, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> parameters, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(DryIoc.FastExpressionCompiler.LightExpression.Expression body, System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> parameters) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(DryIoc.FastExpressionCompiler.LightExpression.Expression body, System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> parameters, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(System.Type delegateType, DryIoc.FastExpressionCompiler.LightExpression.Expression body) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(System.Type delegateType, DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p2, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p3, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p4, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p5, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(System.Type delegateType, DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p2, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p3, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p4, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(System.Type delegateType, DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p2, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p3, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(System.Type delegateType, DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p2, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(System.Type delegateType, DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(System.Type delegateType, DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(System.Type delegateType, DryIoc.FastExpressionCompiler.LightExpression.Expression body, params DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression[] parameters) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(System.Type delegateType, DryIoc.FastExpressionCompiler.LightExpression.Expression body, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> parameters, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(System.Type delegateType, DryIoc.FastExpressionCompiler.LightExpression.Expression body, System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> parameters) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(System.Type delegateType, DryIoc.FastExpressionCompiler.LightExpression.Expression body, System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> parameters, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(System.Type delegateType, DryIoc.FastExpressionCompiler.LightExpression.Expression body, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(DryIoc.FastExpressionCompiler.LightExpression.Expression body) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p2) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p2, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p3) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p2, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p3, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p4) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p2, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p3, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p4, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p5) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p2, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p3, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p4, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p5, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p2, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p3, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p4, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p2, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p3, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p2, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(DryIoc.FastExpressionCompiler.LightExpression.Expression body, params DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression[] parameters) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(DryIoc.FastExpressionCompiler.LightExpression.Expression body, string name, params DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression[] parameters) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(DryIoc.FastExpressionCompiler.LightExpression.Expression body, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> parameters) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(DryIoc.FastExpressionCompiler.LightExpression.Expression body, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> parameters, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(DryIoc.FastExpressionCompiler.LightExpression.Expression body, System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> parameters, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(DryIoc.FastExpressionCompiler.LightExpression.Expression body, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.LeftShift(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.LeftShift(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.LeftShiftAssign(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.LessThan(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.LessThan(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, bool liftToNull, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.LessThanOrEqual(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.LessThanOrEqual(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, bool liftToNull, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ListBind(System.Reflection.MemberInfo member, params DryIoc.FastExpressionCompiler.LightExpression.ElementInit[] initializers) -> DryIoc.FastExpressionCompiler.LightExpression.MemberListBinding
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ListBind(System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.ElementInit> initializers) -> DryIoc.FastExpressionCompiler.LightExpression.MemberListBinding
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ListInit(DryIoc.FastExpressionCompiler.LightExpression.NewExpression newExpression, params DryIoc.FastExpressionCompiler.LightExpression.ElementInit[] initializers) -> DryIoc.FastExpressionCompiler.LightExpression.ListInitExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ListInit(DryIoc.FastExpressionCompiler.LightExpression.NewExpression newExpression, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.ElementInit> initializers) -> DryIoc.FastExpressionCompiler.LightExpression.ListInitExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Loop(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.LabelTarget break = null) -> DryIoc.FastExpressionCompiler.LightExpression.LoopExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Loop(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.LabelTarget break, DryIoc.FastExpressionCompiler.LightExpression.LabelTarget continue) -> DryIoc.FastExpressionCompiler.LightExpression.LoopExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MakeArrayBounds(System.Type type, System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression> bounds) -> DryIoc.FastExpressionCompiler.LightExpression.NewArrayExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MakeBinary(System.Linq.Expressions.ExpressionType binaryType, DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, bool liftToNull, System.Reflection.MethodInfo method, DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression conversion = null) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MakeBinary(System.Linq.Expressions.ExpressionType binaryType, DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression conversion = null) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MakeBlock(System.Type type, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> variables, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> expressions) -> DryIoc.FastExpressionCompiler.LightExpression.BlockExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MakeCatchBlock(System.Type test, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression variable, DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.Expression filter) -> DryIoc.FastExpressionCompiler.LightExpression.CatchBlock
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind kind, DryIoc.FastExpressionCompiler.LightExpression.LabelTarget target, DryIoc.FastExpressionCompiler.LightExpression.Expression value, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.GotoExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MakeIndex(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.PropertyInfo indexer, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> arguments) -> DryIoc.FastExpressionCompiler.LightExpression.IndexExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MakeMemberAccess(DryIoc.FastExpressionCompiler.LightExpression.Expression expression, System.Reflection.MemberInfo member) -> DryIoc.FastExpressionCompiler.LightExpression.MemberExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MakeUnary(System.Linq.Expressions.ExpressionType unaryType, DryIoc.FastExpressionCompiler.LightExpression.Expression operand, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MemberBind(System.Reflection.MemberInfo member, params DryIoc.FastExpressionCompiler.LightExpression.MemberBinding[] bindings) -> DryIoc.FastExpressionCompiler.LightExpression.MemberMemberBinding
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MemberBind(System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.MemberBinding> bindings) -> DryIoc.FastExpressionCompiler.LightExpression.MemberMemberBinding
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MemberInit(DryIoc.FastExpressionCompiler.LightExpression.Expression expression, params DryIoc.FastExpressionCompiler.LightExpression.MemberBinding[] bindings) -> DryIoc.FastExpressionCompiler.LightExpression.MemberInitExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MemberInit(DryIoc.FastExpressionCompiler.LightExpression.Expression expression, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.MemberBinding> assignments) -> DryIoc.FastExpressionCompiler.LightExpression.MemberInitExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MemberInit(DryIoc.FastExpressionCompiler.LightExpression.NewExpression newExpr) -> DryIoc.FastExpressionCompiler.LightExpression.MemberInitExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MemberInit(DryIoc.FastExpressionCompiler.LightExpression.NewExpression newExpr, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b0, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b1) -> DryIoc.FastExpressionCompiler.LightExpression.MemberInitExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MemberInit(DryIoc.FastExpressionCompiler.LightExpression.NewExpression newExpr, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b0, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b1, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b2) -> DryIoc.FastExpressionCompiler.LightExpression.MemberInitExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MemberInit(DryIoc.FastExpressionCompiler.LightExpression.NewExpression newExpr, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b0, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b1, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b2, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b3) -> DryIoc.FastExpressionCompiler.LightExpression.MemberInitExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MemberInit(DryIoc.FastExpressionCompiler.LightExpression.NewExpression newExpr, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b0, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b1, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b2, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b3, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b4) -> DryIoc.FastExpressionCompiler.LightExpression.MemberInitExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MemberInit(DryIoc.FastExpressionCompiler.LightExpression.NewExpression newExpr, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b0, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b1, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b2, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b3, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b4, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b5) -> DryIoc.FastExpressionCompiler.LightExpression.MemberInitExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MemberInit(DryIoc.FastExpressionCompiler.LightExpression.NewExpression newExpr, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding binding) -> DryIoc.FastExpressionCompiler.LightExpression.MemberInitExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MemberInit(DryIoc.FastExpressionCompiler.LightExpression.NewExpression newExpr, params DryIoc.FastExpressionCompiler.LightExpression.MemberBinding[] bindings) -> DryIoc.FastExpressionCompiler.LightExpression.MemberInitExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MemberInit(DryIoc.FastExpressionCompiler.LightExpression.NewExpression newExpr, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.MemberBinding> bindings) -> DryIoc.FastExpressionCompiler.LightExpression.MemberInitExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Modulo(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Modulo(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ModuloAssign(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Multiply(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Multiply(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MultiplyAssign(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MultiplyAssignChecked(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MultiplyChecked(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MultiplyChecked(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Negate(DryIoc.FastExpressionCompiler.LightExpression.Expression expression) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NegateChecked(DryIoc.FastExpressionCompiler.LightExpression.Expression expression) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.New(System.Reflection.ConstructorInfo ctor) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.New(System.Reflection.ConstructorInfo ctor, DryIoc.FastExpressionCompiler.LightExpression.Expression arg) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.New(System.Reflection.ConstructorInfo ctor, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.New(System.Reflection.ConstructorInfo ctor, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1, DryIoc.FastExpressionCompiler.LightExpression.Expression arg2) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.New(System.Reflection.ConstructorInfo ctor, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1, DryIoc.FastExpressionCompiler.LightExpression.Expression arg2, DryIoc.FastExpressionCompiler.LightExpression.Expression arg3) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.New(System.Reflection.ConstructorInfo ctor, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1, DryIoc.FastExpressionCompiler.LightExpression.Expression arg2, DryIoc.FastExpressionCompiler.LightExpression.Expression arg3, DryIoc.FastExpressionCompiler.LightExpression.Expression arg4) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.New(System.Reflection.ConstructorInfo ctor, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1, DryIoc.FastExpressionCompiler.LightExpression.Expression arg2, DryIoc.FastExpressionCompiler.LightExpression.Expression arg3, DryIoc.FastExpressionCompiler.LightExpression.Expression arg4, DryIoc.FastExpressionCompiler.LightExpression.Expression arg5) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.New(System.Reflection.ConstructorInfo ctor, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1, DryIoc.FastExpressionCompiler.LightExpression.Expression arg2, DryIoc.FastExpressionCompiler.LightExpression.Expression arg3, DryIoc.FastExpressionCompiler.LightExpression.Expression arg4, DryIoc.FastExpressionCompiler.LightExpression.Expression arg5, DryIoc.FastExpressionCompiler.LightExpression.Expression arg6) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.New(System.Reflection.ConstructorInfo ctor, params DryIoc.FastExpressionCompiler.LightExpression.Expression[] arguments) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.New(System.Reflection.ConstructorInfo ctor, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> arguments) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.New(System.Reflection.ConstructorInfo ctor, System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression> arguments) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.New(System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NewArrayBounds(System.Type type, DryIoc.FastExpressionCompiler.LightExpression.Expression bound) -> DryIoc.FastExpressionCompiler.LightExpression.NewArrayExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NewArrayBounds(System.Type type, params DryIoc.FastExpressionCompiler.LightExpression.Expression[] bounds) -> DryIoc.FastExpressionCompiler.LightExpression.NewArrayExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NewArrayBounds(System.Type type, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> bounds) -> DryIoc.FastExpressionCompiler.LightExpression.NewArrayExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NewArrayInit(System.Type type, DryIoc.FastExpressionCompiler.LightExpression.Expression el0, DryIoc.FastExpressionCompiler.LightExpression.Expression el1) -> DryIoc.FastExpressionCompiler.LightExpression.NewArrayExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NewArrayInit(System.Type type, DryIoc.FastExpressionCompiler.LightExpression.Expression el0, DryIoc.FastExpressionCompiler.LightExpression.Expression el1, DryIoc.FastExpressionCompiler.LightExpression.Expression el2) -> DryIoc.FastExpressionCompiler.LightExpression.NewArrayExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NewArrayInit(System.Type type, DryIoc.FastExpressionCompiler.LightExpression.Expression el0, DryIoc.FastExpressionCompiler.LightExpression.Expression el1, DryIoc.FastExpressionCompiler.LightExpression.Expression el2, DryIoc.FastExpressionCompiler.LightExpression.Expression el3) -> DryIoc.FastExpressionCompiler.LightExpression.NewArrayExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NewArrayInit(System.Type type, DryIoc.FastExpressionCompiler.LightExpression.Expression el0, DryIoc.FastExpressionCompiler.LightExpression.Expression el1, DryIoc.FastExpressionCompiler.LightExpression.Expression el2, DryIoc.FastExpressionCompiler.LightExpression.Expression el3, DryIoc.FastExpressionCompiler.LightExpression.Expression el4) -> DryIoc.FastExpressionCompiler.LightExpression.NewArrayExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NewArrayInit(System.Type type, DryIoc.FastExpressionCompiler.LightExpression.Expression el0, DryIoc.FastExpressionCompiler.LightExpression.Expression el1, DryIoc.FastExpressionCompiler.LightExpression.Expression el2, DryIoc.FastExpressionCompiler.LightExpression.Expression el3, DryIoc.FastExpressionCompiler.LightExpression.Expression el4, DryIoc.FastExpressionCompiler.LightExpression.Expression el5) -> DryIoc.FastExpressionCompiler.LightExpression.NewArrayExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NewArrayInit(System.Type type, DryIoc.FastExpressionCompiler.LightExpression.Expression element) -> DryIoc.FastExpressionCompiler.LightExpression.NewArrayExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NewArrayInit(System.Type type, params DryIoc.FastExpressionCompiler.LightExpression.Expression[] initializers) -> DryIoc.FastExpressionCompiler.LightExpression.NewArrayExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NewArrayInit(System.Type type, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> initializers) -> DryIoc.FastExpressionCompiler.LightExpression.NewArrayExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NewNoByRefArgs(System.Reflection.ConstructorInfo ctor, DryIoc.FastExpressionCompiler.LightExpression.Expression arg) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NewNoByRefArgs(System.Reflection.ConstructorInfo ctor, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NewNoByRefArgs(System.Reflection.ConstructorInfo ctor, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1, DryIoc.FastExpressionCompiler.LightExpression.Expression arg2) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NewNoByRefArgs(System.Reflection.ConstructorInfo ctor, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1, DryIoc.FastExpressionCompiler.LightExpression.Expression arg2, DryIoc.FastExpressionCompiler.LightExpression.Expression arg3) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NewNoByRefArgs(System.Reflection.ConstructorInfo ctor, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1, DryIoc.FastExpressionCompiler.LightExpression.Expression arg2, DryIoc.FastExpressionCompiler.LightExpression.Expression arg3, DryIoc.FastExpressionCompiler.LightExpression.Expression arg4) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NewNoByRefArgs(System.Reflection.ConstructorInfo ctor, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1, DryIoc.FastExpressionCompiler.LightExpression.Expression arg2, DryIoc.FastExpressionCompiler.LightExpression.Expression arg3, DryIoc.FastExpressionCompiler.LightExpression.Expression arg4, DryIoc.FastExpressionCompiler.LightExpression.Expression arg5) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NewNoByRefArgs(System.Reflection.ConstructorInfo ctor, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1, DryIoc.FastExpressionCompiler.LightExpression.Expression arg2, DryIoc.FastExpressionCompiler.LightExpression.Expression arg3, DryIoc.FastExpressionCompiler.LightExpression.Expression arg4, DryIoc.FastExpressionCompiler.LightExpression.Expression arg5, DryIoc.FastExpressionCompiler.LightExpression.Expression arg6) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NewNoByRefArgs(System.Reflection.ConstructorInfo ctor, System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression> arguments) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Not(DryIoc.FastExpressionCompiler.LightExpression.Expression expression) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NotEqual(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NotEqual(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, bool liftToNull, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.OnesComplement(DryIoc.FastExpressionCompiler.LightExpression.Expression expression) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Or(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Or(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.OrAssign(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.OrElse(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.OrElse(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Parameter(System.Type type, string name = null) -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ParameterOf<T>(string name = null) -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.PostDecrementAssign(DryIoc.FastExpressionCompiler.LightExpression.Expression expression) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.PostIncrementAssign(DryIoc.FastExpressionCompiler.LightExpression.Expression expression) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Power(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Power(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.PowerAssign(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.PreDecrementAssign(DryIoc.FastExpressionCompiler.LightExpression.Expression expression) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.PreIncrementAssign(DryIoc.FastExpressionCompiler.LightExpression.Expression expression) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Property(DryIoc.FastExpressionCompiler.LightExpression.Expression expression, string propertyName) -> DryIoc.FastExpressionCompiler.LightExpression.MemberExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Property(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.PropertyInfo indexer, DryIoc.FastExpressionCompiler.LightExpression.Expression argument) -> DryIoc.FastExpressionCompiler.LightExpression.IndexExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Property(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.PropertyInfo indexer, params DryIoc.FastExpressionCompiler.LightExpression.Expression[] arguments) -> DryIoc.FastExpressionCompiler.LightExpression.IndexExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Property(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.PropertyInfo indexer, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> arguments) -> DryIoc.FastExpressionCompiler.LightExpression.IndexExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Property(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.PropertyInfo property) -> DryIoc.FastExpressionCompiler.LightExpression.MemberExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Property(System.Reflection.PropertyInfo property) -> DryIoc.FastExpressionCompiler.LightExpression.MemberExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.PropertyOrField(DryIoc.FastExpressionCompiler.LightExpression.Expression expression, string memberName) -> DryIoc.FastExpressionCompiler.LightExpression.MemberExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Quote(DryIoc.FastExpressionCompiler.LightExpression.Expression expression) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ReferenceEqual(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ReferenceNotEqual(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Return(DryIoc.FastExpressionCompiler.LightExpression.LabelTarget target) -> DryIoc.FastExpressionCompiler.LightExpression.GotoExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Return(DryIoc.FastExpressionCompiler.LightExpression.LabelTarget target, DryIoc.FastExpressionCompiler.LightExpression.Expression value) -> DryIoc.FastExpressionCompiler.LightExpression.GotoExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Return(DryIoc.FastExpressionCompiler.LightExpression.LabelTarget target, DryIoc.FastExpressionCompiler.LightExpression.Expression value, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.GotoExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Return(DryIoc.FastExpressionCompiler.LightExpression.LabelTarget target, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.GotoExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.RightShift(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.RightShift(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.RightShiftAssign(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Subtract(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Subtract(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.SubtractAssign(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.SubtractAssignChecked(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.SubtractChecked(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.SubtractChecked(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Switch(DryIoc.FastExpressionCompiler.LightExpression.Expression switchValue, DryIoc.FastExpressionCompiler.LightExpression.Expression defaultBody, params DryIoc.FastExpressionCompiler.LightExpression.SwitchCase[] cases) -> DryIoc.FastExpressionCompiler.LightExpression.SwitchExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Switch(DryIoc.FastExpressionCompiler.LightExpression.Expression switchValue, DryIoc.FastExpressionCompiler.LightExpression.Expression defaultBody, System.Reflection.MethodInfo comparison, params DryIoc.FastExpressionCompiler.LightExpression.SwitchCase[] cases) -> DryIoc.FastExpressionCompiler.LightExpression.SwitchExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Switch(DryIoc.FastExpressionCompiler.LightExpression.Expression switchValue, params DryIoc.FastExpressionCompiler.LightExpression.SwitchCase[] cases) -> DryIoc.FastExpressionCompiler.LightExpression.SwitchExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Switch(System.Type type, DryIoc.FastExpressionCompiler.LightExpression.Expression switchValue, DryIoc.FastExpressionCompiler.LightExpression.Expression defaultBody, System.Reflection.MethodInfo comparison, params DryIoc.FastExpressionCompiler.LightExpression.SwitchCase[] cases) -> DryIoc.FastExpressionCompiler.LightExpression.SwitchExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Switch(System.Type type, DryIoc.FastExpressionCompiler.LightExpression.Expression switchValue, DryIoc.FastExpressionCompiler.LightExpression.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.SwitchCase> cases) -> DryIoc.FastExpressionCompiler.LightExpression.SwitchExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.SwitchCase(DryIoc.FastExpressionCompiler.LightExpression.Expression body, params DryIoc.FastExpressionCompiler.LightExpression.Expression[] testValues) -> DryIoc.FastExpressionCompiler.LightExpression.SwitchCase
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.SwitchCase(DryIoc.FastExpressionCompiler.LightExpression.Expression body, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> testValues) -> DryIoc.FastExpressionCompiler.LightExpression.SwitchCase
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.SymbolDocument(string fileName) -> DryIoc.FastExpressionCompiler.LightExpression.SymbolDocumentInfo
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Throw(DryIoc.FastExpressionCompiler.LightExpression.Expression value) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Throw(DryIoc.FastExpressionCompiler.LightExpression.Expression value, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.TryCatch(DryIoc.FastExpressionCompiler.LightExpression.Expression body, params DryIoc.FastExpressionCompiler.LightExpression.CatchBlock[] handlers) -> DryIoc.FastExpressionCompiler.LightExpression.TryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.TryCatchFinally(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.Expression finally, params DryIoc.FastExpressionCompiler.LightExpression.CatchBlock[] handlers) -> DryIoc.FastExpressionCompiler.LightExpression.TryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.TryFinally(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.Expression finally) -> DryIoc.FastExpressionCompiler.LightExpression.TryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.TryGetIntConstantValue(DryIoc.FastExpressionCompiler.LightExpression.Expression e) -> int
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.TypeAs(DryIoc.FastExpressionCompiler.LightExpression.Expression expression, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.TypeEqual(DryIoc.FastExpressionCompiler.LightExpression.Expression operand, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.TypeBinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.TypeIs(DryIoc.FastExpressionCompiler.LightExpression.Expression operand, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.TypeBinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.UnaryPlus(DryIoc.FastExpressionCompiler.LightExpression.Expression expression) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Unbox(DryIoc.FastExpressionCompiler.LightExpression.Expression expression, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Variable(System.Type type, string name = null) -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ArrayClosureArrayField -> System.Reflection.FieldInfo
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ArrayClosureWithNonPassedParamsConstructor -> System.Reflection.ConstructorInfo
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ArrayClosureWithNonPassedParamsConstructorWithoutConstants -> System.Reflection.ConstructorInfo
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ArrayClosureWithNonPassedParamsField -> System.Reflection.FieldInfo
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast(this DryIoc.FastExpressionCompiler.LightExpression.Expression<System.Action> lambdaExpr, bool ifFastFailedReturnNull = false, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> System.Action
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast(this DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression lambdaExpr, bool ifFastFailedReturnNull = false, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> System.Delegate
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<R>(this DryIoc.FastExpressionCompiler.LightExpression.Expression<System.Func<R>> lambdaExpr, bool ifFastFailedReturnNull = false, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> System.Func<R>
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<T1, R>(this DryIoc.FastExpressionCompiler.LightExpression.Expression<System.Func<T1, R>> lambdaExpr, bool ifFastFailedReturnNull = false, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> System.Func<T1, R>
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<T1, T2, R>(this DryIoc.FastExpressionCompiler.LightExpression.Expression<System.Func<T1, T2, R>> lambdaExpr, bool ifFastFailedReturnNull = false, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> System.Func<T1, T2, R>
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<T1, T2, T3, R>(this DryIoc.FastExpressionCompiler.LightExpression.Expression<System.Func<T1, T2, T3, R>> lambdaExpr, bool ifFastFailedReturnNull = false, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> System.Func<T1, T2, T3, R>
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<T1, T2, T3, T4, R>(this DryIoc.FastExpressionCompiler.LightExpression.Expression<System.Func<T1, T2, T3, T4, R>> lambdaExpr, bool ifFastFailedReturnNull = false, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> System.Func<T1, T2, T3, T4, R>
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<T1, T2, T3, T4, T5, R>(this DryIoc.FastExpressionCompiler.LightExpression.Expression<System.Func<T1, T2, T3, T4, T5, R>> lambdaExpr, bool ifFastFailedReturnNull = false, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> System.Func<T1, T2, T3, T4, T5, R>
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<T1, T2, T3, T4, T5, T6, R>(this DryIoc.FastExpressionCompiler.LightExpression.Expression<System.Func<T1, T2, T3, T4, T5, T6, R>> lambdaExpr, bool ifFastFailedReturnNull = false, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> System.Func<T1, T2, T3, T4, T5, T6, R>
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<T1, T2, T3, T4, T5, T6>(this DryIoc.FastExpressionCompiler.LightExpression.Expression<System.Action<T1, T2, T3, T4, T5, T6>> lambdaExpr, bool ifFastFailedReturnNull = false, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> System.Action<T1, T2, T3, T4, T5, T6>
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<T1, T2, T3, T4, T5>(this DryIoc.FastExpressionCompiler.LightExpression.Expression<System.Action<T1, T2, T3, T4, T5>> lambdaExpr, bool ifFastFailedReturnNull = false, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> System.Action<T1, T2, T3, T4, T5>
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<T1, T2, T3, T4>(this DryIoc.FastExpressionCompiler.LightExpression.Expression<System.Action<T1, T2, T3, T4>> lambdaExpr, bool ifFastFailedReturnNull = false, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> System.Action<T1, T2, T3, T4>
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<T1, T2, T3>(this DryIoc.FastExpressionCompiler.LightExpression.Expression<System.Action<T1, T2, T3>> lambdaExpr, bool ifFastFailedReturnNull = false, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> System.Action<T1, T2, T3>
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<T1, T2>(this DryIoc.FastExpressionCompiler.LightExpression.Expression<System.Action<T1, T2>> lambdaExpr, bool ifFastFailedReturnNull = false, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> System.Action<T1, T2>
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<T1>(this DryIoc.FastExpressionCompiler.LightExpression.Expression<System.Action<T1>> lambdaExpr, bool ifFastFailedReturnNull = false, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> System.Action<T1>
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<TDelegate>(this DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate> lambdaExpr, bool ifFastFailedReturnNull = false, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> TDelegate
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<TDelegate>(this DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression lambdaExpr, bool ifFastFailedReturnNull = false, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> TDelegate
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFastToIL(this DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression lambdaExpr, System.Reflection.Emit.ILGenerator il, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> bool
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileSys(this DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression lambdaExpr) -> System.Delegate
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileSys<TDelegate>(this DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate> lambdaExpr) -> TDelegate
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.EmittingVisitor.EmitLoadConstantInt(System.Reflection.Emit.ILGenerator il, int i) -> void
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.EmittingVisitor.EmitMethodCall(System.Reflection.Emit.ILGenerator il, System.Reflection.MethodInfo method) -> bool
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.EmittingVisitor.EmitMethodCallOrVirtualCall(System.Reflection.Emit.ILGenerator il, System.Reflection.MethodInfo method) -> bool
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.EmittingVisitor.EmitVirtualMethodCall(System.Reflection.Emit.ILGenerator il, System.Reflection.MethodInfo method) -> bool
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.EmittingVisitor.TryEmit(DryIoc.FastExpressionCompiler.LightExpression.Expression expr, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, System.Reflection.Emit.ILGenerator il, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags setup, DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags parent, int byRefIndex = -1) -> bool
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.EmittingVisitor.TryEmitConstantOfNotNullValue(bool considerClosure, System.Type exprType, object constantValue, System.Reflection.Emit.ILGenerator il, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, int byRefIndex = -1) -> bool
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.EmittingVisitor.TryEmitMemberAccess(DryIoc.FastExpressionCompiler.LightExpression.MemberExpression expr, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, System.Reflection.Emit.ILGenerator il, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags setup, DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags parent, int byRefIndex = -1) -> bool
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.EmittingVisitor.TryEmitNonByRefNonValueTypeParameter(DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression paramExpr, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, System.Reflection.Emit.ILGenerator il, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure) -> bool
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.EmittingVisitor.TryEmitParameter(DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression paramExpr, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, System.Reflection.Emit.ILGenerator il, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags parent, int byRefIndex = -1) -> bool
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.IsClosureBoundConstant(object value, System.Type type) -> bool
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.NestedLambdaWithConstantsAndNestedLambdas.ConstantsAndNestedLambdasField -> System.Reflection.FieldInfo
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.NestedLambdaWithConstantsAndNestedLambdas.NestedLambdaField -> System.Reflection.FieldInfo
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.TryCollectBoundConstants(ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.Expression expr, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, bool isNestedLambda, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo rootClosure, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags) -> bool
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.TryCompile<TDelegate>(this DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression lambdaExpr, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> TDelegate
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.TryCompileWithoutClosure<TDelegate>(this DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression lambdaExpr, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> TDelegate
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.TryCompileWithPreCreatedClosure<TDelegate>(this DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression lambdaExpr, DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression[] closureConstantsExprs, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags) -> TDelegate
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.TryCompileWithPreCreatedClosure<TDelegate>(this DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression lambdaExpr, params DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression[] closureConstantsExprs) -> TDelegate
~static DryIoc.FastExpressionCompiler.LightExpression.ILGeneratorHacks.GetNextLocalVarIndex(this System.Reflection.Emit.ILGenerator il, System.Type t) -> int
~static DryIoc.FastExpressionCompiler.LightExpression.LiveCountArray<T>.Expand(T[] items) -> T[]
~static DryIoc.FastExpressionCompiler.LightExpression.ToCSharpPrinter.ToCSharpString(this DryIoc.FastExpressionCompiler.LightExpression.Expression e, System.Text.StringBuilder sb, int lineIdent = 0, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null, int identSpaces = 4, DryIoc.FastExpressionCompiler.LightExpression.TryPrintConstant tryPrintConstant = null) -> System.Text.StringBuilder
~static DryIoc.FastExpressionCompiler.LightExpression.ToCSharpPrinter.ToCSharpString(this DryIoc.FastExpressionCompiler.LightExpression.Expression expr) -> string
~static DryIoc.FastExpressionCompiler.LightExpression.ToCSharpPrinter.ToCSharpString(this DryIoc.FastExpressionCompiler.LightExpression.Expression expr, DryIoc.FastExpressionCompiler.LightExpression.TryPrintConstant tryPrintConstant) -> string
~static DryIoc.FastExpressionCompiler.LightExpression.ToExpressionPrinter.ToExpressionString(this DryIoc.FastExpressionCompiler.LightExpression.Expression expr, DryIoc.FastExpressionCompiler.LightExpression.TryPrintConstant tryPrintConstant = null) -> string
~static DryIoc.FastExpressionCompiler.LightExpression.ToExpressionPrinter.ToExpressionString(this DryIoc.FastExpressionCompiler.LightExpression.Expression expr, out System.Collections.Generic.List<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> paramsExprs, out System.Collections.Generic.List<DryIoc.FastExpressionCompiler.LightExpression.Expression> uniqueExprs, out System.Collections.Generic.List<DryIoc.FastExpressionCompiler.LightExpression.LabelTarget> lts, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null, int identSpaces = 2, DryIoc.FastExpressionCompiler.LightExpression.TryPrintConstant tryPrintConstant = null) -> string
~static DryIoc.ImTools.ArrayTools.Append<T>(this System.Collections.Generic.IEnumerable<T> source, System.Collections.Generic.IEnumerable<T> other) -> T[]
~static DryIoc.ImTools.ArrayTools.Append<T>(this T[] source, params T[] added) -> T[]
~static DryIoc.ImTools.ArrayTools.Append<T>(this T[] source, T value) -> T[]
~static DryIoc.ImTools.ArrayTools.AppendNonEmpty<T>(this T[] source, params T[] added) -> T[]
~static DryIoc.ImTools.ArrayTools.AppendOrUpdate<T>(this T[] source, T value, int index = -1) -> T[]
~static DryIoc.ImTools.ArrayTools.AppendTo<T>(T[] source, int sourcePos, int count, T[] results = null) -> T[]
~static DryIoc.ImTools.ArrayTools.AppendToNonEmpty<T>(this T[] source, T value) -> T[]
~static DryIoc.ImTools.ArrayTools.Copy<T>(this T[] source) -> T[]
~static DryIoc.ImTools.ArrayTools.CopyNonEmpty<T>(this T[] source) -> T[]
~static DryIoc.ImTools.ArrayTools.Empty<T>() -> T[]
~static DryIoc.ImTools.ArrayTools.EmptyIfNull<T>(this T[] source) -> T[]
~static DryIoc.ImTools.ArrayTools.FindFirst<T, S>(this T[] source, S state, System.Func<S, T, bool> predicate) -> T
~static DryIoc.ImTools.ArrayTools.FindFirst<T>(this System.Collections.Generic.IEnumerable<T> source, System.Func<T, bool> predicate) -> T
~static DryIoc.ImTools.ArrayTools.FindFirst<T>(this T[] source, System.Func<T, bool> predicate) -> T
~static DryIoc.ImTools.ArrayTools.ForEach<T>(this T[] source, System.Action<T> action) -> void
~static DryIoc.ImTools.ArrayTools.IndexOf<T, S>(this T[] source, S state, System.Func<S, T, bool> predicate) -> int
~static DryIoc.ImTools.ArrayTools.IndexOf<T>(this T[] source, System.Func<T, bool> predicate) -> int
~static DryIoc.ImTools.ArrayTools.IndexOf<T>(this T[] source, T value) -> int
~static DryIoc.ImTools.ArrayTools.IndexOfReference<T>(this T[] source, T reference) -> int
~static DryIoc.ImTools.ArrayTools.IsNullOrEmpty<T>(this T[] source) -> bool
~static DryIoc.ImTools.ArrayTools.Map<T, A, B, R>(this T[] source, A a, B b, System.Func<A, B, T, R> map) -> R[]
~static DryIoc.ImTools.ArrayTools.Map<T, R>(this System.Collections.Generic.IEnumerable<T> source, System.Func<T, R> map) -> System.Collections.Generic.IEnumerable<R>
~static DryIoc.ImTools.ArrayTools.Map<T, R>(this T[] source, System.Func<T, R> map) -> R[]
~static DryIoc.ImTools.ArrayTools.Map<T, S, R>(this T[] source, S state, System.Func<S, T, R> map) -> R[]
~static DryIoc.ImTools.ArrayTools.Match<A, B, T, R>(this T[] source, A a, B b, System.Func<A, B, T, bool> condition, System.Func<A, B, T, R> map) -> R[]
~static DryIoc.ImTools.ArrayTools.Match<A, B, T>(this T[] source, A a, B b, System.Func<A, B, T, bool> condition) -> T[]
~static DryIoc.ImTools.ArrayTools.Match<S, T, R>(this T[] source, S state, System.Func<S, T, bool> condition, System.Func<S, T, R> map) -> R[]
~static DryIoc.ImTools.ArrayTools.Match<S, T>(this T[] source, S state, System.Func<S, T, bool> condition) -> T[]
~static DryIoc.ImTools.ArrayTools.Match<T, R>(this System.Collections.Generic.IEnumerable<T> source, System.Func<T, bool> condition, System.Func<T, R> map) -> System.Collections.Generic.IEnumerable<R>
~static DryIoc.ImTools.ArrayTools.Match<T, R>(this T[] source, System.Func<T, bool> condition, System.Func<T, R> map) -> R[]
~static DryIoc.ImTools.ArrayTools.Match<T>(this System.Collections.Generic.IEnumerable<T> source, System.Func<T, bool> condition) -> System.Collections.Generic.IEnumerable<T>
~static DryIoc.ImTools.ArrayTools.Match<T>(this T[] source, System.Func<T, bool> condition) -> T[]
~static DryIoc.ImTools.ArrayTools.One<T>(this T one) -> T[]
~static DryIoc.ImTools.ArrayTools.PrependToNonEmpty<T>(this T[] source, T value) -> T[]
~static DryIoc.ImTools.ArrayTools.Remove<T>(this T[] source, T value) -> T[]
~static DryIoc.ImTools.ArrayTools.RemoveAt<T>(this T[] source, int index) -> T[]
~static DryIoc.ImTools.ArrayTools.SingleOrDefaultIfMany<T>(this System.Collections.Generic.IEnumerable<T> source) -> T
~static DryIoc.ImTools.ArrayTools.ToArrayOrSelf<T>(this System.Collections.Generic.IEnumerable<T> source) -> T[]
~static DryIoc.ImTools.ArrayTools.ToListOrSelf<T>(this System.Collections.Generic.IEnumerable<T> source) -> System.Collections.Generic.IList<T>
~static DryIoc.ImTools.ArrayTools.UpdateNonEmpty<T>(this T[] source, T value, int index) -> T[]
~static DryIoc.ImTools.Fun.Do<T, S>(this T x, S state, System.Action<T, S> effect) -> T
~static DryIoc.ImTools.Fun.Do<T>(this T x, System.Action<T> effect) -> T
~static DryIoc.ImTools.Fun.To<R>(this object x) -> R
~static DryIoc.ImTools.Fun.To<T, R>(this T x, System.Func<T, R> map) -> R
~static DryIoc.ImTools.Fun.To<T, S, R>(this T x, S state, System.Func<T, S, R> map) -> R
~static DryIoc.ImTools.GrowingList.Push<T>(ref T[] items, int count, T item) -> void
~static DryIoc.ImTools.GrowingList.PushSlot<T>(ref T[] items, int count) -> T
~static DryIoc.ImTools.GrowingList.ResizeToArray<T>(T[] items, int count) -> T[]
~static DryIoc.ImTools.GrowingList.ToString<T>(T[] items, int count) -> string
~static DryIoc.ImTools.ImHashMap.AddOrGetEntry<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, DryIoc.ImTools.ImHashMapEntry<K, V> newEntry) -> DryIoc.ImTools.ImHashMap<K, V>
~static DryIoc.ImTools.ImHashMap.AddOrKeep<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, int hash, K key, V value) -> DryIoc.ImTools.ImHashMap<K, V>
~static DryIoc.ImTools.ImHashMap.AddOrKeep<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, K key, V value) -> DryIoc.ImTools.ImHashMap<K, V>
~static DryIoc.ImTools.ImHashMap.AddOrKeepEntry<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, DryIoc.ImTools.ImHashMapEntry<K, V> newEntry) -> DryIoc.ImTools.ImHashMap<K, V>
~static DryIoc.ImTools.ImHashMap.AddOrUpdate<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, int hash, K key, V value) -> DryIoc.ImTools.ImHashMap<K, V>
~static DryIoc.ImTools.ImHashMap.AddOrUpdate<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, int hash, K key, V value, DryIoc.ImTools.Update<K, V> update) -> DryIoc.ImTools.ImHashMap<K, V>
~static DryIoc.ImTools.ImHashMap.AddOrUpdate<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, K key, V value) -> DryIoc.ImTools.ImHashMap<K, V>
~static DryIoc.ImTools.ImHashMap.AddOrUpdate<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, K key, V value, DryIoc.ImTools.Update<K, V> update) -> DryIoc.ImTools.ImHashMap<K, V>
~static DryIoc.ImTools.ImHashMap.AddOrUpdateEntry<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, DryIoc.ImTools.ImHashMapEntry<K, V> newEntry) -> DryIoc.ImTools.ImHashMap<K, V>
~static DryIoc.ImTools.ImHashMap.Contains<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, int hash, K key) -> bool
~static DryIoc.ImTools.ImHashMap.Contains<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, K key) -> bool
~static DryIoc.ImTools.ImHashMap.Entry<K, V>(int hash, K key, V value) -> DryIoc.ImTools.ImHashMapEntry<K, V>
~static DryIoc.ImTools.ImHashMap.Entry<K, V>(K key, V value) -> DryIoc.ImTools.ImHashMapEntry<K, V>
~static DryIoc.ImTools.ImHashMap.Enumerate<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, DryIoc.ImTools.MapParentStack parents = null) -> System.Collections.Generic.IEnumerable<DryIoc.ImTools.ImHashMapEntry<K, V>>
~static DryIoc.ImTools.ImHashMap.Fold<K, V, S>(this DryIoc.ImTools.ImHashMap<K, V> map, S state, System.Func<DryIoc.ImTools.ImHashMapEntry<K, V>, int, S, S> handler, DryIoc.ImTools.MapParentStack parents = null) -> S
~static DryIoc.ImTools.ImHashMap.ForEach<K, V, S>(this DryIoc.ImTools.ImHashMap<K, V> map, S state, System.Action<DryIoc.ImTools.ImHashMapEntry<K, V>, int, S> handler, DryIoc.ImTools.MapParentStack parents = null) -> S
~static DryIoc.ImTools.ImHashMap.ForEach<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, System.Action<DryIoc.ImTools.ImHashMapEntry<K, V>, int> handler, DryIoc.ImTools.MapParentStack parents = null) -> void
~static DryIoc.ImTools.ImHashMap.GetEntryOrDefault<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, int hash, K key) -> DryIoc.ImTools.ImHashMapEntry<K, V>
~static DryIoc.ImTools.ImHashMap.GetEntryOrDefault<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, K key) -> DryIoc.ImTools.ImHashMapEntry<K, V>
~static DryIoc.ImTools.ImHashMap.GetEntryOrDefaultByReferenceEquals<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, int hash, K key) -> DryIoc.ImTools.ImHashMapEntry<K, V>
~static DryIoc.ImTools.ImHashMap.GetSurePresentEntry<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, int hash, K key) -> DryIoc.ImTools.ImHashMapEntry<K, V>
~static DryIoc.ImTools.ImHashMap.GetValueOrDefault<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, int hash, K key) -> V
~static DryIoc.ImTools.ImHashMap.GetValueOrDefault<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, K key) -> V
~static DryIoc.ImTools.ImHashMap.GetValueOrDefaultByReferenceEquals<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, int hash, K key) -> V
~static DryIoc.ImTools.ImHashMap.Remove<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, int hash, K key) -> DryIoc.ImTools.ImHashMap<K, V>
~static DryIoc.ImTools.ImHashMap.Remove<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, K key) -> DryIoc.ImTools.ImHashMap<K, V>
~static DryIoc.ImTools.ImHashMap.SetValue<K, V>(this DryIoc.ImTools.ImHashMapEntry<K, V> e, V value) -> DryIoc.ImTools.ImHashMapEntry<K, V>
~static DryIoc.ImTools.ImHashMap.ToArray<K, V, S>(this DryIoc.ImTools.ImHashMap<K, V> map, System.Func<DryIoc.ImTools.ImHashMapEntry<K, V>, S> selector) -> S[]
~static DryIoc.ImTools.ImHashMap.ToArray<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map) -> DryIoc.ImTools.ImHashMapEntry<K, V>[]
~static DryIoc.ImTools.ImHashMap.ToDictionary<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map) -> System.Collections.Generic.Dictionary<K, V>
~static DryIoc.ImTools.ImHashMap.TryFind<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, int hash, K key, out V value) -> bool
~static DryIoc.ImTools.ImHashMap.TryFind<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, K key, out V value) -> bool
~static DryIoc.ImTools.ImHashMap.TryFindByReferenceEquals<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, int hash, K key, out V value) -> bool
~static DryIoc.ImTools.ImHashMap.Update<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, int hash, K key, V value) -> DryIoc.ImTools.ImHashMap<K, V>
~static DryIoc.ImTools.ImHashMap.Update<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, int hash, K key, V value, DryIoc.ImTools.Update<K, V> update) -> DryIoc.ImTools.ImHashMap<K, V>
~static DryIoc.ImTools.ImHashMap.Update<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, K key, V value) -> DryIoc.ImTools.ImHashMap<K, V>
~static DryIoc.ImTools.ImHashMap.Update<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, K key, V value, DryIoc.ImTools.Update<K, V> update) -> DryIoc.ImTools.ImHashMap<K, V>
~static DryIoc.ImTools.ImHashMap.UpdateToDefault<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, int hash, K key) -> DryIoc.ImTools.ImHashMap<K, V>
~static DryIoc.ImTools.ImHashMap.UpdateToDefault<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, K key) -> DryIoc.ImTools.ImHashMap<K, V>
~static DryIoc.ImTools.ImList.Deconstruct<T>(this DryIoc.ImTools.ImList<T> list, out T head, out DryIoc.ImTools.ImList<T> tail, out bool isEmpty) -> void
~static DryIoc.ImTools.ImList.Fold<T, S>(this DryIoc.ImTools.ImList<T> list, S state, System.Func<T, int, S, S> handler) -> S
~static DryIoc.ImTools.ImList.Fold<T, S>(this DryIoc.ImTools.ImList<T> list, S state, System.Func<T, S, S> handler) -> S
~static DryIoc.ImTools.ImList.ForEach<T>(this DryIoc.ImTools.ImList<T> list, System.Action<T> effect) -> void
~static DryIoc.ImTools.ImList.List<T>(params T[] items) -> DryIoc.ImTools.ImList<T>
~static DryIoc.ImTools.ImList.List<T>(this T head) -> DryIoc.ImTools.ImList<T>
~static DryIoc.ImTools.ImList.List<T>(this T head, DryIoc.ImTools.ImList<T> tail) -> DryIoc.ImTools.ImList<T>
~static DryIoc.ImTools.ImList.Map<T, R>(this DryIoc.ImTools.ImList<T> list, System.Func<T, int, R> map) -> DryIoc.ImTools.ImList<R>
~static DryIoc.ImTools.ImList.Map<T, R>(this DryIoc.ImTools.ImList<T> list, System.Func<T, R> map) -> DryIoc.ImTools.ImList<R>
~static DryIoc.ImTools.ImList.Reverse<T>(this DryIoc.ImTools.ImList<T> list) -> DryIoc.ImTools.ImList<T>
~static DryIoc.ImTools.ImList.ToArray<T>(this DryIoc.ImTools.ImList<T> source) -> T[]
~static DryIoc.ImTools.ImList.ToImList<T>(this System.Collections.Generic.IEnumerable<T> source) -> DryIoc.ImTools.ImList<T>
~static DryIoc.ImTools.ImList.ToImList<T>(this System.Collections.Generic.IList<T> source) -> DryIoc.ImTools.ImList<T>
~static DryIoc.ImTools.ImMap.AddOrGetEntry<V>(this DryIoc.ImTools.ImMap<V> map, DryIoc.ImTools.ImMapEntry<V> newEntry) -> DryIoc.ImTools.ImMap<V>
~static DryIoc.ImTools.ImMap.AddOrKeep<V>(this DryIoc.ImTools.ImMap<V> map, int hash, V value) -> DryIoc.ImTools.ImMap<V>
~static DryIoc.ImTools.ImMap.AddOrKeepEntry<V>(this DryIoc.ImTools.ImMap<V> map, DryIoc.ImTools.ImMapEntry<V> newEntry) -> DryIoc.ImTools.ImMap<V>
~static DryIoc.ImTools.ImMap.AddOrUpdate<V>(this DryIoc.ImTools.ImMap<V> map, int hash, V value) -> DryIoc.ImTools.ImMap<V>
~static DryIoc.ImTools.ImMap.AddOrUpdate<V>(this DryIoc.ImTools.ImMap<V> map, int hash, V value, DryIoc.ImTools.Update<int, V> update) -> DryIoc.ImTools.ImMap<V>
~static DryIoc.ImTools.ImMap.AddOrUpdateEntry<V>(this DryIoc.ImTools.ImMap<V> map, DryIoc.ImTools.ImMapEntry<V> newEntry) -> DryIoc.ImTools.ImMap<V>
~static DryIoc.ImTools.ImMap.Entry<V>(int hash, V value) -> DryIoc.ImTools.ImMapEntry<V>
~static DryIoc.ImTools.ImMap.Enumerate<V>(this DryIoc.ImTools.ImMap<V> map) -> DryIoc.ImTools.ImMap.ImMapEnumerable<V>
~static DryIoc.ImTools.ImMap.Fold<V, S>(this DryIoc.ImTools.ImMap<V> map, S state, System.Func<DryIoc.ImTools.ImMapEntry<V>, int, S, S> handler, DryIoc.ImTools.MapParentStack parents = null) -> S
~static DryIoc.ImTools.ImMap.ForEach<V, S>(this DryIoc.ImTools.ImMap<V> map, S state, System.Action<DryIoc.ImTools.ImMapEntry<V>, int, S> handler, DryIoc.ImTools.MapParentStack parents = null) -> S
~static DryIoc.ImTools.ImMap.ForEach<V>(this DryIoc.ImTools.ImMap<V> map, System.Action<DryIoc.ImTools.ImMapEntry<V>, int> handler, DryIoc.ImTools.MapParentStack parents = null) -> void
~static DryIoc.ImTools.ImMap.GetEntryOrDefault<V>(this DryIoc.ImTools.ImMap<V> map, int hash) -> DryIoc.ImTools.ImMapEntry<V>
~static DryIoc.ImTools.ImMap.GetSurePresentEntry<V>(this DryIoc.ImTools.ImMap<V> map, int hash) -> DryIoc.ImTools.ImMapEntry<V>
~static DryIoc.ImTools.ImMap.GetValueOrDefault<V>(this DryIoc.ImTools.ImMap<V> map, int hash) -> V
~static DryIoc.ImTools.ImMap.Remove<V>(this DryIoc.ImTools.ImMap<V> map, int hash) -> DryIoc.ImTools.ImMap<V>
~static DryIoc.ImTools.ImMap.ToArray<V, S>(this DryIoc.ImTools.ImMap<V> map, System.Func<DryIoc.ImTools.ImMapEntry<V>, S> selector) -> S[]
~static DryIoc.ImTools.ImMap.ToArray<V>(this DryIoc.ImTools.ImMap<V> map) -> DryIoc.ImTools.ImMapEntry<V>[]
~static DryIoc.ImTools.ImMap.ToDictionary<V>(this DryIoc.ImTools.ImMap<V> map) -> System.Collections.Generic.Dictionary<int, V>
~static DryIoc.ImTools.ImMap.TryFind<V>(this DryIoc.ImTools.ImMap<V> map, int hash, out V value) -> bool
~static DryIoc.ImTools.ImMap.Update<V>(this DryIoc.ImTools.ImMap<V> map, int hash, V value) -> DryIoc.ImTools.ImMap<V>
~static DryIoc.ImTools.ImMap.UpdateToDefault<V>(this DryIoc.ImTools.ImMap<V> map, int hash) -> DryIoc.ImTools.ImMap<V>
~static DryIoc.ImTools.ImZipper.Fold<T, S>(this DryIoc.ImTools.ImZipper<T> z, S state, System.Func<T, int, S, S> handler) -> S
~static DryIoc.ImTools.ImZipper.Fold<T, S>(this DryIoc.ImTools.ImZipper<T> z, S state, System.Func<T, S, S> handler) -> S
~static DryIoc.ImTools.ImZipper.ForEach<T>(this DryIoc.ImTools.ImZipper<T> z, System.Action<T> effect) -> void
~static DryIoc.ImTools.ImZipper.RemoveAt<T>(this DryIoc.ImTools.ImZipper<T> z, int i) -> DryIoc.ImTools.ImZipper<T>
~static DryIoc.ImTools.ImZipper.ShiftTo<T>(this DryIoc.ImTools.ImZipper<T> z, int i) -> DryIoc.ImTools.ImZipper<T>
~static DryIoc.ImTools.ImZipper.ToArray<T>(this DryIoc.ImTools.ImZipper<T> z) -> T[]
~static DryIoc.ImTools.ImZipper.Update<T>(this DryIoc.ImTools.ImZipper<T> z, System.Func<T, T> update) -> DryIoc.ImTools.ImZipper<T>
~static DryIoc.ImTools.ImZipper.UpdateAt<T>(this DryIoc.ImTools.ImZipper<T> z, int i, System.Func<T, T> update) -> DryIoc.ImTools.ImZipper<T>
~static DryIoc.ImTools.ImZipper.Zip<T>(params T[] items) -> DryIoc.ImTools.ImZipper<T>
~static DryIoc.ImTools.KV.Of<K, V>(K key, V value) -> DryIoc.ImTools.KV<K, V>
~static DryIoc.ImTools.KV.WithValue<K, V>(this DryIoc.ImTools.KV<K, V> kv, V value) -> DryIoc.ImTools.KV<K, V>
~static DryIoc.ImTools.Lazy.Of<T>(System.Func<T> valueFactory) -> System.Lazy<T>
~static DryIoc.ImTools.PartitionedHashMap.AddOrKeep<K, V>(this DryIoc.ImTools.ImHashMap<K, V>[] parts, int hash, K key, V value, int partHashMask = 15) -> void
~static DryIoc.ImTools.PartitionedHashMap.AddOrKeep<K, V>(this DryIoc.ImTools.ImHashMap<K, V>[] parts, K key, V value, int partHashMask = 15) -> void
~static DryIoc.ImTools.PartitionedHashMap.AddOrUpdate<K, V>(this DryIoc.ImTools.ImHashMap<K, V>[] parts, int hash, K key, V value, DryIoc.ImTools.Update<K, V> update, int partHashMask = 15) -> void
~static DryIoc.ImTools.PartitionedHashMap.AddOrUpdate<K, V>(this DryIoc.ImTools.ImHashMap<K, V>[] parts, int hash, K key, V value, int partHashMask = 15) -> void
~static DryIoc.ImTools.PartitionedHashMap.AddOrUpdate<K, V>(this DryIoc.ImTools.ImHashMap<K, V>[] parts, K key, V value, int partHashMask = 15) -> void
~static DryIoc.ImTools.PartitionedHashMap.CreateEmpty<K, V>(int partionCountOfPowerOfTwo = 16) -> DryIoc.ImTools.ImHashMap<K, V>[]
~static DryIoc.ImTools.PartitionedHashMap.Enumerate<K, V>(this DryIoc.ImTools.ImHashMap<K, V>[] parts, DryIoc.ImTools.MapParentStack parents = null) -> System.Collections.Generic.IEnumerable<DryIoc.ImTools.ImHashMapEntry<K, V>>
~static DryIoc.ImTools.PartitionedHashMap.ForEach<K, V, S>(this DryIoc.ImTools.ImHashMap<K, V>[] parts, S state, System.Action<DryIoc.ImTools.ImHashMapEntry<K, V>, int, S> handler, DryIoc.ImTools.MapParentStack parents = null) -> S
~static DryIoc.ImTools.PartitionedHashMap.GetValueOrDefault<K, V>(this DryIoc.ImTools.ImHashMap<K, V>[] parts, int hash, K key, int partHashMask = 15) -> V
~static DryIoc.ImTools.PartitionedHashMap.GetValueOrDefault<K, V>(this DryIoc.ImTools.ImHashMap<K, V>[] parts, K key, int partHashMask = 15) -> V
~static DryIoc.ImTools.PartitionedHashMap.GetValueOrDefaultByReferenceEquals<K, V>(this DryIoc.ImTools.ImHashMap<K, V>[] parts, int hash, K key, int partHashMask = 15) -> V
~static DryIoc.ImTools.PartitionedHashMap.GetValueOrDefaultByReferenceEquals<K, V>(this DryIoc.ImTools.ImHashMap<K, V>[] parts, K key, int partHashMask = 15) -> V
~static DryIoc.ImTools.PartitionedHashMap.TryFind<K, V>(this DryIoc.ImTools.ImHashMap<K, V>[] parts, int hash, K key, out V value, int partHashMask = 15) -> bool
~static DryIoc.ImTools.PartitionedHashMap.TryFind<K, V>(this DryIoc.ImTools.ImHashMap<K, V>[] parts, K key, out V value, int partHashMask = 15) -> bool
~static DryIoc.ImTools.PartitionedHashMap.TryFindByReferenceEquals<K, V>(this DryIoc.ImTools.ImHashMap<K, V>[] parts, int hash, K key, out V value, int partHashMask = 15) -> bool
~static DryIoc.ImTools.PartitionedMap.AddOrKeep<V>(this DryIoc.ImTools.ImMap<V>[] parts, int hash, V value, int partHashMask = 15) -> void
~static DryIoc.ImTools.PartitionedMap.AddOrUpdate<V>(this DryIoc.ImTools.ImMap<V>[] parts, int hash, V value, DryIoc.ImTools.Update<int, V> update, int partHashMask = 15) -> void
~static DryIoc.ImTools.PartitionedMap.AddOrUpdate<V>(this DryIoc.ImTools.ImMap<V>[] parts, int hash, V value, int partHashMask = 15) -> void
~static DryIoc.ImTools.PartitionedMap.CreateEmpty<V>(int partionCountOfPowerOfTwo = 16) -> DryIoc.ImTools.ImMap<V>[]
~static DryIoc.ImTools.PartitionedMap.Enumerate<V>(this DryIoc.ImTools.ImMap<V>[] parts) -> System.Collections.Generic.IEnumerable<DryIoc.ImTools.ImMapEntry<V>>
~static DryIoc.ImTools.PartitionedMap.ForEach<V, S>(this DryIoc.ImTools.ImMap<V>[] parts, S state, System.Action<DryIoc.ImTools.ImMapEntry<V>, int, S> handler, DryIoc.ImTools.MapParentStack parents = null) -> S
~static DryIoc.ImTools.PartitionedMap.GetValueOrDefault<V>(this DryIoc.ImTools.ImMap<V>[] parts, int hash, int partHashMask = 15) -> V
~static DryIoc.ImTools.PartitionedMap.TryFind<V>(this DryIoc.ImTools.ImMap<V>[] parts, int hash, out V value, int partHashMask = 15) -> bool
~static DryIoc.ImTools.PartitionedMap.Update<V>(this DryIoc.ImTools.ImMap<V>[] parts, int hash, V value, int partHashMask = 15) -> void
~static DryIoc.ImTools.Ref.NewRef<T>(this DryIoc.ImTools.Ref<T> original) -> DryIoc.ImTools.Ref<T>
~static DryIoc.ImTools.Ref.Of<T>(T value) -> DryIoc.ImTools.Ref<T>
~static DryIoc.ImTools.Ref.Swap<T, A, B, C>(ref T value, A a, B b, C c, System.Func<T, A, B, C, T> getNewValue, int retryCountUntilThrow = 50) -> T
~static DryIoc.ImTools.Ref.Swap<T, A, B>(ref T value, A a, B b, System.Func<T, A, B, T> getNewValue, int retryCountUntilThrow = 50) -> T
~static DryIoc.ImTools.Ref.Swap<T, A>(ref T value, A a, System.Func<T, A, T> getNewValue, int retryCountUntilThrow = 50) -> T
~static DryIoc.ImTools.Ref.Swap<T>(ref T value, System.Func<T, T> getNewValue, int retryCountUntilThrow = 50) -> T
~static DryIoc.ImTools.Ref.SwapAndGetNewValue<T, A>(ref T value, A a, System.Func<T, A, T> getNewValue, int retryCountUntilThrow = 50) -> T
~static DryIoc.ImTools.St.Of<A, B>(A a, B b) -> DryIoc.ImTools.St<A, B>
~static DryIoc.ImTools.St.Of<A>(A a) -> DryIoc.ImTools.St<A>
~static DryIoc.ImTools.St.Rent<A, B>(A a, B b) -> DryIoc.ImTools.St<A, B>
~static DryIoc.ImTools.St.Rent<A>(A a) -> DryIoc.ImTools.St<A>
~static DryIoc.InstanceFactory.Of(object instance) -> DryIoc.InstanceFactory
~static DryIoc.InstanceFactory.Of(object instance, DryIoc.Setup setup) -> DryIoc.InstanceFactory
~static DryIoc.Interpreter.TryInterpret(DryIoc.IResolverContext r, DryIoc.FastExpressionCompiler.LightExpression.Expression expr, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, object paramValues, DryIoc.Interpreter.ParentLambdaArgs parentArgs, out object result) -> bool
~static DryIoc.Interpreter.TryInterpretAndUnwrapContainerException(DryIoc.IResolverContext r, DryIoc.FastExpressionCompiler.LightExpression.Expression expr, out object result) -> bool
~static DryIoc.Made.implicit operator DryIoc.Made(DryIoc.FactoryMethodSelector factoryMethod) -> DryIoc.Made
~static DryIoc.Made.implicit operator DryIoc.Made(DryIoc.ParameterSelector parameters) -> DryIoc.Made
~static DryIoc.Made.implicit operator DryIoc.Made(DryIoc.PropertiesAndFieldsSelector propertiesAndFields) -> DryIoc.Made
~static DryIoc.Made.Of(DryIoc.FactoryMethod factoryMethod, DryIoc.ParameterSelector parameters = null, DryIoc.PropertiesAndFieldsSelector propertiesAndFields = null) -> DryIoc.Made
~static DryIoc.Made.Of(DryIoc.FactoryMethodSelector factoryMethodSelector = null, DryIoc.ParameterSelector parameters = null, DryIoc.PropertiesAndFieldsSelector propertiesAndFields = null, bool isConditionalImplementation = false) -> DryIoc.Made
~static DryIoc.Made.Of(System.Func<DryIoc.Request, System.Reflection.MemberInfo> getMethodOrMember, DryIoc.ServiceInfo factoryInfo = null, DryIoc.ParameterSelector parameters = null, DryIoc.PropertiesAndFieldsSelector propertiesAndFields = null) -> DryIoc.Made
~static DryIoc.Made.Of(System.Func<DryIoc.Request, System.Reflection.MemberInfo> getMethodOrMember, System.Func<DryIoc.Request, DryIoc.ServiceInfo> factoryInfo, DryIoc.ParameterSelector parameters = null, DryIoc.PropertiesAndFieldsSelector propertiesAndFields = null) -> DryIoc.Made
~static DryIoc.Made.Of(System.Func<DryIoc.Request, System.Type> getImplType, DryIoc.ParameterSelector parameters = null, DryIoc.PropertiesAndFieldsSelector propertiesAndFields = null) -> DryIoc.Made
~static DryIoc.Made.Of(System.Func<System.Type, System.Reflection.ConstructorInfo> getConstructor, DryIoc.ParameterSelector parameters = null, DryIoc.PropertiesAndFieldsSelector propertiesAndFields = null) -> DryIoc.Made
~static DryIoc.Made.Of(System.Reflection.MemberInfo factoryMethodOrMember, DryIoc.ServiceInfo factoryInfo = null, DryIoc.ParameterSelector parameters = null, DryIoc.PropertiesAndFieldsSelector propertiesAndFields = null) -> DryIoc.Made
~static DryIoc.Made.Of<TFactory, TService>(System.Func<DryIoc.Request, DryIoc.ServiceInfo.Typed<TFactory>> getFactoryInfo, System.Linq.Expressions.Expression<System.Func<TFactory, TService>> serviceReturningExpr, params System.Func<DryIoc.Request, object>[] argValues) -> DryIoc.Made.TypedMade<TService>
~static DryIoc.Made.Of<TFactory, TService>(TFactory factoryInstance, System.Linq.Expressions.Expression<System.Func<TFactory, TService>> serviceReturningExpr, params System.Func<DryIoc.Request, object>[] argValues) -> DryIoc.Made.TypedMade<TService>
~static DryIoc.Made.Of<TService>(System.Linq.Expressions.Expression<System.Func<TService>> serviceReturningExpr, params System.Func<DryIoc.Request, object>[] argValues) -> DryIoc.Made.TypedMade<TService>
~static DryIoc.Messages.MessageExtensions.ToEmptyResponse(this System.Threading.Tasks.Task task) -> System.Threading.Tasks.Task<DryIoc.Messages.EmptyResponse>
~static DryIoc.Parameters.And(this DryIoc.ParameterSelector source, DryIoc.ParameterSelector other) -> DryIoc.ParameterSelector
~static DryIoc.Parameters.Details(this DryIoc.ParameterSelector source, System.Func<DryIoc.Request, System.Reflection.ParameterInfo, DryIoc.ServiceDetails> getDetailsOrNull) -> DryIoc.ParameterSelector
~static DryIoc.Parameters.IfUnresolvedReturnDefault -> DryIoc.ParameterSelector
~static DryIoc.Parameters.Name(this DryIoc.ParameterSelector source, string name, System.Func<DryIoc.Request, object> getCustomValue) -> DryIoc.ParameterSelector
~static DryIoc.Parameters.Name(this DryIoc.ParameterSelector source, string name, System.Func<DryIoc.Request, System.Reflection.ParameterInfo, DryIoc.ServiceDetails> getServiceDetails) -> DryIoc.ParameterSelector
~static DryIoc.Parameters.Name(this DryIoc.ParameterSelector source, string name, System.Type requiredServiceType = null, object serviceKey = null, DryIoc.IfUnresolved ifUnresolved = DryIoc.IfUnresolved.Throw, object defaultValue = null, string metadataKey = null, object metadata = null) -> DryIoc.ParameterSelector
~static DryIoc.Parameters.Of -> DryIoc.ParameterSelector
~static DryIoc.Parameters.OverrideWith(this DryIoc.ParameterSelector source, DryIoc.ParameterSelector other) -> DryIoc.ParameterSelector
~static DryIoc.Parameters.Position(this DryIoc.ParameterSelector source, int position, System.Func<DryIoc.Request, object> getCustomValue) -> DryIoc.ParameterSelector
~static DryIoc.Parameters.Position(this DryIoc.ParameterSelector source, int position, System.Func<DryIoc.Request, System.Reflection.ParameterInfo, DryIoc.ServiceDetails> getServiceDetails) -> DryIoc.ParameterSelector
~static DryIoc.Parameters.Position(this DryIoc.ParameterSelector source, int position, System.Type requiredServiceType = null, object serviceKey = null, DryIoc.IfUnresolved ifUnresolved = DryIoc.IfUnresolved.Throw, object defaultValue = null, string metadataKey = null, object metadata = null) -> DryIoc.ParameterSelector
~static DryIoc.Parameters.Type(this DryIoc.ParameterSelector source, System.Type parameterType, System.Func<DryIoc.Request, object> getCustomValue) -> DryIoc.ParameterSelector
~static DryIoc.Parameters.Type(this DryIoc.ParameterSelector source, System.Type parameterType, System.Type requiredServiceType = null, object serviceKey = null, DryIoc.IfUnresolved ifUnresolved = DryIoc.IfUnresolved.Throw, object defaultValue = null, string metadataKey = null, object metadata = null) -> DryIoc.ParameterSelector
~static DryIoc.Parameters.Type<T>(this DryIoc.ParameterSelector source, System.Func<DryIoc.Request, System.Reflection.ParameterInfo, DryIoc.ServiceDetails> getServiceDetails) -> DryIoc.ParameterSelector
~static DryIoc.Parameters.Type<T>(this DryIoc.ParameterSelector source, System.Func<DryIoc.Request, T> getCustomValue) -> DryIoc.ParameterSelector
~static DryIoc.Parameters.Type<T>(this DryIoc.ParameterSelector source, System.Type requiredServiceType = null, object serviceKey = null, DryIoc.IfUnresolved ifUnresolved = DryIoc.IfUnresolved.Throw, object defaultValue = null, string metadataKey = null, object metadata = null) -> DryIoc.ParameterSelector
~static DryIoc.ParameterServiceInfo.Of(System.Reflection.ParameterInfo parameter) -> DryIoc.ParameterServiceInfo
~static DryIoc.ParameterServiceInfo.Of(System.Reflection.ParameterInfo parameter, System.Type serviceType, DryIoc.ServiceDetails details) -> DryIoc.ParameterServiceInfo
~static DryIoc.Portable.GetAssemblyTypes(System.Reflection.Assembly a) -> System.Collections.Generic.IEnumerable<System.Type>
~static DryIoc.Portable.GetGetMethodOrNull(this System.Reflection.PropertyInfo p, bool includeNonPublic = false) -> System.Reflection.MethodInfo
~static DryIoc.Portable.GetSetMethodOrNull(this System.Reflection.PropertyInfo p, bool includeNonPublic = false) -> System.Reflection.MethodInfo
~static DryIoc.PrintTools.DefaultItemSeparator -> string
~static DryIoc.PrintTools.GetTypeNameDefault -> System.Func<System.Type, string>
~static DryIoc.PrintTools.Print(this System.Text.StringBuilder s, object x, string quote = "\"", string itemSeparator = null, System.Func<System.Type, string> getTypeName = null) -> System.Text.StringBuilder
~static DryIoc.PrintTools.Print(this System.Text.StringBuilder s, string str, string quote = "\"") -> System.Text.StringBuilder
~static DryIoc.PrintTools.Print(this System.Text.StringBuilder s, System.Collections.IEnumerable items, string separator = ", ", System.Action<System.Text.StringBuilder, object> printItem = null) -> System.Text.StringBuilder
~static DryIoc.PrintTools.Print(this System.Text.StringBuilder s, System.Type type, System.Func<System.Type, string> getTypeName = null) -> System.Text.StringBuilder
~static DryIoc.PrintTools.Print(this System.Type type, System.Func<System.Type, string> getTypeName = null) -> string
~static DryIoc.PropertiesAndFields.All(bool withNonPublic = true, bool withPrimitive = true, bool withFields = true, bool withBase = true, DryIoc.IfUnresolved ifUnresolved = DryIoc.IfUnresolved.ReturnDefaultIfNotRegistered, DryIoc.PropertiesAndFields.GetServiceInfo serviceInfo = null) -> DryIoc.PropertiesAndFieldsSelector
~static DryIoc.PropertiesAndFields.And(this DryIoc.PropertiesAndFieldsSelector source, DryIoc.PropertiesAndFieldsSelector other) -> DryIoc.PropertiesAndFieldsSelector
~static DryIoc.PropertiesAndFields.Auto -> DryIoc.PropertiesAndFieldsSelector
~static DryIoc.PropertiesAndFields.Details(this DryIoc.PropertiesAndFieldsSelector source, string name, System.Func<DryIoc.Request, DryIoc.ServiceDetails> getDetails) -> DryIoc.PropertiesAndFieldsSelector
~static DryIoc.PropertiesAndFields.IsInjectable(this System.Reflection.FieldInfo field, bool withNonPublic = false, bool withPrimitive = false) -> bool
~static DryIoc.PropertiesAndFields.IsInjectable(this System.Reflection.PropertyInfo property, bool withNonPublic = false, bool withPrimitive = false) -> bool
~static DryIoc.PropertiesAndFields.Name(this DryIoc.PropertiesAndFieldsSelector source, string name, System.Func<DryIoc.Request, object> getCustomValue) -> DryIoc.PropertiesAndFieldsSelector
~static DryIoc.PropertiesAndFields.Name(this DryIoc.PropertiesAndFieldsSelector source, string name, System.Type requiredServiceType = null, object serviceKey = null, DryIoc.IfUnresolved ifUnresolved = DryIoc.IfUnresolved.ReturnDefault, object defaultValue = null, string metadataKey = null, object metadata = null) -> DryIoc.PropertiesAndFieldsSelector
~static DryIoc.PropertiesAndFields.Of -> DryIoc.PropertiesAndFieldsSelector
~static DryIoc.PropertiesAndFields.OverrideWith(this DryIoc.PropertiesAndFieldsSelector source, DryIoc.PropertiesAndFieldsSelector other) -> DryIoc.PropertiesAndFieldsSelector
~static DryIoc.PropertiesAndFields.Properties(bool withNonPublic = false, bool withBase = false, DryIoc.IfUnresolved ifUnresolved = DryIoc.IfUnresolved.ReturnDefaultIfNotRegistered) -> DryIoc.PropertiesAndFieldsSelector
~static DryIoc.PropertyOrFieldServiceInfo.Of(System.Reflection.MemberInfo member) -> DryIoc.PropertyOrFieldServiceInfo
~static DryIoc.ReflectionFactory.Of(System.Func<System.Type> implementationTypeProvider, DryIoc.IReuse reuse = null, DryIoc.Made made = null, DryIoc.Setup setup = null) -> DryIoc.ReflectionFactory
~static DryIoc.ReflectionFactory.Of(System.Type implementationType = null, DryIoc.IReuse reuse = null, DryIoc.Made made = null, DryIoc.Setup setup = null) -> DryIoc.ReflectionFactory
~static DryIoc.ReflectionFactory.Of(System.Type implementationType) -> DryIoc.ReflectionFactory
~static DryIoc.ReflectionFactory.Of(System.Type implementationType, DryIoc.IReuse reuse) -> DryIoc.ReflectionFactory
~static DryIoc.ReflectionTools.AddOrUpdate(this DryIoc.ImTools.ImHashMap<System.Type, object> map, System.Type t, object value) -> DryIoc.ImTools.ImHashMap<System.Type, object>
~static DryIoc.ReflectionTools.Constructor(this System.Type type, params System.Type[] args) -> System.Reflection.ConstructorInfo
~static DryIoc.ReflectionTools.Constructors(this System.Type type, bool includeNonPublic = false, bool includeStatic = false) -> System.Collections.Generic.IEnumerable<System.Reflection.ConstructorInfo>
~static DryIoc.ReflectionTools.ContainsAllGenericTypeParameters(this System.Type openGenericType, System.Type[] genericParameters) -> bool
~static DryIoc.ReflectionTools.Field(this System.Type type, string name, bool includeBase = false) -> System.Reflection.FieldInfo
~static DryIoc.ReflectionTools.GetAllMembers(this System.Type type, bool includeBase = false) -> System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo>
~static DryIoc.ReflectionTools.GetArrayElementTypeOrNull(this System.Type type) -> System.Type
~static DryIoc.ReflectionTools.GetAssembly(this System.Type type) -> System.Reflection.Assembly
~static DryIoc.ReflectionTools.GetAttributes(this System.Reflection.MemberInfo member, System.Type attributeType = null, bool inherit = false) -> System.Collections.Generic.IEnumerable<System.Attribute>
~static DryIoc.ReflectionTools.GetAttributes(this System.Reflection.ParameterInfo parameter, System.Type attributeType = null, bool inherit = false) -> System.Collections.Generic.IEnumerable<System.Attribute>
~static DryIoc.ReflectionTools.GetAttributes(this System.Type type, System.Type attributeType = null, bool inherit = false) -> System.Attribute[]
~static DryIoc.ReflectionTools.GetConstructorOrNull(this System.Type type, bool includeNonPublic = false, params System.Type[] args) -> System.Reflection.ConstructorInfo
~static DryIoc.ReflectionTools.GetConstructorOrNull(this System.Type type, params System.Type[] args) -> System.Reflection.ConstructorInfo
~static DryIoc.ReflectionTools.GetConversionOperatorOrNull(this System.Type sourceType, System.Type targetType) -> System.Reflection.MethodInfo
~static DryIoc.ReflectionTools.GetDefaultValueExpression(this System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~static DryIoc.ReflectionTools.GetFieldOrNull(this System.Type type, string name, bool includeBase = false) -> System.Reflection.FieldInfo
~static DryIoc.ReflectionTools.GetGenericDefinitionOrNull(this System.Type type) -> System.Type
~static DryIoc.ReflectionTools.GetImplementedTypes(this System.Type sourceType, DryIoc.ReflectionTools.AsImplementedType asImplementedType = DryIoc.ReflectionTools.AsImplementedType.None) -> System.Type[]
~static DryIoc.ReflectionTools.GetLoadedTypes(this System.Reflection.Assembly assembly) -> System.Type[]
~static DryIoc.ReflectionTools.GetMembers<TMember>(this System.Type type, System.Func<System.Reflection.TypeInfo, System.Collections.Generic.IEnumerable<TMember>> getMembers, bool includeBase = false) -> System.Collections.Generic.IEnumerable<TMember>
~static DryIoc.ReflectionTools.GetMethodOrNull(this System.Type type, string name, params System.Type[] paramTypes) -> System.Reflection.MethodInfo
~static DryIoc.ReflectionTools.GetPropertyOrNull(this System.Type type, string name, bool includeBase = false) -> System.Reflection.PropertyInfo
~static DryIoc.ReflectionTools.GetReturnTypeOrDefault(this System.Reflection.MemberInfo member) -> System.Type
~static DryIoc.ReflectionTools.GetSingleConstructorOrNull(this System.Type type, bool includeNonPublic = false) -> System.Reflection.ConstructorInfo
~static DryIoc.ReflectionTools.GetSingleMethodOrNull(this System.Type type, string name, bool includeNonPublic = false) -> System.Reflection.MethodInfo
~static DryIoc.ReflectionTools.GetSourceConversionOperatorToTarget(this System.Type sourceType, System.Type targetType) -> System.Reflection.MethodInfo
~static DryIoc.ReflectionTools.GetTargetConversionOperatorFromSource(this System.Type sourceType, System.Type targetType) -> System.Reflection.MethodInfo
~static DryIoc.ReflectionTools.GetValueOrDefault(this DryIoc.ImTools.ImHashMap<System.Type, object> map, System.Type t) -> object
~static DryIoc.ReflectionTools.HasConversionOperatorTo(this System.Type sourceType, System.Type targetType) -> bool
~static DryIoc.ReflectionTools.IsAssignableTo(this System.Type type, System.Type other) -> bool
~static DryIoc.ReflectionTools.IsAssignableTo<T>(this System.Type type) -> bool
~static DryIoc.ReflectionTools.IsAssignableVariantGenericTypeFrom(this System.Type to, System.Type from) -> bool
~static DryIoc.ReflectionTools.IsBackingField(this System.Reflection.FieldInfo field) -> bool
~static DryIoc.ReflectionTools.IsClosedGeneric(this System.Type type) -> bool
~static DryIoc.ReflectionTools.IsClosureType(this System.Type type) -> bool
~static DryIoc.ReflectionTools.IsCompilerGenerated(this System.Type type) -> bool
~static DryIoc.ReflectionTools.IsExplicitlyImplemented(this System.Reflection.PropertyInfo property) -> bool
~static DryIoc.ReflectionTools.IsIndexer(this System.Reflection.PropertyInfo property) -> bool
~static DryIoc.ReflectionTools.IsOpenGeneric(this System.Type type) -> bool
~static DryIoc.ReflectionTools.IsPrimitive(this System.Type type, bool orArrayOfPrimitives = false) -> bool
~static DryIoc.ReflectionTools.IsPublicOrNestedPublic(this System.Type type) -> bool
~static DryIoc.ReflectionTools.IsStatic(this System.Reflection.MemberInfo member) -> bool
~static DryIoc.ReflectionTools.IsStatic(this System.Reflection.PropertyInfo property, bool includeNonPublic = false) -> bool
~static DryIoc.ReflectionTools.IsStatic(this System.Type type) -> bool
~static DryIoc.ReflectionTools.IsTypeOf(this System.Type type, object obj) -> bool
~static DryIoc.ReflectionTools.Method(this System.Type type, string name, params System.Type[] args) -> System.Reflection.MethodInfo
~static DryIoc.ReflectionTools.Property(this System.Type type, string name, bool includeBase = false) -> System.Reflection.PropertyInfo
~static DryIoc.ReflectionTools.PublicAndInternalConstructors(this System.Type type) -> System.Collections.Generic.IEnumerable<System.Reflection.ConstructorInfo>
~static DryIoc.ReflectionTools.PublicConstructors(this System.Type type) -> System.Reflection.ConstructorInfo[]
~static DryIoc.ReflectionTools.SingleConstructor(this System.Type type, bool includeNonPublic = false) -> System.Reflection.ConstructorInfo
~static DryIoc.ReflectionTools.SingleMethod(this System.Type type, string name, bool includeNonPublic = false) -> System.Reflection.MethodInfo
~static DryIoc.ReflectionTools.TryRethrowWithPreservedStackTrace(this System.Exception ex) -> System.Exception
~static DryIoc.Registrator.GetImplementationTypes(this System.Reflection.Assembly assembly) -> System.Collections.Generic.IEnumerable<System.Type>
~static DryIoc.Registrator.GetImplementationTypes(this System.Reflection.Assembly assembly, System.Func<System.Type, bool> condition) -> System.Collections.Generic.IEnumerable<System.Type>
~static DryIoc.Registrator.GetImplementedServiceTypes(this System.Type type, bool nonPublicServiceTypes = false) -> System.Type[]
~static DryIoc.Registrator.GetRegisterManyImplementedServiceTypes(this System.Type type, bool nonPublicServiceTypes = false) -> System.Type[]
~static DryIoc.Registrator.ImplementsServiceType(this System.Type type, System.Type serviceType) -> bool
~static DryIoc.Registrator.ImplementsServiceType<TService>(this System.Type type) -> bool
~static DryIoc.Registrator.Interfaces -> System.Func<System.Type, bool>
~static DryIoc.Registrator.IsExcludedGeneralPurposeServiceType(this System.Type type) -> bool
~static DryIoc.Registrator.IsImplementationType(this System.Type type) -> bool
~static DryIoc.Registrator.IsImplementingServiceType(this System.Type type, System.Type serviceType) -> bool
~static DryIoc.Registrator.IsRegistered(this DryIoc.IRegistrator registrator, System.Type serviceType, object serviceKey = null, DryIoc.FactoryType factoryType = DryIoc.FactoryType.Service, System.Func<DryIoc.Factory, bool> condition = null) -> bool
~static DryIoc.Registrator.IsRegistered<TService>(this DryIoc.IRegistrator registrator, object serviceKey = null, DryIoc.FactoryType factoryType = DryIoc.FactoryType.Service, System.Func<DryIoc.Factory, bool> condition = null) -> bool
~static DryIoc.Registrator.IsServiceType(this System.Type type) -> bool
~static DryIoc.Registrator.Register(this DryIoc.IRegistrator registrator, System.Type serviceAndMayBeImplementationType, DryIoc.IReuse reuse = null, DryIoc.Made made = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.Register(this DryIoc.IRegistrator registrator, System.Type serviceType, DryIoc.Factory factory, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.Register(this DryIoc.IRegistrator registrator, System.Type serviceType, System.Type implementationType, DryIoc.IReuse reuse = null, DryIoc.Made made = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.Register(this DryIoc.IRegistrator registrator, System.Type serviceType, System.Type implementationType, DryIoc.IReuse reuse) -> void
~static DryIoc.Registrator.Register<TImplementation>(this DryIoc.IRegistrator registrator, DryIoc.IReuse reuse = null, DryIoc.Made made = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.Register<TService, TImplementation>(this DryIoc.IRegistrator registrator, DryIoc.IReuse reuse = null, DryIoc.Made made = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.Register<TService, TMadeResult>(this DryIoc.IRegistrator registrator, DryIoc.Made.TypedMade<TMadeResult> made, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.Register<TService>(this DryIoc.IRegistrator registrator, DryIoc.Made.TypedMade<TService> made, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterDelegate(this DryIoc.IRegistrator r, System.Type serviceType, System.Type dep1Type, System.Type dep2Type, System.Func<object, object, object> factory, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterDelegate(this DryIoc.IRegistrator r, System.Type serviceType, System.Type dep1Type, System.Type dep2Type, System.Type dep3Type, System.Func<object, object, object, object> factory, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterDelegate(this DryIoc.IRegistrator r, System.Type serviceType, System.Type dep1Type, System.Type dep2Type, System.Type dep3Type, System.Type dep4Type, System.Func<object, object, object, object, object> factory, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterDelegate(this DryIoc.IRegistrator r, System.Type serviceType, System.Type dep1Type, System.Type dep2Type, System.Type dep3Type, System.Type dep4Type, System.Type dep5Type, System.Func<object, object, object, object, object, object> factory, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterDelegate(this DryIoc.IRegistrator r, System.Type serviceType, System.Type dep1Type, System.Type dep2Type, System.Type dep3Type, System.Type dep4Type, System.Type dep5Type, System.Type dep6Type, System.Func<object, object, object, object, object, object, object> factory, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterDelegate(this DryIoc.IRegistrator r, System.Type serviceType, System.Type dep1Type, System.Type dep2Type, System.Type dep3Type, System.Type dep4Type, System.Type dep5Type, System.Type dep6Type, System.Type dep7Type, System.Func<object, object, object, object, object, object, object, object> factory, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterDelegate(this DryIoc.IRegistrator r, System.Type serviceType, System.Type depType, System.Func<object, object> factory, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterDelegate(this DryIoc.IRegistrator registrator, System.Type serviceType, System.Func<DryIoc.IResolverContext, object> factoryDelegate, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterDelegate<TDep1, TDep2, TDep3, TDep4, TDep5, TDep6, TDep7, TService>(this DryIoc.IRegistrator r, System.Func<TDep1, TDep2, TDep3, TDep4, TDep5, TDep6, TDep7, TService> factory, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterDelegate<TDep1, TDep2, TDep3, TDep4, TDep5, TDep6, TDep7>(this DryIoc.IRegistrator r, System.Type serviceType, System.Func<TDep1, TDep2, TDep3, TDep4, TDep5, TDep6, TDep7, object> factory, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterDelegate<TDep1, TDep2, TDep3, TDep4, TDep5, TDep6, TService>(this DryIoc.IRegistrator r, System.Func<TDep1, TDep2, TDep3, TDep4, TDep5, TDep6, TService> factory, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterDelegate<TDep1, TDep2, TDep3, TDep4, TDep5, TDep6>(this DryIoc.IRegistrator r, System.Type serviceType, System.Func<TDep1, TDep2, TDep3, TDep4, TDep5, TDep6, object> factory, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterDelegate<TDep1, TDep2, TDep3, TDep4, TDep5, TService>(this DryIoc.IRegistrator r, System.Func<TDep1, TDep2, TDep3, TDep4, TDep5, TService> factory, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterDelegate<TDep1, TDep2, TDep3, TDep4, TDep5>(this DryIoc.IRegistrator r, System.Type serviceType, System.Func<TDep1, TDep2, TDep3, TDep4, TDep5, object> factory, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterDelegate<TDep1, TDep2, TDep3, TDep4, TService>(this DryIoc.IRegistrator r, System.Func<TDep1, TDep2, TDep3, TDep4, TService> factory, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterDelegate<TDep1, TDep2, TDep3, TDep4>(this DryIoc.IRegistrator r, System.Type serviceType, System.Func<TDep1, TDep2, TDep3, TDep4, object> factory, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterDelegate<TDep1, TDep2, TDep3, TService>(this DryIoc.IRegistrator r, System.Func<TDep1, TDep2, TDep3, TService> factory, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterDelegate<TDep1, TDep2, TDep3>(this DryIoc.IRegistrator r, System.Type serviceType, System.Func<TDep1, TDep2, TDep3, object> factory, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterDelegate<TDep1, TDep2, TService>(this DryIoc.IRegistrator r, System.Func<TDep1, TDep2, TService> factory, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterDelegate<TDep1, TDep2>(this DryIoc.IRegistrator r, System.Type serviceType, System.Func<TDep1, TDep2, object> factory, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterDelegate<TDep1, TService>(this DryIoc.IRegistrator r, System.Func<TDep1, TService> factory, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterDelegate<TDep1>(this DryIoc.IRegistrator r, System.Type serviceType, System.Func<TDep1, object> factory, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterDelegate<TService>(this DryIoc.IRegistrator r, System.Func<TService> factory, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterDelegate<TService>(this DryIoc.IRegistrator registrator, System.Func<DryIoc.IResolverContext, TService> factoryDelegate, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterDelegateDecorator<TService>(this DryIoc.IRegistrator registrator, System.Func<DryIoc.IResolverContext, System.Func<TService, TService>> getDecorator, System.Func<DryIoc.Request, bool> condition = null) -> void
~static DryIoc.Registrator.RegisterDisposer<TService>(this DryIoc.IRegistrator registrator, System.Action<TService> dispose, System.Func<DryIoc.Request, bool> condition = null) -> void
~static DryIoc.Registrator.RegisterInitializer<TTarget>(this DryIoc.IRegistrator registrator, System.Action<TTarget, DryIoc.IResolverContext> initialize, DryIoc.IReuse reuse, System.Func<DryIoc.Request, bool> condition = null) -> void
~static DryIoc.Registrator.RegisterInitializer<TTarget>(this DryIoc.IRegistrator registrator, System.Action<TTarget, DryIoc.IResolverContext> initialize, System.Func<DryIoc.Request, bool> condition = null) -> void
~static DryIoc.Registrator.RegisterInstance(this DryIoc.IRegistrator registrator, bool isChecked, System.Type serviceType, object instance, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, DryIoc.Setup setup = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterInstance(this DryIoc.IRegistrator registrator, System.Type serviceType, object instance, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, DryIoc.Setup setup = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterInstance<T>(this DryIoc.IRegistrator registrator, T instance, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, DryIoc.Setup setup = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterInstanceMany(this DryIoc.IRegistrator registrator, System.Type implType, object instance, bool nonPublicServiceTypes = false, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, DryIoc.Setup setup = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterInstanceMany(this DryIoc.IRegistrator registrator, System.Type[] serviceTypes, object instance, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, DryIoc.Setup setup = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterInstanceMany<T>(this DryIoc.IRegistrator registrator, T instance, bool nonPublicServiceTypes = false, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, DryIoc.Setup setup = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterMany(this DryIoc.IRegistrator registrator, System.Collections.Generic.IEnumerable<System.Reflection.Assembly> implTypeAssemblies, System.Func<System.Type, bool> serviceTypeCondition, DryIoc.IReuse reuse = null, DryIoc.Made made = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, bool nonPublicServiceTypes = false, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterMany(this DryIoc.IRegistrator registrator, System.Collections.Generic.IEnumerable<System.Reflection.Assembly> implTypeAssemblies, System.Func<System.Type, System.Type[]> getServiceTypes, System.Func<System.Type, DryIoc.Factory> getImplFactory = null, System.Func<System.Type, System.Type, object> getServiceKey = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null) -> void
~static DryIoc.Registrator.RegisterMany(this DryIoc.IRegistrator registrator, System.Collections.Generic.IEnumerable<System.Type> implTypes, DryIoc.IReuse reuse = null, DryIoc.Made made = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, System.Func<System.Type, bool> serviceTypeCondition = null, bool nonPublicServiceTypes = false, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterMany(this DryIoc.IRegistrator registrator, System.Collections.Generic.IEnumerable<System.Type> implTypes, System.Func<System.Type, System.Type[]> getServiceTypes, System.Func<System.Type, DryIoc.Factory> getImplFactory = null, System.Func<System.Type, System.Type, object> getServiceKey = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null) -> void
~static DryIoc.Registrator.RegisterMany(this DryIoc.IRegistrator registrator, System.Type[] serviceTypes, System.Type implType, DryIoc.IReuse reuse = null, DryIoc.Made made = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterMany<TImplementation>(this DryIoc.IRegistrator registrator, DryIoc.IReuse reuse = null, DryIoc.Made made = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, System.Func<System.Type, bool> serviceTypeCondition = null, bool nonPublicServiceTypes = false, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterMany<TMadeResult>(this DryIoc.IRegistrator registrator, DryIoc.Made.TypedMade<TMadeResult> made, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, System.Func<System.Type, bool> serviceTypeCondition = null, bool nonPublicServiceTypes = false, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterManyIgnoreNoServicesWereRegistered(this DryIoc.IRegistrator registrator, System.Collections.Generic.IEnumerable<System.Type> implTypes, System.Func<System.Type, System.Type[]> getServiceTypes, System.Func<System.Type, DryIoc.Factory> getImplFactory = null, System.Func<System.Type, System.Type, object> getServiceKey = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null) -> void
~static DryIoc.Registrator.RegisterMapping(this DryIoc.IRegistrator registrator, System.Type serviceType, System.Type registeredServiceType, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered, object serviceKey = null, object registeredServiceKey = null, DryIoc.FactoryType factoryType = DryIoc.FactoryType.Service) -> void
~static DryIoc.Registrator.RegisterMapping(this DryIoc.IRegistrator registrator, System.Type serviceType, System.Type registeredServiceType, object serviceKey = null, object registeredServiceKey = null, DryIoc.FactoryType factoryType = DryIoc.FactoryType.Service) -> void
~static DryIoc.Registrator.RegisterMapping<TService, TRegisteredService>(this DryIoc.IContainer container, DryIoc.IfAlreadyRegistered ifAlreadyRegistered, object serviceKey = null, object registeredServiceKey = null) -> void
~static DryIoc.Registrator.RegisterMapping<TService, TRegisteredService>(this DryIoc.IRegistrator registrator, object serviceKey = null, object registeredServiceKey = null, DryIoc.FactoryType factoryType = DryIoc.FactoryType.Service) -> void
~static DryIoc.Registrator.RegisterPlaceholder(this DryIoc.IRegistrator registrator, System.Type serviceType, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterPlaceholder<TService>(this DryIoc.IRegistrator registrator, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.ToFactory(this System.Type implType) -> DryIoc.ReflectionFactory
~static DryIoc.Registrator.ToFactory(this System.Type implType, DryIoc.IReuse reuse = null, DryIoc.Made made = null, DryIoc.Setup setup = null) -> DryIoc.ReflectionFactory
~static DryIoc.Registrator.ToFactoryDelegate(this object result, DryIoc.IResolverContext _) -> object
~static DryIoc.Registrator.ToFactoryDelegate<TService>(this System.Func<DryIoc.IResolverContext, TService> f, DryIoc.IResolverContext r) -> object
~static DryIoc.Registrator.TrackDisposable(this DryIoc.IRegistrator registrator, object instance) -> void
~static DryIoc.Registrator.TrackDisposable(this DryIoc.IRegistrator registrator, object instance, DryIoc.Setup setup) -> void
~static DryIoc.Registrator.Unregister(this DryIoc.IRegistrator registrator, System.Type serviceType, object serviceKey = null, DryIoc.FactoryType factoryType = DryIoc.FactoryType.Service, System.Func<DryIoc.Factory, bool> condition = null) -> void
~static DryIoc.Registrator.Unregister<TService>(this DryIoc.IRegistrator registrator, object serviceKey = null, DryIoc.FactoryType factoryType = DryIoc.FactoryType.Service, System.Func<DryIoc.Factory, bool> condition = null) -> void
~static DryIoc.Registrator.Use(this DryIoc.IContainer c, System.Type serviceType, DryIoc.FactoryDelegate factory) -> void
~static DryIoc.Registrator.Use(this DryIoc.IContainer c, System.Type serviceType, object instance) -> void
~static DryIoc.Registrator.Use(this DryIoc.IRegistrator r, System.Type serviceType, DryIoc.FactoryDelegate factory) -> void
~static DryIoc.Registrator.Use(this DryIoc.IRegistrator r, System.Type serviceType, object instance) -> void
~static DryIoc.Registrator.Use(this DryIoc.IResolverContext r, System.Type serviceType, DryIoc.FactoryDelegate factory) -> void
~static DryIoc.Registrator.Use(this DryIoc.IResolverContext r, System.Type serviceType, object instance) -> void
~static DryIoc.Registrator.Use<TService>(this DryIoc.IContainer c, DryIoc.FactoryDelegate factory) -> void
~static DryIoc.Registrator.Use<TService>(this DryIoc.IContainer c, System.Func<DryIoc.IResolverContext, TService> factory) -> void
~static DryIoc.Registrator.Use<TService>(this DryIoc.IContainer c, TService instance) -> void
~static DryIoc.Registrator.Use<TService>(this DryIoc.IRegistrator r, DryIoc.FactoryDelegate factory) -> void
~static DryIoc.Registrator.Use<TService>(this DryIoc.IRegistrator r, System.Func<DryIoc.IResolverContext, TService> factory) -> void
~static DryIoc.Registrator.Use<TService>(this DryIoc.IRegistrator r, TService instance) -> void
~static DryIoc.Registrator.Use<TService>(this DryIoc.IResolverContext r, DryIoc.FactoryDelegate factory) -> void
~static DryIoc.Registrator.Use<TService>(this DryIoc.IResolverContext r, System.Func<DryIoc.IResolverContext, TService> factory) -> void
~static DryIoc.Registrator.Use<TService>(this DryIoc.IResolverContext r, TService instance) -> void
~static DryIoc.Request.Create(DryIoc.IContainer container, DryIoc.ServiceInfo serviceInfo, DryIoc.Request preResolveParent = null, DryIoc.RequestFlags flags = DryIoc.RequestFlags.Default, object[] inputArgs = null) -> DryIoc.Request
~static DryIoc.Request.Create(DryIoc.IContainer container, System.Type serviceType, object serviceKey = null, DryIoc.IfUnresolved ifUnresolved = DryIoc.IfUnresolved.Throw, System.Type requiredServiceType = null, DryIoc.Request preResolveParent = null, DryIoc.RequestFlags flags = DryIoc.RequestFlags.Default, object[] inputArgs = null) -> DryIoc.Request
~static DryIoc.Request.CreateResolutionRoot(DryIoc.IContainer container, System.Type serviceType, DryIoc.IfUnresolved ifUnresolved = DryIoc.IfUnresolved.Throw) -> DryIoc.Request
~static DryIoc.RequestTools.MatchFactoryConditionAndMetadata(this DryIoc.Request request, DryIoc.ServiceDetails details, DryIoc.Factory factory) -> bool
~static DryIoc.RequestTools.MatchFactoryReuse(this DryIoc.Request r, DryIoc.Factory f) -> bool
~static DryIoc.RequestTools.MatchGeneratedFactory(this DryIoc.Request r, DryIoc.Factory f) -> bool
~static DryIoc.RequestTools.MatchGeneratedFactoryByReuseAndConditionOrNull(this DryIoc.Request r, DryIoc.Factory f) -> DryIoc.Factory
~static DryIoc.ResolutionScopeName.Of(System.Type serviceType = null, object serviceKey = null) -> DryIoc.ResolutionScopeName
~static DryIoc.ResolutionScopeName.Of<TService>(object serviceKey = null) -> DryIoc.ResolutionScopeName
~static DryIoc.Resolver.CreateResolutionExpression(DryIoc.Request request, bool openResolutionScope = false, bool asResolutionCall = false) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~static DryIoc.Resolver.New(this DryIoc.IResolver resolver, System.Type concreteType, DryIoc.Made made = null, DryIoc.RegistrySharing registrySharing = DryIoc.RegistrySharing.CloneButKeepCache) -> object
~static DryIoc.Resolver.New<T>(this DryIoc.IResolver resolver, DryIoc.Made made = null, DryIoc.RegistrySharing registrySharing = DryIoc.RegistrySharing.CloneButKeepCache) -> T
~static DryIoc.Resolver.New<T>(this DryIoc.IResolver resolver, DryIoc.Made.TypedMade<T> made, DryIoc.RegistrySharing registrySharing = DryIoc.RegistrySharing.CloneButKeepCache) -> T
~static DryIoc.Resolver.Resolve(this DryIoc.IResolver resolver, System.Type serviceType) -> object
~static DryIoc.Resolver.Resolve(this DryIoc.IResolver resolver, System.Type serviceType, bool ifUnresolvedReturnDefault) -> object
~static DryIoc.Resolver.Resolve(this DryIoc.IResolver resolver, System.Type serviceType, DryIoc.IfUnresolved ifUnresolved) -> object
~static DryIoc.Resolver.Resolve(this DryIoc.IResolver resolver, System.Type serviceType, object serviceKey, DryIoc.IfUnresolved ifUnresolved = DryIoc.IfUnresolved.Throw, System.Type requiredServiceType = null, object[] args = null) -> object
~static DryIoc.Resolver.Resolve(this DryIoc.IResolver resolver, System.Type serviceType, object[] args, DryIoc.IfUnresolved ifUnresolved = DryIoc.IfUnresolved.Throw, System.Type requiredServiceType = null, object serviceKey = null) -> object
~static DryIoc.Resolver.Resolve(this DryIoc.IResolver resolver, System.Type serviceType, System.Type requiredServiceType, DryIoc.IfUnresolved ifUnresolved = DryIoc.IfUnresolved.Throw, object[] args = null, object serviceKey = null) -> object
~static DryIoc.Resolver.Resolve<TService, TRequiredService>(this DryIoc.IResolver resolver, DryIoc.IfUnresolved ifUnresolved = DryIoc.IfUnresolved.Throw, object[] args = null, object serviceKey = null) -> TService
~static DryIoc.Resolver.Resolve<TService>(this DryIoc.IResolver resolver, bool ifUnresolvedReturnDefault) -> object
~static DryIoc.Resolver.Resolve<TService>(this DryIoc.IResolver resolver, DryIoc.IfUnresolved ifUnresolved = DryIoc.IfUnresolved.Throw) -> TService
~static DryIoc.Resolver.Resolve<TService>(this DryIoc.IResolver resolver, object serviceKey, DryIoc.IfUnresolved ifUnresolved = DryIoc.IfUnresolved.Throw, System.Type requiredServiceType = null, object[] args = null) -> TService
~static DryIoc.Resolver.Resolve<TService>(this DryIoc.IResolver resolver, object[] args, DryIoc.IfUnresolved ifUnresolved = DryIoc.IfUnresolved.Throw, System.Type requiredServiceType = null, object serviceKey = null) -> TService
~static DryIoc.Resolver.Resolve<TService>(this DryIoc.IResolver resolver, System.Type requiredServiceType, DryIoc.IfUnresolved ifUnresolved = DryIoc.IfUnresolved.Throw, object[] args = null, object serviceKey = null) -> TService
~static DryIoc.Resolver.ResolveMany(this DryIoc.IResolver resolver, System.Type serviceType, DryIoc.ResolveManyBehavior behavior = DryIoc.ResolveManyBehavior.AsLazyEnumerable, object[] args = null, object serviceKey = null) -> System.Collections.Generic.IEnumerable<object>
~static DryIoc.Resolver.ResolveMany<TService>(this DryIoc.IResolver resolver, System.Type requiredServiceType = null, DryIoc.ResolveManyBehavior behavior = DryIoc.ResolveManyBehavior.AsLazyEnumerable, object[] args = null, object serviceKey = null) -> System.Collections.Generic.IEnumerable<TService>
~static DryIoc.ResolverContext.GetCurrentScope(this DryIoc.IResolverContext r, bool throwIfNotFound) -> DryIoc.IScope
~static DryIoc.ResolverContext.GetCurrentScopeOrThrow(this DryIoc.IResolverContext r) -> DryIoc.IScope
~static DryIoc.ResolverContext.GetNamedScope(this DryIoc.IResolverContext r, object name, bool throwIfNotFound) -> DryIoc.IScope
~static DryIoc.ResolverContext.GetRootOrSelfExpr(DryIoc.Request request) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~static DryIoc.ResolverContext.IsScoped(this DryIoc.IResolverContext r) -> bool
~static DryIoc.ResolverContext.IsUsed(this DryIoc.IResolverContext r, System.Type serviceType) -> bool
~static DryIoc.ResolverContext.IsUsed<TService>(this DryIoc.IResolverContext r) -> bool
~static DryIoc.ResolverContext.OpenScope(this DryIoc.IResolverContext r) -> DryIoc.IResolverContext
~static DryIoc.ResolverContext.OpenScope(this DryIoc.IResolverContext r, object name, bool trackInParent = false) -> DryIoc.IResolverContext
~static DryIoc.ResolverContext.RootOrSelf(this DryIoc.IResolverContext r) -> DryIoc.IResolverContext
~static DryIoc.ResolverContext.TrackDisposable<T>(this DryIoc.IResolverContext r, T instance, int disposalOrder = 0) -> T
~static DryIoc.Reuse.InCurrentNamedScope(object name = null) -> DryIoc.IReuse
~static DryIoc.Reuse.InResolutionScopeOf(System.Type assignableFromServiceType = null, object serviceKey = null) -> DryIoc.IReuse
~static DryIoc.Reuse.InResolutionScopeOf<TAssignableFromServiceType>(object serviceKey = null) -> DryIoc.IReuse
~static DryIoc.Reuse.ScopedTo(object name) -> DryIoc.IReuse
~static DryIoc.Reuse.ScopedTo(object name, bool scopedOrSingleton, int lifespan) -> DryIoc.IReuse
~static DryIoc.Reuse.ScopedTo(params object[] names) -> DryIoc.IReuse
~static DryIoc.Reuse.ScopedTo(System.Type serviceType = null, object serviceKey = null) -> DryIoc.IReuse
~static DryIoc.Reuse.ScopedTo<TService>(object serviceKey = null) -> DryIoc.IReuse
~static DryIoc.Reuse.ScopedToService(System.Type serviceType = null, object serviceKey = null) -> DryIoc.IReuse
~static DryIoc.Reuse.ScopedToService<TService>(object serviceKey = null) -> DryIoc.IReuse
~static DryIoc.Reuse.WebRequestScopeName -> string
~static DryIoc.Rules.AutoFallbackDynamicRegistrations(System.Func<System.Type, object, System.Collections.Generic.IEnumerable<System.Type>> getImplementationTypes, System.Func<System.Type, DryIoc.Factory> factory = null) -> DryIoc.Rules.DynamicRegistrationProvider
~static DryIoc.Rules.AutoRegisterUnknownServiceRule(System.Collections.Generic.IEnumerable<System.Type> implTypes, System.Func<DryIoc.IReuse, DryIoc.Request, DryIoc.IReuse> changeDefaultReuse = null, System.Func<DryIoc.Request, bool> condition = null) -> DryIoc.Rules.UnknownServiceResolver
~static DryIoc.Rules.AutoResolveConcreteTypeRule(System.Func<DryIoc.Request, bool> condition = null) -> DryIoc.Rules.UnknownServiceResolver
~static DryIoc.Rules.ConcreteTypeDynamicRegistrations(System.Func<System.Type, object, bool> condition = null, DryIoc.IReuse reuse = null) -> DryIoc.Rules.DynamicRegistrationProvider
~static DryIoc.Rules.SelectFactoryWithTheMinReuseLifespan() -> DryIoc.Rules.FactorySelectorRule
~static DryIoc.Rules.SelectFactoryWithTheMinReuseLifespanOrLastRegistered() -> DryIoc.Rules.FactorySelectorRule
~static DryIoc.Rules.SelectKeyedOverDefaultFactory(object serviceKey) -> DryIoc.Rules.FactorySelectorRule
~static DryIoc.Rules.SelectLastRegisteredFactory() -> DryIoc.Rules.FactorySelectorRule
~static DryIoc.Scope.Of(DryIoc.IScope parent) -> DryIoc.IScope
~static DryIoc.Scope.Of(DryIoc.IScope parent, object name) -> DryIoc.IScope
~static DryIoc.Scope.Of(object name) -> DryIoc.IScope
~static DryIoc.ScopeTools.Clone(this DryIoc.IScope s) -> DryIoc.IScope
~static DryIoc.ScopeTools.IsUsed(this DryIoc.IScope s, System.Type serviceType) -> bool
~static DryIoc.ScopeTools.Use(this DryIoc.IScope s, System.Type type, object instance) -> void
~static DryIoc.ScopeTools.Use<T>(this DryIoc.IScope s, object instance) -> void
~static DryIoc.ScopeTools.UseFactory(this DryIoc.IScope s, System.Type type, DryIoc.FactoryDelegate factory) -> void
~static DryIoc.ScopeTools.UseFactory<T>(this DryIoc.IScope s, DryIoc.FactoryDelegate factory) -> void
~static DryIoc.ServiceDetails.Of(DryIoc.IfUnresolved ifUnresolved) -> DryIoc.ServiceDetails
~static DryIoc.ServiceDetails.Of(object value) -> DryIoc.ServiceDetails
~static DryIoc.ServiceDetails.Of(System.Type requiredServiceType = null, object serviceKey = null, DryIoc.IfUnresolved ifUnresolved = DryIoc.IfUnresolved.Throw, object defaultValue = null, string metadataKey = null, object metadata = null) -> DryIoc.ServiceDetails
~static DryIoc.ServiceInfo.Of(System.Type serviceType) -> DryIoc.ServiceInfo
~static DryIoc.ServiceInfo.Of(System.Type serviceType, DryIoc.IfUnresolved ifUnresolved) -> DryIoc.ServiceInfo
~static DryIoc.ServiceInfo.Of(System.Type serviceType, DryIoc.IfUnresolved ifUnresolved, object serviceKey) -> DryIoc.ServiceInfo
~static DryIoc.ServiceInfo.Of(System.Type serviceType, DryIoc.ServiceDetails details) -> DryIoc.ServiceInfo
~static DryIoc.ServiceInfo.Of(System.Type serviceType, object serviceKey) -> DryIoc.ServiceInfo
~static DryIoc.ServiceInfo.Of(System.Type serviceType, System.Type requiredServiceType, DryIoc.IfUnresolved ifUnresolved = DryIoc.IfUnresolved.Throw, object serviceKey = null, string metadataKey = null, object metadata = null) -> DryIoc.ServiceInfo
~static DryIoc.ServiceInfo.Of<TService>(DryIoc.IfUnresolved ifUnresolved = DryIoc.IfUnresolved.Throw, object serviceKey = null) -> DryIoc.ServiceInfo.Typed<TService>
~static DryIoc.ServiceInfo.OfServiceAndRequiredType(System.Type serviceType, System.Type requiredServiceType, DryIoc.IfUnresolved ifUnresolved = DryIoc.IfUnresolved.Throw, object serviceKey = null, string metadataKey = null, object metadata = null) -> DryIoc.ServiceInfo
~static DryIoc.ServiceInfoTools.GetActualServiceType(this DryIoc.ServiceInfo info) -> System.Type
~static DryIoc.ServiceInfoTools.InheritInfoFromDependencyOwner(this DryIoc.ServiceInfo dependency, System.Type ownerServiceType, DryIoc.ServiceDetails ownerDetails, DryIoc.IContainer container, DryIoc.FactoryType ownerType = DryIoc.FactoryType.Service) -> DryIoc.ServiceInfo
~static DryIoc.ServiceInfoTools.InheritInfoFromDependencyOwner(this System.Type serviceType, DryIoc.ServiceInfo owner, DryIoc.IContainer container, DryIoc.FactoryType ownerFactoryType = DryIoc.FactoryType.Service) -> DryIoc.ServiceInfo
~static DryIoc.ServiceInfoTools.InheritInfoFromDependencyOwner(this System.Type serviceType, System.Type ownerServiceType, DryIoc.ServiceDetails ownerDetails, DryIoc.IContainer container, DryIoc.FactoryType ownerType = DryIoc.FactoryType.Service) -> object
~static DryIoc.ServiceInfoTools.Print(this System.Text.StringBuilder s, DryIoc.ServiceInfo info) -> System.Text.StringBuilder
~static DryIoc.ServiceInfoTools.WithDetails<T>(this T serviceInfo, DryIoc.ServiceDetails details) -> T
~static DryIoc.ServiceInfoTools.WithIfUnresolved(this DryIoc.ServiceInfo source, DryIoc.IfUnresolved ifUnresolved) -> DryIoc.ServiceInfo
~static DryIoc.ServiceInfoTools.WithType(this DryIoc.ServiceInfo source, System.Type serviceType) -> DryIoc.ServiceInfo
~static DryIoc.Setup.DecoratorOf(System.Type decorateeType = null, int order = 0, bool useDecorateeReuse = false, bool openResolutionScope = false, bool asResolutionCall = false, bool preventDisposal = false, bool weaklyReferenced = false, bool allowDisposableTransient = false, bool trackDisposableTransient = false, int disposalOrder = 0, object decorateeServiceKey = null) -> DryIoc.Setup
~static DryIoc.Setup.DecoratorOf<TDecoratee>(int order = 0, bool useDecorateeReuse = false, bool openResolutionScope = false, bool asResolutionCall = false, bool preventDisposal = false, bool weaklyReferenced = false, bool allowDisposableTransient = false, bool trackDisposableTransient = false, int disposalOrder = 0, object decorateeServiceKey = null) -> DryIoc.Setup
~static DryIoc.Setup.DecoratorWith(System.Func<DryIoc.Request, bool> condition = null, int order = 0, bool useDecorateeReuse = false, bool openResolutionScope = false, bool asResolutionCall = false, bool preventDisposal = false, bool weaklyReferenced = false, bool allowDisposableTransient = false, bool trackDisposableTransient = false, int disposalOrder = 0, bool avoidResolutionScopeTracking = false) -> DryIoc.Setup
~static DryIoc.Setup.GetDecorateeCondition(System.Type decorateeType, object decorateeServiceKey = null, System.Func<DryIoc.Request, bool> condition = null) -> System.Func<DryIoc.Request, bool>
~static DryIoc.Setup.With(object metadataOrFuncOfMetadata = null, System.Func<DryIoc.Request, bool> condition = null, bool openResolutionScope = false, bool asResolutionCall = false, bool asResolutionRoot = false, bool preventDisposal = false, bool weaklyReferenced = false, bool allowDisposableTransient = false, bool trackDisposableTransient = false, bool useParentReuse = false, int disposalOrder = 0, bool preferInSingleServiceResolve = false, bool avoidResolutionScopeTracking = false) -> DryIoc.Setup
~static DryIoc.Setup.WrapperWith(int wrappedServiceTypeArgIndex = -1, bool alwaysWrapsRequiredServiceType = false, System.Func<System.Type, System.Type> unwrap = null, bool openResolutionScope = false, bool asResolutionCall = false, bool preventDisposal = false, bool weaklyReferenced = false, bool allowDisposableTransient = false, bool trackDisposableTransient = false, bool useParentReuse = false, System.Func<DryIoc.Request, bool> condition = null, int disposalOrder = 0, bool avoidResolutionScopeTracking = false) -> DryIoc.Setup
~static DryIoc.Throw.For<T>(bool throwCondition, int error, object arg0 = null, object arg1 = null, object arg2 = null, object arg3 = null) -> T
~static DryIoc.Throw.For<T>(int error, object arg0 = null, object arg1 = null, object arg2 = null, object arg3 = null) -> T
~static DryIoc.Throw.GetDefaultMessage(DryIoc.ErrorCheck error) -> string
~static DryIoc.Throw.GetMatchedException -> DryIoc.Throw.GetMatchedExceptionHandler
~static DryIoc.Throw.If(bool throwCondition, int error = -1, object arg0 = null, object arg1 = null, object arg2 = null, object arg3 = null) -> void
~static DryIoc.Throw.IfThrows<TEx, T>(System.Func<T> operation, bool throwCondition, int error, object arg0 = null, object arg1 = null, object arg2 = null, object arg3 = null) -> T
~static DryIoc.Throw.It(int error, object arg0 = null, object arg1 = null, object arg2 = null, object arg3 = null) -> object
~static DryIoc.Throw.Many(int error, params DryIoc.ContainerException[] errors) -> void
~static DryIoc.Throw.ScopeIsDisposed(DryIoc.IScope scope, DryIoc.IResolverContext r) -> void
~static DryIoc.Throw.ThrowIf<T>(this T arg0, bool throwCondition, int error = -1, object arg1 = null, object arg2 = null, object arg3 = null) -> T
~static DryIoc.Throw.ThrowIfNotImplementedBy(this System.Type arg0, System.Type arg1, int error = -1, object arg2 = null, object arg3 = null) -> System.Type
~static DryIoc.Throw.ThrowIfNotInstanceOf<T>(this T arg0, System.Type arg1, int error = -1, object arg2 = null, object arg3 = null) -> T
~static DryIoc.Throw.ThrowIfNull<T>(this T arg, int error = -1, object arg0 = null, object arg1 = null, object arg2 = null, object arg3 = null) -> T
~static DryIoc.Throw.When(bool throwIfInvalid, int error, object arg0 = null, object arg1 = null, object arg2 = null, object arg3 = null) -> bool
~static DryIoc.Throw.WithDetails(object details, int error, object arg0 = null, object arg1 = null, object arg2 = null, object arg3 = null) -> object
~static DryIoc.ThrowInGeneratedCode.WeakRefReuseWrapperGCed(this object obj) -> object
~static DryIoc.WrapperExpressionFactory.Of(System.Func<DryIoc.Request, DryIoc.Factory, DryIoc.FastExpressionCompiler.LightExpression.Expression> getServiceExpression) -> DryIoc.WrapperExpressionFactory
~static DryIoc.WrapperExpressionFactory.Of(System.Func<DryIoc.Request, DryIoc.Factory, DryIoc.FastExpressionCompiler.LightExpression.Expression> getServiceExpression, DryIoc.IReuse reuse, DryIoc.Setup setup = null) -> DryIoc.WrapperExpressionFactory
~static DryIoc.WrapperExpressionFactory.Of(System.Func<DryIoc.Request, DryIoc.Factory, DryIoc.FastExpressionCompiler.LightExpression.Expression> getServiceExpression, DryIoc.Setup setup) -> DryIoc.WrapperExpressionFactory
~static DryIoc.WrappersSupport.GetFuncOrActionExpressionOrDefault(DryIoc.Request request, DryIoc.Factory serviceFactory = null) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~static DryIoc.WrappersSupport.GetLazyExpressionOrDefault(DryIoc.Request request, DryIoc.Factory serviceFactory = null) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~static DryIoc.WrappersSupport.GetMetaExpressionOrDefault(DryIoc.Request request, DryIoc.Factory serviceFactory = null) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~static DryIoc.WrappersSupport.IsFunc(this System.Type type) -> bool
~static DryIoc.WrappersSupport.MatchMetadataType(this DryIoc.Factory f, System.Type metadataType) -> bool
~static readonly DryIoc.AsyncExecutionFlowScopeContext.Default -> DryIoc.AsyncExecutionFlowScopeContext
~static readonly DryIoc.AsyncExecutionFlowScopeContext.ScopeContextName -> string
~static readonly DryIoc.DefaultDynamicKey.Value -> DryIoc.DefaultDynamicKey
~static readonly DryIoc.DefaultKey.Value -> DryIoc.DefaultKey
~static readonly DryIoc.Error.Messages -> string[]
~static readonly DryIoc.FactoryDelegateCompiler.ResolverContextParamExpr -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~static readonly DryIoc.FactoryDelegateCompiler.ResolverContextParamExprs -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression[]
~static readonly DryIoc.FactoryMethod.ConstructorWithResolvableArguments -> DryIoc.FactoryMethodSelector
~static readonly DryIoc.FactoryMethod.ConstructorWithResolvableArgumentsIncludingNonPublic -> DryIoc.FactoryMethodSelector
~static readonly DryIoc.FactoryMethod.ConstructorWithResolvableArgumentsIncludingNonPublicWithoutSameTypeParam -> DryIoc.FactoryMethodSelector
~static readonly DryIoc.FactoryPlaceholder.Default -> DryIoc.Factory
~static readonly DryIoc.FastExpressionCompiler.LightExpression.Expression.FalseConstant -> DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression
~static readonly DryIoc.FastExpressionCompiler.LightExpression.Expression.MinusOneConstant -> DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression
~static readonly DryIoc.FastExpressionCompiler.LightExpression.Expression.NullConstant -> DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression
~static readonly DryIoc.FastExpressionCompiler.LightExpression.Expression.OneConstant -> DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression
~static readonly DryIoc.FastExpressionCompiler.LightExpression.Expression.TrueConstant -> DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression
~static readonly DryIoc.FastExpressionCompiler.LightExpression.Expression.VoidDefault -> DryIoc.FastExpressionCompiler.LightExpression.DefaultExpression
~static readonly DryIoc.FastExpressionCompiler.LightExpression.Expression.ZeroConstant -> DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression
~static readonly DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.EmptyArrayClosure -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ArrayClosure
~static readonly DryIoc.ImTools.ImHashMap<K, V>.Empty -> DryIoc.ImTools.ImHashMap<K, V>
~static readonly DryIoc.ImTools.ImList<T>.Empty -> DryIoc.ImTools.ImList<T>
~static readonly DryIoc.ImTools.ImMap<V>.Empty -> DryIoc.ImTools.ImMap<V>
~static readonly DryIoc.ImTools.ImZipper<T>.Empty -> DryIoc.ImTools.ImZipper<T>
~static readonly DryIoc.Made.Default -> DryIoc.Made
~static readonly DryIoc.Messages.EmptyResponse.Task -> System.Threading.Tasks.Task<DryIoc.Messages.EmptyResponse>
~static readonly DryIoc.Request.Empty -> DryIoc.Request
~static readonly DryIoc.Request.EmptyOpensResolutionScope -> DryIoc.Request
~static readonly DryIoc.ResolverContext.CurrentOrSingletonScopeExpr -> DryIoc.FastExpressionCompiler.LightExpression.PropertyExpression
~static readonly DryIoc.ResolverContext.CurrentScopeExpr -> DryIoc.FastExpressionCompiler.LightExpression.PropertyExpression
~static readonly DryIoc.ResolverContext.GetCurrentScopeOrThrowExpr -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static readonly DryIoc.ResolverContext.RootOrSelfExpr -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~static readonly DryIoc.ResolverContext.SingletonScopeExpr -> DryIoc.FastExpressionCompiler.LightExpression.PropertyExpression
~static readonly DryIoc.Reuse.InCurrentScope -> DryIoc.IReuse
~static readonly DryIoc.Reuse.InResolutionScope -> DryIoc.IReuse
~static readonly DryIoc.Reuse.InThread -> DryIoc.IReuse
~static readonly DryIoc.Reuse.InWebRequest -> DryIoc.IReuse
~static readonly DryIoc.Reuse.Scoped -> DryIoc.IReuse
~static readonly DryIoc.Reuse.ScopedOrSingleton -> DryIoc.IReuse
~static readonly DryIoc.Reuse.Singleton -> DryIoc.IReuse
~static readonly DryIoc.Reuse.Transient -> DryIoc.IReuse
~static readonly DryIoc.Rules.Default -> DryIoc.Rules
~static readonly DryIoc.Rules.MicrosoftDependencyInjectionRules -> DryIoc.Rules
~static readonly DryIoc.ServiceDetails.Default -> DryIoc.ServiceDetails
~static readonly DryIoc.ServiceDetails.IfUnresolvedReturnDefault -> DryIoc.ServiceDetails
~static readonly DryIoc.ServiceDetails.IfUnresolvedReturnDefaultIfNotRegistered -> DryIoc.ServiceDetails
~static readonly DryIoc.Setup.AsResolutionCallSetup -> DryIoc.Setup
~static readonly DryIoc.Setup.Decorator -> DryIoc.Setup
~static readonly DryIoc.Setup.Default -> DryIoc.Setup
~static readonly DryIoc.Setup.Wrapper -> DryIoc.Setup
~static readonly DryIoc.ThreadScopeContext.ScopeContextName -> string
~static readonly DryIoc.WrappersSupport.ActionTypes -> System.Type[]
~static readonly DryIoc.WrappersSupport.FuncTypes -> System.Type[]
~static readonly DryIoc.WrappersSupport.SupportedCollectionTypes -> System.Type[]
~static readonly DryIoc.WrappersSupport.Wrappers -> DryIoc.ImTools.ImHashMap<System.Type, object>
~virtual DryIoc.Factory.ApplyReuse(DryIoc.FastExpressionCompiler.LightExpression.Expression serviceExpr, DryIoc.Request request) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.Factory.CreateExpressionWithWrappedFactory(DryIoc.Request request, DryIoc.Factory serviceFactory) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.Factory.GeneratedFactories.get -> DryIoc.ImTools.ImHashMap<DryIoc.ImTools.KV<System.Type, object>, DryIoc.ReflectionFactory>
~virtual DryIoc.Factory.GeneratorFactory.get -> DryIoc.ReflectionFactory
~virtual DryIoc.Factory.GetDelegateOrDefault(DryIoc.Request request) -> DryIoc.FactoryDelegate
~virtual DryIoc.Factory.GetExpressionOrDefault(DryIoc.Request request) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.Factory.GetGeneratedFactoryOrDefault(DryIoc.Request request, bool ifErrorReturnDefault = false) -> DryIoc.Factory
~virtual DryIoc.Factory.ImplementationType.get -> System.Type
~virtual DryIoc.Factory.Made.get -> DryIoc.Made
~virtual DryIoc.Factory.Reuse.get -> DryIoc.IReuse
~virtual DryIoc.Factory.Setup.get -> DryIoc.Setup
~virtual DryIoc.FactoryMethod.FactoryExpression.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.FactoryMethod.FactoryServiceInfo.get -> DryIoc.ServiceInfo
~virtual DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression.Conversion.get -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~virtual DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression.Method.get -> System.Reflection.MethodInfo
~virtual DryIoc.FastExpressionCompiler.LightExpression.BlockExpression.GetArgument(int index) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.FastExpressionCompiler.LightExpression.BlockExpression.Variables.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression>
~virtual DryIoc.FastExpressionCompiler.LightExpression.ConditionalExpression.IfFalse.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.FastExpressionCompiler.LightExpression.ElementInit.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~virtual DryIoc.FastExpressionCompiler.LightExpression.ElementInit.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.FastExpressionCompiler.LightExpression.Expression.Reduce() -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.FastExpressionCompiler.LightExpression.Expression.Tag.get -> object
~virtual DryIoc.FastExpressionCompiler.LightExpression.Expression.TryCollectBoundConstants(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags config, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, bool isNestedLambda, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo rootClosure) -> bool
~virtual DryIoc.FastExpressionCompiler.LightExpression.Expression.TryEmit(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags config, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, System.Reflection.Emit.ILGenerator il, DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags parent, int byRefIndex = -1) -> bool
~virtual DryIoc.FastExpressionCompiler.LightExpression.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor visitor) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.FastExpressionCompiler.LightExpression.GotoExpression.Value.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.FastExpressionCompiler.LightExpression.IndexExpression.GetArgument(int index) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.FastExpressionCompiler.LightExpression.IndexExpression.Indexer.get -> System.Reflection.PropertyInfo
~virtual DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~virtual DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression.Expression.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression.GetArgument(int index) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.FastExpressionCompiler.LightExpression.LabelExpression.DefaultValue.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.FastExpressionCompiler.LightExpression.LabelTarget.Name.get -> string
~virtual DryIoc.FastExpressionCompiler.LightExpression.LabelTarget.Type.get -> System.Type
~virtual DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression.GetParameter(int index) -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~virtual DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression.Parameters.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression>
~virtual DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression.ReturnType.get -> System.Type
~virtual DryIoc.FastExpressionCompiler.LightExpression.MemberExpression.Expression.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.FastExpressionCompiler.LightExpression.MemberInitExpression.Bindings.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.MemberBinding>
~virtual DryIoc.FastExpressionCompiler.LightExpression.MemberInitExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~virtual DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~virtual DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression.Method.get -> System.Reflection.MethodInfo
~virtual DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression.Object.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.FastExpressionCompiler.LightExpression.NewArrayExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.FastExpressionCompiler.LightExpression.NewExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~virtual DryIoc.FastExpressionCompiler.LightExpression.NewExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.FastExpressionCompiler.LightExpression.SwitchExpression.Comparison.get -> System.Reflection.MethodInfo
~virtual DryIoc.FastExpressionCompiler.LightExpression.TryExpression.Finally.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression.Method.get -> System.Reflection.MethodInfo
~virtual DryIoc.ImTools.ImHashMap<K, V>.AddOrGetEntry(int hash, DryIoc.ImTools.ImHashMap<K, V>.Entry entry) -> DryIoc.ImTools.ImHashMap<K, V>
~virtual DryIoc.Made.FactoryMethodKnownResultType.get -> System.Type
~virtual DryIoc.Made.Parameters.get -> DryIoc.ParameterSelector
~virtual DryIoc.Made.PropertiesAndFields.get -> DryIoc.PropertiesAndFieldsSelector
~virtual DryIoc.Scope.Clone(bool withDisposables) -> DryIoc.IScope
~virtual DryIoc.Scope.Name.get -> object
~virtual DryIoc.Scope.Parent.get -> DryIoc.IScope
~virtual DryIoc.ServiceInfo.Create(System.Type serviceType, DryIoc.ServiceDetails details) -> DryIoc.ServiceInfo
~virtual DryIoc.ServiceInfo.Details.get -> DryIoc.ServiceDetails
~virtual DryIoc.Setup.Metadata.get -> object
