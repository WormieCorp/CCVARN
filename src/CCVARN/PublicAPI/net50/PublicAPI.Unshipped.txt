#nullable enable
abstract DryIoc.FastExpressionCompiler.LightExpression.Expression.NodeType.get -> System.Linq.Expressions.ExpressionType
abstract DryIoc.FastExpressionCompiler.LightExpression.MemberBinding.BindingType.get -> System.Linq.Expressions.MemberBindingType
CCVARN.DependencyInject.TypeRegistrar.RegisterLazy(System.Type! service, System.Func<object!>! factory) -> void
CCVARN.IO.ConsoleWriter.WriteWarningLine(string! format, params object![]! parameters) -> void
const DryIoc.ImTools.GrowingList.DefaultInitialCapacity = 2 -> int
const DryIoc.ImTools.GrowingList<T>.DefaultInitialCapacity = 2 -> int
const DryIoc.ImTools.PartitionedHashMap.PARTITION_COUNT_POWER_OF_TWO = 16 -> int
const DryIoc.ImTools.PartitionedHashMap.PARTITION_HASH_MASK = 15 -> int
const DryIoc.ImTools.PartitionedMap.PARTITION_COUNT_POWER_OF_TWO = 16 -> int
const DryIoc.ImTools.PartitionedMap.PARTITION_HASH_MASK = 15 -> int
const DryIoc.ImTools.Ref.RETRY_COUNT_UNTIL_THROW = 50 -> int
DryIoc.Factory.AsResolutionCall.get -> bool
DryIoc.Factory.CanCache.get -> bool
DryIoc.Factory.Factory() -> void
DryIoc.Factory.Flags.get -> DryIoc.FactoryFlags
DryIoc.Factory.Flags.set -> void
DryIoc.FactoryFlags
DryIoc.FactoryFlags.AsResolutionCall = 4 -> DryIoc.FactoryFlags
DryIoc.FactoryFlags.Default = 0 -> DryIoc.FactoryFlags
DryIoc.FactoryFlags.DoNotCache = 2 -> DryIoc.FactoryFlags
DryIoc.FactoryFlags.PleaseDontSetDoNotCache = 1 -> DryIoc.FactoryFlags
DryIoc.FastExpressionCompiler.LightExpression.ArrayIndexExpression
DryIoc.FastExpressionCompiler.LightExpression.AssignBinaryExpression
DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression.IsLifted.get -> bool
DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression.IsLiftedToNull.get -> bool
DryIoc.FastExpressionCompiler.LightExpression.BlockExpression
DryIoc.FastExpressionCompiler.LightExpression.BreakGotoExpression
DryIoc.FastExpressionCompiler.LightExpression.BreakTypedGotoExpression
DryIoc.FastExpressionCompiler.LightExpression.BreakTypedValueGotoExpression
DryIoc.FastExpressionCompiler.LightExpression.BreakValueGotoExpression
DryIoc.FastExpressionCompiler.LightExpression.CatchBlock
DryIoc.FastExpressionCompiler.LightExpression.CodePrinter
DryIoc.FastExpressionCompiler.LightExpression.CodePrinter.IObjectToCode
DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags
DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default = 0 -> DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags
DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.EnableDelegateDebugInfo = 2 -> DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags
DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.NoInvocationLambdaInlining = 1 -> DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags
DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.ThrowOnNotSupportedExpression = 4 -> DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags
DryIoc.FastExpressionCompiler.LightExpression.ConditionalExpression
DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression
DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression.ConstantExpression() -> void
DryIoc.FastExpressionCompiler.LightExpression.ContinueGotoExpression
DryIoc.FastExpressionCompiler.LightExpression.ContinueTypedGotoExpression
DryIoc.FastExpressionCompiler.LightExpression.ConvertUnaryExpression
DryIoc.FastExpressionCompiler.LightExpression.ConvertViaCastClassIntrinsicExpression
DryIoc.FastExpressionCompiler.LightExpression.ConvertWithMethodUnaryExpression
DryIoc.FastExpressionCompiler.LightExpression.DebugInfoExpression
DryIoc.FastExpressionCompiler.LightExpression.DefaultExpression
DryIoc.FastExpressionCompiler.LightExpression.DynamicExpression
DryIoc.FastExpressionCompiler.LightExpression.ElementInit
DryIoc.FastExpressionCompiler.LightExpression.Expression
DryIoc.FastExpressionCompiler.LightExpression.Expression.Expression() -> void
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ArrayClosure
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ArrayClosureWithNonPassedParams
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.ClosureInfo() -> void
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.ConstantUsageThenVarIndex -> DryIoc.FastExpressionCompiler.LightExpression.LiveCountArray<short>
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.ContainsConstantsOrNestedLambdas() -> bool
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.LastEmitIsAddress -> bool
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.PopBlock() -> void
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.Status -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureStatus
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureStatus
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureStatus.HasClosure = 4 -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureStatus
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureStatus.ShouldBeStaticMethod = 8 -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureStatus
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureStatus.ToBeCollected = 1 -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureStatus
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureStatus.UserProvided = 2 -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureStatus
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.DebugArrayClosure
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.EmittingVisitor
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.NestedLambdaInfo
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.NestedLambdaInfo.ClosureInfo -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.NestedLambdaInfo.LambdaVarIndex -> int
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.NestedLambdaWithConstantsAndNestedLambdas
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags.Arithmetic = 16 -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags.Call = 4 -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags.Coalesce = 32 -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags.CtorCall = 516 -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags.DupMemberOwner = 128 -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags.Empty = 0 -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags.IgnoreResult = 2 -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags.IndexAccess = 1024 -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags.InlinedLambdaInvoke = 2048 -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags.InstanceAccess = 64 -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags.InstanceCall = DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags.Call | DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags.InstanceAccess -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags.MemberAccess = 8 -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags
DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags.TryCatch = 256 -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags
DryIoc.FastExpressionCompiler.LightExpression.FieldExpression
DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsInvocationExpression
DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsMethodCallExpression
DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsNewExpression
DryIoc.FastExpressionCompiler.LightExpression.FiveBindingsMemberInitExpression
DryIoc.FastExpressionCompiler.LightExpression.FiveElementNewArrayInitExpression
DryIoc.FastExpressionCompiler.LightExpression.FiveParametersLambdaExpression
DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsInvocationExpression
DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsMethodCallExpression
DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsNewExpression
DryIoc.FastExpressionCompiler.LightExpression.FourBindingsMemberInitExpression
DryIoc.FastExpressionCompiler.LightExpression.FourElementNewArrayInitExpression
DryIoc.FastExpressionCompiler.LightExpression.FourParametersLambdaExpression
DryIoc.FastExpressionCompiler.LightExpression.GotoExpression
DryIoc.FastExpressionCompiler.LightExpression.HasIndexerManyArgumentsIndexExpression
DryIoc.FastExpressionCompiler.LightExpression.HasIndexerOneArgumentIndexExpression
DryIoc.FastExpressionCompiler.LightExpression.IArgumentProvider
DryIoc.FastExpressionCompiler.LightExpression.IArgumentProvider.ArgumentCount.get -> int
DryIoc.FastExpressionCompiler.LightExpression.IArgumentProvider<T>
DryIoc.FastExpressionCompiler.LightExpression.IArgumentProvider<T>.ArgumentCount.get -> int
DryIoc.FastExpressionCompiler.LightExpression.IArgumentProvider<T>.GetArgument(int index) -> T
DryIoc.FastExpressionCompiler.LightExpression.IDelegateDebugInfo
DryIoc.FastExpressionCompiler.LightExpression.ILGeneratorHacks
DryIoc.FastExpressionCompiler.LightExpression.IndexExpression
DryIoc.FastExpressionCompiler.LightExpression.InstanceFieldExpression
DryIoc.FastExpressionCompiler.LightExpression.InstanceFiveArgumentsMethodCallExpression
DryIoc.FastExpressionCompiler.LightExpression.InstanceFourArgumentsMethodCallExpression
DryIoc.FastExpressionCompiler.LightExpression.InstanceManyArgumentsMethodCallExpression
DryIoc.FastExpressionCompiler.LightExpression.InstanceMethodCallExpression
DryIoc.FastExpressionCompiler.LightExpression.InstanceOneArgumentMethodCallExpression
DryIoc.FastExpressionCompiler.LightExpression.InstancePropertyExpression
DryIoc.FastExpressionCompiler.LightExpression.InstanceSevenArgumentsMethodCallExpression
DryIoc.FastExpressionCompiler.LightExpression.InstanceSixArgumentsMethodCallExpression
DryIoc.FastExpressionCompiler.LightExpression.InstanceThreeArgumentsMethodCallExpression
DryIoc.FastExpressionCompiler.LightExpression.InstanceTwoArgumentsMethodCallExpression
DryIoc.FastExpressionCompiler.LightExpression.IntConstantExpression
DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression.InvocationExpression() -> void
DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider
DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider.ParameterCount.get -> int
DryIoc.FastExpressionCompiler.LightExpression.LabelExpression
DryIoc.FastExpressionCompiler.LightExpression.LabelTarget
DryIoc.FastExpressionCompiler.LightExpression.LabelTarget.LabelTarget() -> void
DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
DryIoc.FastExpressionCompiler.LightExpression.ListInitExpression
DryIoc.FastExpressionCompiler.LightExpression.LiveCountArray<T>
DryIoc.FastExpressionCompiler.LightExpression.LiveCountArray<T>.Count -> int
DryIoc.FastExpressionCompiler.LightExpression.LiveCountArray<T>.LiveCountArray() -> void
DryIoc.FastExpressionCompiler.LightExpression.LiveCountArray<T>.Pop() -> void
DryIoc.FastExpressionCompiler.LightExpression.LiveCountArray<T>.PushSlot() -> T
DryIoc.FastExpressionCompiler.LightExpression.LiveCountArray<T>.PushSlot(T item) -> void
DryIoc.FastExpressionCompiler.LightExpression.LoopExpression
DryIoc.FastExpressionCompiler.LightExpression.ManyArgumentsElementInit
DryIoc.FastExpressionCompiler.LightExpression.ManyArgumentsIndexExpression
DryIoc.FastExpressionCompiler.LightExpression.ManyArgumentsInvocationExpression
DryIoc.FastExpressionCompiler.LightExpression.ManyArgumentsMethodCallExpression
DryIoc.FastExpressionCompiler.LightExpression.ManyArgumentsNewExpression
DryIoc.FastExpressionCompiler.LightExpression.ManyBindingsMemberInitExpression
DryIoc.FastExpressionCompiler.LightExpression.ManyBoundsNewArrayBoundsExpression
DryIoc.FastExpressionCompiler.LightExpression.ManyElementsNewArrayInitExpression
DryIoc.FastExpressionCompiler.LightExpression.ManyParametersLambdaExpression
DryIoc.FastExpressionCompiler.LightExpression.ManyVariablesBlockExpression
DryIoc.FastExpressionCompiler.LightExpression.MemberAssignment
DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
DryIoc.FastExpressionCompiler.LightExpression.MemberExpression
DryIoc.FastExpressionCompiler.LightExpression.MemberInitExpression
DryIoc.FastExpressionCompiler.LightExpression.MemberListBinding
DryIoc.FastExpressionCompiler.LightExpression.MemberMemberBinding
DryIoc.FastExpressionCompiler.LightExpression.MethodBinaryExpression
DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression.MethodCallExpression() -> void
DryIoc.FastExpressionCompiler.LightExpression.NamedLabelTarget
DryIoc.FastExpressionCompiler.LightExpression.NewArrayExpression
DryIoc.FastExpressionCompiler.LightExpression.NewExpression
DryIoc.FastExpressionCompiler.LightExpression.NewValueTypeExpression
DryIoc.FastExpressionCompiler.LightExpression.NoArgsNewClassIntrinsicExpression
DryIoc.FastExpressionCompiler.LightExpression.NoByRefFiveArgumentsNewExpression
DryIoc.FastExpressionCompiler.LightExpression.NoByRefFourArgumentsNewExpression
DryIoc.FastExpressionCompiler.LightExpression.NoByRefManyArgumentsNewExpression
DryIoc.FastExpressionCompiler.LightExpression.NoByRefOneArgumentNewExpression
DryIoc.FastExpressionCompiler.LightExpression.NoByRefSevenArgumentsNewExpression
DryIoc.FastExpressionCompiler.LightExpression.NoByRefSixArgumentsNewExpression
DryIoc.FastExpressionCompiler.LightExpression.NoByRefThreeArgumentsNewExpression
DryIoc.FastExpressionCompiler.LightExpression.NoByRefTwoArgumentsNewExpression
DryIoc.FastExpressionCompiler.LightExpression.NodeTypedUnaryExpression
DryIoc.FastExpressionCompiler.LightExpression.NotBooleanUnaryExpression
DryIoc.FastExpressionCompiler.LightExpression.NotNullExpressionInvocationExpression
DryIoc.FastExpressionCompiler.LightExpression.NotNullMethodCallExpression
DryIoc.FastExpressionCompiler.LightExpression.NotSupported
DryIoc.FastExpressionCompiler.LightExpression.NotSupported.Assign_Target = 7 -> DryIoc.FastExpressionCompiler.LightExpression.NotSupported
DryIoc.FastExpressionCompiler.LightExpression.NotSupported.Dynamic = 2 -> DryIoc.FastExpressionCompiler.LightExpression.NotSupported
DryIoc.FastExpressionCompiler.LightExpression.NotSupported.MemberInit_ListBinding = 5 -> DryIoc.FastExpressionCompiler.LightExpression.NotSupported
DryIoc.FastExpressionCompiler.LightExpression.NotSupported.MemberInit_MemberBinding = 4 -> DryIoc.FastExpressionCompiler.LightExpression.NotSupported
DryIoc.FastExpressionCompiler.LightExpression.NotSupported.NewArrayInit_MultidimensionalArray = 0 -> DryIoc.FastExpressionCompiler.LightExpression.NotSupported
DryIoc.FastExpressionCompiler.LightExpression.NotSupported.Quote = 1 -> DryIoc.FastExpressionCompiler.LightExpression.NotSupported
DryIoc.FastExpressionCompiler.LightExpression.NotSupported.RuntimeVariables = 3 -> DryIoc.FastExpressionCompiler.LightExpression.NotSupported
DryIoc.FastExpressionCompiler.LightExpression.NotSupported.Try_GotoReturnToTheFollowupLabel = 6 -> DryIoc.FastExpressionCompiler.LightExpression.NotSupported
DryIoc.FastExpressionCompiler.LightExpression.NotSupported.TypeEqual = 8 -> DryIoc.FastExpressionCompiler.LightExpression.NotSupported
DryIoc.FastExpressionCompiler.LightExpression.NotSupportedExpressionException
DryIoc.FastExpressionCompiler.LightExpression.NotSupportedExpressionException.NotSupportedExpressionException(DryIoc.FastExpressionCompiler.LightExpression.NotSupported reason) -> void
DryIoc.FastExpressionCompiler.LightExpression.NullConstantExpression<T>
DryIoc.FastExpressionCompiler.LightExpression.NullConstantExpression<T>.NullConstantExpression() -> void
DryIoc.FastExpressionCompiler.LightExpression.OneArgumentElementInit
DryIoc.FastExpressionCompiler.LightExpression.OneArgumentIndexExpression
DryIoc.FastExpressionCompiler.LightExpression.OneArgumentInvocationExpression
DryIoc.FastExpressionCompiler.LightExpression.OneArgumentMethodCallExpression
DryIoc.FastExpressionCompiler.LightExpression.OneArgumentNewExpression
DryIoc.FastExpressionCompiler.LightExpression.OneBindingMemberInitExpression
DryIoc.FastExpressionCompiler.LightExpression.OneBoundNewArrayBoundsExpression
DryIoc.FastExpressionCompiler.LightExpression.OneElementNewArrayInitExpression
DryIoc.FastExpressionCompiler.LightExpression.OneParameterLambdaExpression
DryIoc.FastExpressionCompiler.LightExpression.OpAssignBinaryExpression
DryIoc.FastExpressionCompiler.LightExpression.OpAssignMethodConversionBinaryExpression
DryIoc.FastExpressionCompiler.LightExpression.OpAssignMethodConversionBinaryExpression.LiftToNull.get -> bool
DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
DryIoc.FastExpressionCompiler.LightExpression.PropertyExpression
DryIoc.FastExpressionCompiler.LightExpression.ReturnGotoExpression
DryIoc.FastExpressionCompiler.LightExpression.ReturnTypedGotoExpression
DryIoc.FastExpressionCompiler.LightExpression.ReturnTypedValueGotoExpression
DryIoc.FastExpressionCompiler.LightExpression.ReturnValueGotoExpression
DryIoc.FastExpressionCompiler.LightExpression.RuntimeVariablesExpression
DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsMethodCallExpression
DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsNewExpression
DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsInvocationExpression
DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsMethodCallExpression
DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsNewExpression
DryIoc.FastExpressionCompiler.LightExpression.SixBindingsMemberInitExpression
DryIoc.FastExpressionCompiler.LightExpression.SixElementNewArrayInitExpression
DryIoc.FastExpressionCompiler.LightExpression.SixParametersLambdaExpression
DryIoc.FastExpressionCompiler.LightExpression.SwitchCase
DryIoc.FastExpressionCompiler.LightExpression.SwitchCase.SwitchCase() -> void
DryIoc.FastExpressionCompiler.LightExpression.SwitchExpression
DryIoc.FastExpressionCompiler.LightExpression.SymbolDocumentInfo
DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsInvocationExpression
DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsMethodCallExpression
DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsNewExpression
DryIoc.FastExpressionCompiler.LightExpression.ThreeBindingsMemberInitExpression
DryIoc.FastExpressionCompiler.LightExpression.ThreeElementNewArrayInitExpression
DryIoc.FastExpressionCompiler.LightExpression.ThreeParametersLambdaExpression
DryIoc.FastExpressionCompiler.LightExpression.ThrowUnaryExpression
DryIoc.FastExpressionCompiler.LightExpression.ToCSharpPrinter
DryIoc.FastExpressionCompiler.LightExpression.ToExpressionPrinter
DryIoc.FastExpressionCompiler.LightExpression.TryExpression
DryIoc.FastExpressionCompiler.LightExpression.TryPrintConstant
DryIoc.FastExpressionCompiler.LightExpression.TwoArgumentsInvocationExpression
DryIoc.FastExpressionCompiler.LightExpression.TwoArgumentsMethodCallExpression
DryIoc.FastExpressionCompiler.LightExpression.TwoArgumentsNewExpression
DryIoc.FastExpressionCompiler.LightExpression.TwoBindingsMemberInitExpression
DryIoc.FastExpressionCompiler.LightExpression.TwoElementNewArrayInitExpression
DryIoc.FastExpressionCompiler.LightExpression.TwoParametersLambdaExpression
DryIoc.FastExpressionCompiler.LightExpression.TypeBinaryExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedBlockExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedConvertUnaryExpression<T>
DryIoc.FastExpressionCompiler.LightExpression.TypedFiveArgumentsInvocationExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedFourArgumentsInvocationExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedGotoExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedInvocationExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedLabelTarget
DryIoc.FastExpressionCompiler.LightExpression.TypedLambdaExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedManyArgumentsInvocationExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedManyVariablesBlockExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedNamedLabelTarget
DryIoc.FastExpressionCompiler.LightExpression.TypedNullConstantExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedOneArgumentInvocationExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedParameterExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedParameterExpression<T>
DryIoc.FastExpressionCompiler.LightExpression.TypedReturnFiveParametersLambdaExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedReturnFourParametersLambdaExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedReturnLambdaExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedReturnManyParametersLambdaExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedReturnOneParameterLambdaExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedReturnSixParametersLambdaExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedReturnThreeParametersLambdaExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedReturnTwoParametersLambdaExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedSixArgumentsInvocationExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedThreeArgumentsInvocationExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedTwoArgumentsInvocationExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedUnaryExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedUnaryExpression<T>
DryIoc.FastExpressionCompiler.LightExpression.TypedValueConstantExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedValueGotoExpression
DryIoc.FastExpressionCompiler.LightExpression.TypedWithFalseBranchConditionalExpression
DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
DryIoc.FastExpressionCompiler.LightExpression.ValueConstantExpression
DryIoc.FastExpressionCompiler.LightExpression.ValueConstantExpression<T>
DryIoc.FastExpressionCompiler.LightExpression.ValueGotoExpression
DryIoc.FastExpressionCompiler.LightExpression.VoidWithFalseBranchConditionalExpression
DryIoc.FastExpressionCompiler.LightExpression.WithComparisonSwitchExpression
DryIoc.FastExpressionCompiler.LightExpression.WithDefaultValueLabelExpression
DryIoc.FastExpressionCompiler.LightExpression.WithFalseBranchConditionalExpression
DryIoc.FastExpressionCompiler.LightExpression.WithFinallyTryExpression
DryIoc.ImTools.ArrayTools
DryIoc.ImTools.Fun
DryIoc.ImTools.GrowingList
DryIoc.ImTools.GrowingList<T>
DryIoc.ImTools.GrowingList<T>.Count -> int
DryIoc.ImTools.GrowingList<T>.GrowingList() -> void
DryIoc.ImTools.GrowingList<T>.Pop() -> void
DryIoc.ImTools.GrowingList<T>.PopItem() -> T
DryIoc.ImTools.GrowingList<T>.Push(T item) -> void
DryIoc.ImTools.GrowingList<T>.PushSlot() -> T
DryIoc.ImTools.Hasher
DryIoc.ImTools.ImHashMap
DryIoc.ImTools.ImHashMap<K, V>
DryIoc.ImTools.ImHashMap<K, V>.Entry
DryIoc.ImTools.ImHashMap<K, V>.Entry.Entry(int hash) -> void
DryIoc.ImTools.ImHashMap<K, V>.ImHashMap() -> void
DryIoc.ImTools.ImHashMap<K, V>.IsEmpty.get -> bool
DryIoc.ImTools.ImHashMap<K, V>.UpdaterOrKeeper<S>
DryIoc.ImTools.ImHashMapEntry<K, V>
DryIoc.ImTools.ImHashMapEntry<K, V>.ImHashMapEntry(int hash, K key) -> void
DryIoc.ImTools.ImHashMapEntry<K, V>.ImHashMapEntry(int hash, K key, V value) -> void
DryIoc.ImTools.ImHashMapEntry<K, V>.Value -> V
DryIoc.ImTools.ImList
DryIoc.ImTools.ImList<T>
DryIoc.ImTools.ImList<T>.IsEmpty.get -> bool
DryIoc.ImTools.ImMap
DryIoc.ImTools.ImMap.ImMapEnumerable<V>
DryIoc.ImTools.ImMap.ImMapEnumerable<V>.GetEnumerator() -> DryIoc.ImTools.ImMap.ImMapEnumerator<V>
DryIoc.ImTools.ImMap.ImMapEnumerable<V>.ImMapEnumerable() -> void
DryIoc.ImTools.ImMap.ImMapEnumerator<V>
DryIoc.ImTools.ImMap.ImMapEnumerator<V>.ImMapEnumerator() -> void
DryIoc.ImTools.ImMap.ImMapEnumerator<V>.MoveNext() -> bool
DryIoc.ImTools.ImMap<V>
DryIoc.ImTools.ImMap<V>.ImMap() -> void
DryIoc.ImTools.ImMap<V>.IsEmpty.get -> bool
DryIoc.ImTools.ImMapEntry<V>
DryIoc.ImTools.ImMapEntry<V>.ImMapEntry(int hash) -> void
DryIoc.ImTools.ImMapEntry<V>.ImMapEntry(int hash, V value) -> void
DryIoc.ImTools.ImMapEntry<V>.Key.get -> int
DryIoc.ImTools.ImMapEntry<V>.Value -> V
DryIoc.ImTools.ImMapParentStack<V>
DryIoc.ImTools.ImMapParentStack<V>.Entry
DryIoc.ImTools.ImMapParentStack<V>.Entry.Entry() -> void
DryIoc.ImTools.ImMapParentStack<V>.ImMapParentStack(int capacity = 4) -> void
DryIoc.ImTools.ImZipper
DryIoc.ImTools.ImZipper<T>
DryIoc.ImTools.ImZipper<T>.IsEmpty.get -> bool
DryIoc.ImTools.IPrintable
DryIoc.ImTools.KeyValuePair
DryIoc.ImTools.KV
DryIoc.ImTools.KV<K, V>
DryIoc.ImTools.KV<K, V>.KV(K key, V value) -> void
DryIoc.ImTools.Lazy
DryIoc.ImTools.MapParentStack
DryIoc.ImTools.MapParentStack.MapParentStack() -> void
DryIoc.ImTools.Opt<T>
DryIoc.ImTools.Opt<T>.Opt() -> void
DryIoc.ImTools.Opt<T>.Opt(T value) -> void
DryIoc.ImTools.Opt<T>.OrDefault(T defaultValue = default(T)) -> T
DryIoc.ImTools.PartitionedHashMap
DryIoc.ImTools.PartitionedMap
DryIoc.ImTools.Ref
DryIoc.ImTools.St
DryIoc.ImTools.St<A, B>
DryIoc.ImTools.St<A, B>.a -> A
DryIoc.ImTools.St<A, B>.b -> B
DryIoc.ImTools.St<A, B>.Reset() -> void
DryIoc.ImTools.St<A, B>.ResetButGetA() -> A
DryIoc.ImTools.St<A, B>.ResetButGetB() -> B
DryIoc.ImTools.St<A, B>.St() -> void
DryIoc.ImTools.St<A>
DryIoc.ImTools.St<A>.a -> A
DryIoc.ImTools.St<A>.Pool() -> void
DryIoc.ImTools.St<A>.Reset() -> void
DryIoc.ImTools.St<A>.ResetButGetA() -> A
DryIoc.ImTools.St<A>.St() -> void
DryIoc.ImTools.StackPool<T>.StackPool() -> void
DryIoc.ImTools.Update<K, V>
DryIoc.ImTools.Update<V>
DryIoc.InstanceFactory
DryIoc.ReflectionFactory.ReflectionFactory() -> void
DryIoc.RequestFlags.Default = 0 -> DryIoc.RequestFlags
DryIoc.RequestFlags.IsDirectlyWrappedInFunc = 128 -> DryIoc.RequestFlags
DryIoc.RequestFlags.IsGeneratedResolutionDependencyExpression = 64 -> DryIoc.RequestFlags
DryIoc.RequestFlags.IsResolutionCall = 8 -> DryIoc.RequestFlags
DryIoc.RequestFlags.IsSingletonOrDependencyOfSingleton = 2 -> DryIoc.RequestFlags
DryIoc.RequestFlags.IsWrappedInFunc = 4 -> DryIoc.RequestFlags
DryIoc.RequestFlags.OpensResolutionScope = 16 -> DryIoc.RequestFlags
DryIoc.RequestFlags.StopRecursiveDependencyCheck = 32 -> DryIoc.RequestFlags
DryIoc.RequestFlags.TracksTransientDisposable = 1 -> DryIoc.RequestFlags
DryIoc.RequestTools
DryIoc.Rules.ConstantExpressionIsFine.get -> bool
DryIoc.Rules.IsSelectLastRegisteredFactory.get -> bool
DryIoc.Scope.Scope() -> void
DryIoc.ScopeTools
DryIoc.ServiceInfo.ServiceInfo() -> void
DryIoc.ServiceInfo.Typed
DryIoc.Setup.AvoidResolutionScopeTracking.get -> bool
DryIoc.Setup.Settings
DryIoc.Setup.Settings.AllowDisposableTransient = 32 -> DryIoc.Setup.Settings
DryIoc.Setup.Settings.AsResolutionCall = 2 -> DryIoc.Setup.Settings
DryIoc.Setup.Settings.AsResolutionCallForExpressionGeneration = 1024 -> DryIoc.Setup.Settings
DryIoc.Setup.Settings.AsResolutionRoot = 128 -> DryIoc.Setup.Settings
DryIoc.Setup.Settings.AvoidResolutionScopeTracking = 2048 -> DryIoc.Setup.Settings
DryIoc.Setup.Settings.Default = 0 -> DryIoc.Setup.Settings
DryIoc.Setup.Settings.OpenResolutionScope = 4 -> DryIoc.Setup.Settings
DryIoc.Setup.Settings.PreferInSingleServiceResolve = 512 -> DryIoc.Setup.Settings
DryIoc.Setup.Settings.PreventDisposal = 8 -> DryIoc.Setup.Settings
DryIoc.Setup.Settings.TrackDisposableTransient = 64 -> DryIoc.Setup.Settings
DryIoc.Setup.Settings.UseParentReuse = 256 -> DryIoc.Setup.Settings
DryIoc.Setup.Settings.WeaklyReferenced = 16 -> DryIoc.Setup.Settings
DryIoc.WrapperExpressionFactory
override DryIoc.FastExpressionCompiler.LightExpression.ArrayIndexExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.AssignBinaryExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.BlockExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.BreakGotoExpression.Kind.get -> System.Linq.Expressions.GotoExpressionKind
override DryIoc.FastExpressionCompiler.LightExpression.BreakTypedGotoExpression.Kind.get -> System.Linq.Expressions.GotoExpressionKind
override DryIoc.FastExpressionCompiler.LightExpression.BreakTypedValueGotoExpression.Kind.get -> System.Linq.Expressions.GotoExpressionKind
override DryIoc.FastExpressionCompiler.LightExpression.BreakValueGotoExpression.Kind.get -> System.Linq.Expressions.GotoExpressionKind
override DryIoc.FastExpressionCompiler.LightExpression.ConditionalExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.ContinueGotoExpression.Kind.get -> System.Linq.Expressions.GotoExpressionKind
override DryIoc.FastExpressionCompiler.LightExpression.ContinueTypedGotoExpression.Kind.get -> System.Linq.Expressions.GotoExpressionKind
override DryIoc.FastExpressionCompiler.LightExpression.ConvertUnaryExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.ConvertViaCastClassIntrinsicExpression<T>.IsIntrinsic.get -> bool
override DryIoc.FastExpressionCompiler.LightExpression.DefaultExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.DynamicExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsMethodCallExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsNewExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.FiveBindingsMemberInitExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.FiveElementNewArrayInitExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.FiveElementNewArrayInitExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsMethodCallExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsNewExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.FourBindingsMemberInitExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.FourElementNewArrayInitExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.FourElementNewArrayInitExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.GotoExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.LabelExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.ListInitExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.LoopExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.ManyArgumentsElementInit.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.ManyArgumentsNewExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.ManyBindingsMemberInitExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.ManyBoundsNewArrayBoundsExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.ManyElementsNewArrayInitExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.MemberAssignment.BindingType.get -> System.Linq.Expressions.MemberBindingType
override DryIoc.FastExpressionCompiler.LightExpression.MemberListBinding.BindingType.get -> System.Linq.Expressions.MemberBindingType
override DryIoc.FastExpressionCompiler.LightExpression.MemberMemberBinding.BindingType.get -> System.Linq.Expressions.MemberBindingType
override DryIoc.FastExpressionCompiler.LightExpression.MethodBinaryExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.NoArgsNewClassIntrinsicExpression.IsIntrinsic.get -> bool
override DryIoc.FastExpressionCompiler.LightExpression.NoByRefFiveArgumentsNewExpression.IsIntrinsic.get -> bool
override DryIoc.FastExpressionCompiler.LightExpression.NoByRefFiveArgumentsNewExpression.NoByRefArgs.get -> bool
override DryIoc.FastExpressionCompiler.LightExpression.NoByRefFourArgumentsNewExpression.IsIntrinsic.get -> bool
override DryIoc.FastExpressionCompiler.LightExpression.NoByRefFourArgumentsNewExpression.NoByRefArgs.get -> bool
override DryIoc.FastExpressionCompiler.LightExpression.NoByRefManyArgumentsNewExpression.NoByRefArgs.get -> bool
override DryIoc.FastExpressionCompiler.LightExpression.NoByRefOneArgumentNewExpression.IsIntrinsic.get -> bool
override DryIoc.FastExpressionCompiler.LightExpression.NoByRefOneArgumentNewExpression.NoByRefArgs.get -> bool
override DryIoc.FastExpressionCompiler.LightExpression.NoByRefSevenArgumentsNewExpression.IsIntrinsic.get -> bool
override DryIoc.FastExpressionCompiler.LightExpression.NoByRefSevenArgumentsNewExpression.NoByRefArgs.get -> bool
override DryIoc.FastExpressionCompiler.LightExpression.NoByRefSixArgumentsNewExpression.IsIntrinsic.get -> bool
override DryIoc.FastExpressionCompiler.LightExpression.NoByRefSixArgumentsNewExpression.NoByRefArgs.get -> bool
override DryIoc.FastExpressionCompiler.LightExpression.NoByRefThreeArgumentsNewExpression.IsIntrinsic.get -> bool
override DryIoc.FastExpressionCompiler.LightExpression.NoByRefThreeArgumentsNewExpression.NoByRefArgs.get -> bool
override DryIoc.FastExpressionCompiler.LightExpression.NoByRefTwoArgumentsNewExpression.IsIntrinsic.get -> bool
override DryIoc.FastExpressionCompiler.LightExpression.NoByRefTwoArgumentsNewExpression.NoByRefArgs.get -> bool
override DryIoc.FastExpressionCompiler.LightExpression.NodeTypedUnaryExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.NotBooleanUnaryExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.OneArgumentElementInit.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.OneArgumentIndexExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.OneArgumentMethodCallExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.OneArgumentNewExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.OneBindingMemberInitExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.OneBoundNewArrayBoundsExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.OneBoundNewArrayBoundsExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.OneElementNewArrayInitExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.OneElementNewArrayInitExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.ReturnGotoExpression.Kind.get -> System.Linq.Expressions.GotoExpressionKind
override DryIoc.FastExpressionCompiler.LightExpression.ReturnTypedGotoExpression.Kind.get -> System.Linq.Expressions.GotoExpressionKind
override DryIoc.FastExpressionCompiler.LightExpression.ReturnTypedValueGotoExpression.Kind.get -> System.Linq.Expressions.GotoExpressionKind
override DryIoc.FastExpressionCompiler.LightExpression.ReturnValueGotoExpression.Kind.get -> System.Linq.Expressions.GotoExpressionKind
override DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsMethodCallExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsNewExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsMethodCallExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsNewExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.SixBindingsMemberInitExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.SixElementNewArrayInitExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.SixElementNewArrayInitExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.SwitchCase.GetHashCode() -> int
override DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsMethodCallExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsNewExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.ThreeBindingsMemberInitExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.ThreeElementNewArrayInitExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.ThreeElementNewArrayInitExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.ThrowUnaryExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.TryExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.TwoArgumentsMethodCallExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.TwoArgumentsNewExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.TwoBindingsMemberInitExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.TwoElementNewArrayInitExpression.ArgumentCount.get -> int
override DryIoc.FastExpressionCompiler.LightExpression.TwoElementNewArrayInitExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.TypeBinaryExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.TypedConvertUnaryExpression<T>.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.TypedUnaryExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.FastExpressionCompiler.LightExpression.TypedUnaryExpression<T>.NodeType.get -> System.Linq.Expressions.ExpressionType
override DryIoc.ImTools.KV<K, V>.GetHashCode() -> int
override DryIoc.InstanceFactory.HasRuntimeState.get -> bool
override sealed DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override sealed DryIoc.FastExpressionCompiler.LightExpression.ConvertViaCastClassIntrinsicExpression<T>.NodeType.get -> System.Linq.Expressions.ExpressionType
override sealed DryIoc.FastExpressionCompiler.LightExpression.DebugInfoExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override sealed DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsInvocationExpression.ArgumentCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.FiveParametersExpression<TDelegate>.ParameterCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.FiveParametersLambdaExpression.ParameterCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsInvocationExpression.ArgumentCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.FourParametersExpression<TDelegate>.ParameterCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.FourParametersLambdaExpression.ParameterCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.IndexExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override sealed DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override sealed DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override sealed DryIoc.FastExpressionCompiler.LightExpression.ManyArgumentsInvocationExpression.ArgumentCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.ManyArgumentsMethodCallExpression.ArgumentCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.ManyParametersExpression<TDelegate>.ParameterCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.ManyParametersLambdaExpression.ParameterCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.ManyVariablesBlockExpression.ArgumentCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.MemberExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override sealed DryIoc.FastExpressionCompiler.LightExpression.MemberInitExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override sealed DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override sealed DryIoc.FastExpressionCompiler.LightExpression.NewExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override sealed DryIoc.FastExpressionCompiler.LightExpression.OneArgumentInvocationExpression.ArgumentCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.OneParameterExpression<TDelegate>.ParameterCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.OneParameterLambdaExpression.ParameterCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.OpAssignBinaryExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override sealed DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override sealed DryIoc.FastExpressionCompiler.LightExpression.RuntimeVariablesExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override sealed DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsInvocationExpression.ArgumentCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.SixParametersExpression<TDelegate>.ParameterCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.SixParametersLambdaExpression.ParameterCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.SwitchExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override sealed DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsInvocationExpression.ArgumentCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.ThreeParametersExpression<TDelegate>.ParameterCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.ThreeParametersLambdaExpression.ParameterCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.TwoArgumentsInvocationExpression.ArgumentCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.TwoParametersExpression<TDelegate>.ParameterCount.get -> int
override sealed DryIoc.FastExpressionCompiler.LightExpression.TwoParametersLambdaExpression.ParameterCount.get -> int
override sealed DryIoc.ImTools.ImHashMapEntry<K, V>.Count() -> int
override sealed DryIoc.ImTools.ImMapEntry<V>.Count() -> int
readonly DryIoc.FastExpressionCompiler.LightExpression.IntConstantExpression.IntValue -> int
readonly DryIoc.FastExpressionCompiler.LightExpression.NotSupportedExpressionException.Reason -> DryIoc.FastExpressionCompiler.LightExpression.NotSupported
readonly DryIoc.ImTools.ImHashMap<K, V>.Entry.Hash -> int
readonly DryIoc.ImTools.ImHashMapEntry<K, V>.Key -> K
readonly DryIoc.ImTools.ImList<T>.Head -> T
readonly DryIoc.ImTools.ImMapEntry<V>.Hash -> int
readonly DryIoc.ImTools.ImZipper<T>.Count -> int
readonly DryIoc.ImTools.ImZipper<T>.Focus -> T
readonly DryIoc.ImTools.ImZipper<T>.Index -> int
readonly DryIoc.ImTools.KV<K, V>.Key -> K
readonly DryIoc.ImTools.KV<K, V>.Value -> V
readonly DryIoc.ImTools.Opt<T>.HasValue -> bool
readonly DryIoc.ImTools.Opt<T>.Value -> T
static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.IgnoresResult(this DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags parent) -> bool
static DryIoc.ImTools.Fun.Always<T>(T _) -> bool
static DryIoc.ImTools.Fun.Id<T>(T x) -> T
static DryIoc.ImTools.Fun.Swap<T>(ref T a, ref T b) -> void
static DryIoc.ImTools.Fun.ToFunc<T, R>(this R result, T ignoredArg) -> R
static DryIoc.ImTools.Hasher.Combine(int h1, int h2) -> int
static DryIoc.ImTools.Hasher.Combine<T1, T2>(T1 a, T2 b) -> int
static DryIoc.ImTools.KeyValuePair.Pair<K, V>(this K key, V value) -> System.Collections.Generic.KeyValuePair<K, V>
static DryIoc.ImTools.Opt<T>.implicit operator DryIoc.ImTools.Opt<T>(T value) -> DryIoc.ImTools.Opt<T>
static readonly DryIoc.Error.InjectedIntoFactoryDummy -> int
static readonly DryIoc.Error.ServiceTypeIsNull -> int
virtual DryIoc.FastExpressionCompiler.LightExpression.BlockExpression.ArgumentCount.get -> int
virtual DryIoc.FastExpressionCompiler.LightExpression.DebugInfoExpression.EndColumn.get -> int
virtual DryIoc.FastExpressionCompiler.LightExpression.DebugInfoExpression.EndLine.get -> int
virtual DryIoc.FastExpressionCompiler.LightExpression.DebugInfoExpression.IsClear.get -> bool
virtual DryIoc.FastExpressionCompiler.LightExpression.DebugInfoExpression.StartColumn.get -> int
virtual DryIoc.FastExpressionCompiler.LightExpression.DebugInfoExpression.StartLine.get -> int
virtual DryIoc.FastExpressionCompiler.LightExpression.ElementInit.ArgumentCount.get -> int
virtual DryIoc.FastExpressionCompiler.LightExpression.Expression.IsIntrinsic.get -> bool
virtual DryIoc.FastExpressionCompiler.LightExpression.GotoExpression.Kind.get -> System.Linq.Expressions.GotoExpressionKind
virtual DryIoc.FastExpressionCompiler.LightExpression.IndexExpression.ArgumentCount.get -> int
virtual DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression.ArgumentCount.get -> int
virtual DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression.ParameterCount.get -> int
virtual DryIoc.FastExpressionCompiler.LightExpression.MemberInitExpression.ArgumentCount.get -> int
virtual DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression.ArgumentCount.get -> int
virtual DryIoc.FastExpressionCompiler.LightExpression.NewArrayExpression.ArgumentCount.get -> int
virtual DryIoc.FastExpressionCompiler.LightExpression.NewExpression.ArgumentCount.get -> int
virtual DryIoc.FastExpressionCompiler.LightExpression.NewExpression.NoByRefArgs.get -> bool
virtual DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression.IsByRef.get -> bool
virtual DryIoc.FastExpressionCompiler.LightExpression.SymbolDocumentInfo.DocumentType.get -> System.Guid
virtual DryIoc.FastExpressionCompiler.LightExpression.SymbolDocumentInfo.Language.get -> System.Guid
virtual DryIoc.FastExpressionCompiler.LightExpression.SymbolDocumentInfo.LanguageVendor.get -> System.Guid
virtual DryIoc.ImTools.ImHashMap<K, V>.Count() -> int
virtual DryIoc.ImTools.ImMap<V>.Count() -> int
virtual DryIoc.ImTools.ImMap<V>.IsBranch.get -> bool
~abstract DryIoc.Factory.CreateExpressionOrDefault(DryIoc.Request request) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~abstract DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression.Value.get -> object
~abstract DryIoc.FastExpressionCompiler.LightExpression.Expression.Type.get -> System.Type
~abstract DryIoc.FastExpressionCompiler.LightExpression.IndexExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~abstract DryIoc.FastExpressionCompiler.LightExpression.NewArrayExpression.Expressions.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~abstract DryIoc.ImTools.ImHashMap<K, V>.Entry.GetEntryOrNull(int hash, K key) -> DryIoc.ImTools.ImHashMapEntry<K, V>
~abstract DryIoc.ImTools.ImHashMap<K, V>.Entry.Update(DryIoc.ImTools.ImHashMapEntry<K, V> newEntry) -> DryIoc.ImTools.ImHashMap<K, V>.Entry
~abstract DryIoc.ImTools.ImHashMap<K, V>.Entry.UpdateOrKeep<S>(S state, DryIoc.ImTools.ImHashMapEntry<K, V> newEntry, DryIoc.ImTools.ImHashMap<K, V>.UpdaterOrKeeper<S> updateOrKeep) -> DryIoc.ImTools.ImHashMap<K, V>.Entry
~abstract DryIoc.ServiceInfo.ServiceType.get -> System.Type
~DryIoc.Container.CurrentOrSingletonScope.get -> DryIoc.IScope
~DryIoc.Container.GetConstantExpression(object item, System.Type itemType = null, bool throwIfStateRequired = false) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~DryIoc.Container.Use(System.Type serviceType, object instance) -> void
~DryIoc.CurrentScopeReuse.Apply(DryIoc.Request request, DryIoc.FastExpressionCompiler.LightExpression.Expression serviceFactoryExpr) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~DryIoc.CurrentScopeReuse.ToExpression(System.Func<object, DryIoc.FastExpressionCompiler.LightExpression.Expression> fallbackConverter) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~DryIoc.DefaultDynamicKey.ToExpression(System.Func<object, DryIoc.FastExpressionCompiler.LightExpression.Expression> fallbackConverter) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~DryIoc.DefaultKey.ToExpression(System.Func<object, DryIoc.FastExpressionCompiler.LightExpression.Expression> fallbackConverter) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~DryIoc.DelegateFactory.DelegateFactory(DryIoc.FactoryDelegate factoryDelegate) -> void
~DryIoc.ExpressionFactory.ExpressionFactory(System.Func<DryIoc.Request, DryIoc.FastExpressionCompiler.LightExpression.Expression> getServiceExpression, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null) -> void
~DryIoc.FactoryMethod.FactoryMethod(System.Reflection.MemberInfo memberInfo) -> void
~DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression.BinaryExpression(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> void
~DryIoc.FastExpressionCompiler.LightExpression.BlockExpression.Result.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~DryIoc.FastExpressionCompiler.LightExpression.CodePrinter.IObjectToCode.ToCode(object x, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null) -> string
~DryIoc.FastExpressionCompiler.LightExpression.ConvertUnaryExpression.ConvertUnaryExpression(DryIoc.FastExpressionCompiler.LightExpression.Expression operand, System.Type type) -> void
~DryIoc.FastExpressionCompiler.LightExpression.ConvertViaCastClassIntrinsicExpression.ConvertViaCastClassIntrinsicExpression(DryIoc.FastExpressionCompiler.LightExpression.Expression operand, System.Type type) -> void
~DryIoc.FastExpressionCompiler.LightExpression.ConvertViaCastClassIntrinsicExpression<T>
~DryIoc.FastExpressionCompiler.LightExpression.ConvertViaCastClassIntrinsicExpression<T>.ConvertViaCastClassIntrinsicExpression(DryIoc.FastExpressionCompiler.LightExpression.Expression operand) -> void
~DryIoc.FastExpressionCompiler.LightExpression.ConvertWithMethodUnaryExpression.ConvertWithMethodUnaryExpression(System.Linq.Expressions.ExpressionType nodeType, DryIoc.FastExpressionCompiler.LightExpression.Expression operand, System.Type type, System.Reflection.MethodInfo method) -> void
~DryIoc.FastExpressionCompiler.LightExpression.DynamicExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~DryIoc.FastExpressionCompiler.LightExpression.DynamicExpression.Binder.get -> System.Runtime.CompilerServices.CallSiteBinder
~DryIoc.FastExpressionCompiler.LightExpression.DynamicExpression.DelegateType.get -> System.Type
~DryIoc.FastExpressionCompiler.LightExpression.DynamicExpression.DynamicExpression(System.Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression> arguments) -> void
~DryIoc.FastExpressionCompiler.LightExpression.Expression.ToExpression() -> System.Linq.Expressions.Expression
~DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>.ToLambdaExpression() -> System.Linq.Expressions.Expression<TDelegate>
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ArrayClosure.ArrayClosure(object[] constantsAndNestedLambdas) -> void
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ArrayClosureWithNonPassedParams.ArrayClosureWithNonPassedParams(object[] constantsAndNestedLambdas, object[] nonPassedParams) -> void
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ArrayClosureWithNonPassedParams.ArrayClosureWithNonPassedParams(object[] nonPassedParams) -> void
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.AddConstantOrIncrementUsageCount(object value) -> bool
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.AddInlinedLambdaInvoke(DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression e) -> short
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.AddLabel(DryIoc.FastExpressionCompiler.LightExpression.LabelTarget labelTarget, short inlinedLambdaInvokeIndex = -1) -> void
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.AddNestedLambda(DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.NestedLambdaInfo nestedLambdaInfo) -> void
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.AddNonPassedParam(DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression expr) -> void
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.ClosureInfo(DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureStatus status, object[] constValues = null, short[] constUsage = null) -> void
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.Constants -> DryIoc.FastExpressionCompiler.LightExpression.LiveCountArray<object>
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.GetArrayOfConstantsAndNestedLambdas() -> object[]
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.GetDefinedLabel(int index, System.Reflection.Emit.ILGenerator il) -> System.Reflection.Emit.Label
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.GetDefinedLocalVarOrDefault(DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression varParamExpr) -> int
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.GetLabelOrInvokeIndex(object labelTarget) -> short
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.IsLocalVar(object varParamExpr) -> bool
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.NestedLambdaOrLambdas -> object
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.NonPassedParameters -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression[]
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.PushBlockAndConstructLocalVars(System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> blockVarExprs, System.Reflection.Emit.ILGenerator il) -> void
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.PushBlockWithVars(DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression blockVarExpr) -> void
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.PushBlockWithVars(DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression blockVarExpr, int varIndex) -> void
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.PushBlockWithVars(System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> blockVarExprs, int[] localVarIndexes = null) -> void
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo.TryMarkDefinedLabel(int index, System.Reflection.Emit.ILGenerator il) -> void
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.DebugArrayClosure.CSharpString.get -> string
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.DebugArrayClosure.DebugArrayClosure(object[] constantsAndNestedLambdas, DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression expr) -> void
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.DebugArrayClosure.Expression.get -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.DebugArrayClosure.ExpressionString.get -> string
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.NestedLambdaInfo.Lambda -> object
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.NestedLambdaInfo.NestedLambdaInfo(DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression lambdaExpression) -> void
~DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.NestedLambdaWithConstantsAndNestedLambdas.NestedLambdaWithConstantsAndNestedLambdas(object nestedLambda, object constantsAndNestedLambdas) -> void
~DryIoc.FastExpressionCompiler.LightExpression.FieldExpression.FieldInfo.get -> System.Reflection.FieldInfo
~DryIoc.FastExpressionCompiler.LightExpression.FiveParametersExpression<TDelegate>
~DryIoc.FastExpressionCompiler.LightExpression.FourParametersExpression<TDelegate>
~DryIoc.FastExpressionCompiler.LightExpression.IArgumentProvider.GetArgument(int index) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~DryIoc.FastExpressionCompiler.LightExpression.IDelegateDebugInfo.CSharpString.get -> string
~DryIoc.FastExpressionCompiler.LightExpression.IDelegateDebugInfo.Expression.get -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~DryIoc.FastExpressionCompiler.LightExpression.IDelegateDebugInfo.ExpressionString.get -> string
~DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider.GetParameter(int index) -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression.LambdaExpression(DryIoc.FastExpressionCompiler.LightExpression.Expression body) -> void
~DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression.ToLambdaExpression() -> System.Linq.Expressions.LambdaExpression
~DryIoc.FastExpressionCompiler.LightExpression.LiveCountArray<T>.Items -> T[]
~DryIoc.FastExpressionCompiler.LightExpression.LiveCountArray<T>.LiveCountArray(T[] items) -> void
~DryIoc.FastExpressionCompiler.LightExpression.ManyParametersExpression<TDelegate>
~DryIoc.FastExpressionCompiler.LightExpression.MemberExpression.MemberExpression(System.Reflection.MemberInfo member) -> void
~DryIoc.FastExpressionCompiler.LightExpression.MemberInitExpression.NewExpression.get -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~DryIoc.FastExpressionCompiler.LightExpression.MethodBinaryExpression.MethodBinaryExpression(System.Linq.Expressions.ExpressionType nodeType, DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Type type, System.Reflection.MethodInfo method) -> void
~DryIoc.FastExpressionCompiler.LightExpression.NamedLabelTarget.NamedLabelTarget(string name) -> void
~DryIoc.FastExpressionCompiler.LightExpression.NodeTypedUnaryExpression.NodeTypedUnaryExpression(System.Linq.Expressions.ExpressionType nodeType, DryIoc.FastExpressionCompiler.LightExpression.Expression operand) -> void
~DryIoc.FastExpressionCompiler.LightExpression.NotBooleanUnaryExpression.NotBooleanUnaryExpression(DryIoc.FastExpressionCompiler.LightExpression.Expression operand) -> void
~DryIoc.FastExpressionCompiler.LightExpression.NotSupportedExpressionException.NotSupportedExpressionException(DryIoc.FastExpressionCompiler.LightExpression.NotSupported reason, string message) -> void
~DryIoc.FastExpressionCompiler.LightExpression.OneParameterExpression<TDelegate>
~DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression.Name.get -> string
~DryIoc.FastExpressionCompiler.LightExpression.PropertyExpression.PropertyInfo.get -> System.Reflection.PropertyInfo
~DryIoc.FastExpressionCompiler.LightExpression.SixParametersExpression<TDelegate>
~DryIoc.FastExpressionCompiler.LightExpression.SwitchCase.SwitchCase(DryIoc.FastExpressionCompiler.LightExpression.Expression body, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> testValues) -> void
~DryIoc.FastExpressionCompiler.LightExpression.SwitchExpression.Cases.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.SwitchCase>
~DryIoc.FastExpressionCompiler.LightExpression.SwitchExpression.SwitchExpression(System.Type type, DryIoc.FastExpressionCompiler.LightExpression.Expression switchValue, DryIoc.FastExpressionCompiler.LightExpression.Expression defaultBody, DryIoc.FastExpressionCompiler.LightExpression.SwitchCase[] cases) -> void
~DryIoc.FastExpressionCompiler.LightExpression.SymbolDocumentInfo.FileName.get -> string
~DryIoc.FastExpressionCompiler.LightExpression.ThreeParametersExpression<TDelegate>
~DryIoc.FastExpressionCompiler.LightExpression.ThrowUnaryExpression.ThrowUnaryExpression(DryIoc.FastExpressionCompiler.LightExpression.Expression operand) -> void
~DryIoc.FastExpressionCompiler.LightExpression.TryExpression.Handlers.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.CatchBlock>
~DryIoc.FastExpressionCompiler.LightExpression.TwoParametersExpression<TDelegate>
~DryIoc.FastExpressionCompiler.LightExpression.TypeBinaryExpression.TypeOperand.get -> System.Type
~DryIoc.FastExpressionCompiler.LightExpression.TypedConvertUnaryExpression<T>.TypedConvertUnaryExpression(DryIoc.FastExpressionCompiler.LightExpression.Expression operand) -> void
~DryIoc.FastExpressionCompiler.LightExpression.TypedLabelTarget.TypedLabelTarget(System.Type type) -> void
~DryIoc.FastExpressionCompiler.LightExpression.TypedNamedLabelTarget.TypedNamedLabelTarget(System.Type type, string name) -> void
~DryIoc.FastExpressionCompiler.LightExpression.TypedReturnExpression<TDelegate>
~DryIoc.FastExpressionCompiler.LightExpression.TypedReturnFiveParametersExpression<TDelegate>
~DryIoc.FastExpressionCompiler.LightExpression.TypedReturnFourParametersExpression<TDelegate>
~DryIoc.FastExpressionCompiler.LightExpression.TypedReturnManyParametersExpression<TDelegate>
~DryIoc.FastExpressionCompiler.LightExpression.TypedReturnOneParameterExpression<TDelegate>
~DryIoc.FastExpressionCompiler.LightExpression.TypedReturnSixParametersExpression<TDelegate>
~DryIoc.FastExpressionCompiler.LightExpression.TypedReturnThreeParametersExpression<TDelegate>
~DryIoc.FastExpressionCompiler.LightExpression.TypedReturnTwoParametersExpression<TDelegate>
~DryIoc.FastExpressionCompiler.LightExpression.TypedUnaryExpression.TypedUnaryExpression(System.Linq.Expressions.ExpressionType nodeType, DryIoc.FastExpressionCompiler.LightExpression.Expression operand, System.Type type) -> void
~DryIoc.FastExpressionCompiler.LightExpression.TypedUnaryExpression<T>.TypedUnaryExpression(System.Linq.Expressions.ExpressionType nodeType, DryIoc.FastExpressionCompiler.LightExpression.Expression operand) -> void
~DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression.UnaryExpression(DryIoc.FastExpressionCompiler.LightExpression.Expression operand) -> void
~DryIoc.FastExpressionCompiler.LightExpression.WithComparisonSwitchExpression.WithComparisonSwitchExpression(System.Type type, DryIoc.FastExpressionCompiler.LightExpression.Expression switchValue, DryIoc.FastExpressionCompiler.LightExpression.Expression defaultBody, DryIoc.FastExpressionCompiler.LightExpression.SwitchCase[] cases, System.Reflection.MethodInfo comparison) -> void
~DryIoc.IContainer.GetAllServiceFactories(System.Type serviceType, bool bothClosedAndOpenGenerics = false) -> DryIoc.ImTools.KV<object, DryIoc.Factory>[]
~DryIoc.IContainer.GetConstantExpression(object item, System.Type itemType = null, bool throwIfStateRequired = false) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~DryIoc.IContainer.GetDecoratorExpressionOrDefault(DryIoc.Request request) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~DryIoc.IContainer.GetDecoratorFactoriesOrDefault(int serviceTypeHash, System.Type serviceType) -> DryIoc.Factory[]
~DryIoc.IContainer.GetServiceRegisteredAndDynamicFactories(System.Type serviceType) -> DryIoc.ImTools.KV<object, DryIoc.Factory>[]
~DryIoc.IContainer.Use(System.Type serviceType, object instance) -> void
~DryIoc.IConvertibleToExpression.ToExpression(System.Func<object, DryIoc.FastExpressionCompiler.LightExpression.Expression> fallbackConverter) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~DryIoc.ImTools.GrowingList<T>.GrowingList(T[] items, int count = 0) -> void
~DryIoc.ImTools.GrowingList<T>.Items -> T[]
~DryIoc.ImTools.GrowingList<T>.ResizeToArray() -> T[]
~DryIoc.ImTools.ImList<T>.Enumerate() -> System.Collections.Generic.IEnumerable<T>
~DryIoc.ImTools.ImList<T>.Push(T head) -> DryIoc.ImTools.ImList<T>
~DryIoc.ImTools.ImMap.ImMapEnumerable<V>.ImMapEnumerable(DryIoc.ImTools.ImMap<V> map) -> void
~DryIoc.ImTools.ImMap.ImMapEnumerator<V>.Current.get -> DryIoc.ImTools.ImMapEntry<V>
~DryIoc.ImTools.ImMapParentStack<V>.Entry.NextBranch -> DryIoc.ImTools.ImMap<V>
~DryIoc.ImTools.ImMapParentStack<V>.Entry.NextEntry -> DryIoc.ImTools.ImMapEntry<V>
~DryIoc.ImTools.ImMapParentStack<V>.Items -> DryIoc.ImTools.ImMapParentStack<V>.Entry[]
~DryIoc.ImTools.ImMapParentStack<V>.Put(int index, DryIoc.ImTools.ImMapEntry<V> entry, DryIoc.ImTools.ImMap<V> branch) -> void
~DryIoc.ImTools.ImZipper<T>.Append(T focus) -> DryIoc.ImTools.ImZipper<T>
~DryIoc.ImTools.ImZipper<T>.Insert(T focus) -> DryIoc.ImTools.ImZipper<T>
~DryIoc.ImTools.ImZipper<T>.Map<R>(System.Func<T, int, R> map) -> DryIoc.ImTools.ImZipper<R>
~DryIoc.ImTools.ImZipper<T>.Map<R>(System.Func<T, R> map) -> DryIoc.ImTools.ImZipper<R>
~DryIoc.ImTools.ImZipper<T>.PopLeft() -> DryIoc.ImTools.ImZipper<T>
~DryIoc.ImTools.ImZipper<T>.PopRight() -> DryIoc.ImTools.ImZipper<T>
~DryIoc.ImTools.ImZipper<T>.PushLeft(T focus) -> DryIoc.ImTools.ImZipper<T>
~DryIoc.ImTools.ImZipper<T>.PushRight(T focus) -> DryIoc.ImTools.ImZipper<T>
~DryIoc.ImTools.ImZipper<T>.ShiftLeft() -> DryIoc.ImTools.ImZipper<T>
~DryIoc.ImTools.ImZipper<T>.ShiftRight() -> DryIoc.ImTools.ImZipper<T>
~DryIoc.ImTools.ImZipper<T>.WithFocus(T focus) -> DryIoc.ImTools.ImZipper<T>
~DryIoc.ImTools.IPrintable.Print(System.Text.StringBuilder s, System.Func<System.Text.StringBuilder, object, System.Text.StringBuilder> printer) -> System.Text.StringBuilder
~DryIoc.ImTools.KV<K, V>.Print(System.Text.StringBuilder s, System.Func<System.Text.StringBuilder, object, System.Text.StringBuilder> printer) -> System.Text.StringBuilder
~DryIoc.ImTools.MapParentStack.Get(int index) -> object
~DryIoc.ImTools.MapParentStack.Put(object item, int index) -> void
~DryIoc.ImTools.Ref<T>
~DryIoc.ImTools.Ref<T>.Ref(T initialValue = null) -> void
~DryIoc.ImTools.Ref<T>.SetNonAtomic(T newValue) -> T
~DryIoc.ImTools.Ref<T>.Swap(System.Func<T, T> getNewValue) -> T
~DryIoc.ImTools.Ref<T>.Swap(T newValue) -> T
~DryIoc.ImTools.Ref<T>.Swap<A, B>(A a, B b, System.Func<T, A, B, T> getNewValue, int retryCountUntilThrow = 50) -> T
~DryIoc.ImTools.Ref<T>.Swap<A>(A a, System.Func<T, A, T> getNewValue, int retryCountUntilThrow = 50) -> T
~DryIoc.ImTools.Ref<T>.SwapAndGetNewValue<A>(A a, System.Func<T, A, T> getNewValue, int retryCountUntilThrow = 50) -> T
~DryIoc.ImTools.Ref<T>.TrySwapIfStillCurrent(T currentValue, T newValue) -> bool
~DryIoc.ImTools.Ref<T>.UnsafeSet(T newValue) -> void
~DryIoc.ImTools.Ref<T>.Value.get -> T
~DryIoc.ImTools.St<A, B>.Pool() -> DryIoc.ImTools.St<A, B>
~DryIoc.ImTools.StackPool<T>
~DryIoc.ImTools.StackPool<T>.RentOrDefault() -> T
~DryIoc.ImTools.StackPool<T>.Return(T x) -> void
~DryIoc.InstanceFactory.InstanceFactory(object instance) -> void
~DryIoc.Interpreter.ParentLambdaArgs.ParentLambdaArgs(DryIoc.Interpreter.ParentLambdaArgs parentWithArgs, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, object paramValues) -> void
~DryIoc.IRegistrator.Rules.get -> DryIoc.Rules
~DryIoc.IRegistrator.Use(System.Type serviceType, object instance) -> void
~DryIoc.IResolverContext.CurrentOrSingletonScope.get -> DryIoc.IScope
~DryIoc.IResolverContext.OwnCurrentScope.get -> DryIoc.IScope
~DryIoc.IResolverContext.Use(System.Type serviceType, object instance) -> void
~DryIoc.IReuse.Apply(DryIoc.Request request, DryIoc.FastExpressionCompiler.LightExpression.Expression serviceFactoryExpr) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~DryIoc.IScope.GetOrAddViaFactoryDelegate(int id, DryIoc.FactoryDelegate createValue, DryIoc.IResolverContext r) -> object
~DryIoc.IScope.GetOrAddViaFactoryDelegateWithDisposalOrder(int id, DryIoc.FactoryDelegate createValue, DryIoc.IResolverContext r, int disposalOrder) -> object
~DryIoc.IScope.SetUsed(int hash, System.Type type, object instance) -> void
~DryIoc.IScope.TrackDisposable<T>(T disposable, int disposalOrder = 0) -> T
~DryIoc.IScope.TryGetOrAddWithoutClosure(int id, DryIoc.IResolverContext resolveContext, DryIoc.FastExpressionCompiler.LightExpression.Expression expr, System.Func<DryIoc.IResolverContext, DryIoc.FastExpressionCompiler.LightExpression.Expression, object> createValue, int disposalOrder = 0) -> object
~DryIoc.IScope.TryGetUsed(int hash, System.Type type, out object instance) -> bool
~DryIoc.Made.FactoryMethodOrSelector.get -> object
~DryIoc.OpenGenericTypeKey.ToExpression(System.Func<object, DryIoc.FastExpressionCompiler.LightExpression.Expression> fallbackConverter) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~DryIoc.PropertyOrFieldServiceInfo.PropertyOrFieldServiceInfo(System.Type serviceType) -> void
~DryIoc.ReflectionFactory.ReflectionFactory(System.Type implementationType) -> void
~DryIoc.Request.Container.get -> DryIoc.IContainer
~DryIoc.Request.GetInputArgsExpr() -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~DryIoc.Request.GetServiceDetails() -> DryIoc.ServiceDetails
~DryIoc.Request.Push(DryIoc.ServiceInfo info, DryIoc.RequestFlags additionalFlags = DryIoc.RequestFlags.Default) -> DryIoc.Request
~DryIoc.Request.Push(System.Reflection.ParameterInfo parameter, DryIoc.RequestFlags additionalFlags = DryIoc.RequestFlags.Default) -> DryIoc.Request
~DryIoc.Request.Push(System.Type serviceType, object serviceKey = null, DryIoc.IfUnresolved ifUnresolved = DryIoc.IfUnresolved.Throw, System.Type requiredServiceType = null, DryIoc.RequestFlags flags = DryIoc.RequestFlags.Default) -> DryIoc.Request
~DryIoc.Request.PushServiceType(System.Type serviceType, DryIoc.RequestFlags additionalFlags = DryIoc.RequestFlags.Default) -> DryIoc.Request
~DryIoc.Request.WithChangedType<S>(S state, System.Func<System.Type, S, System.Type> getInfo) -> DryIoc.Request
~DryIoc.Request.WithInputArgs(DryIoc.FastExpressionCompiler.LightExpression.Expression[] inputArgs) -> DryIoc.Request
~DryIoc.Request.WithWrappedServiceFactory(DryIoc.Factory f) -> DryIoc.Request
~DryIoc.Rules.DependencyResolutionCallExprs.get -> DryIoc.ImTools.Ref<DryIoc.ImTools.ImHashMap<DryIoc.Request, System.Linq.Expressions.Expression>>
~DryIoc.Rules.FactoryMethodOrSelector.get -> object
~DryIoc.Scope.GetOrAddViaFactoryDelegate(int id, DryIoc.FactoryDelegate createValue, DryIoc.IResolverContext r) -> object
~DryIoc.Scope.GetOrAddViaFactoryDelegateWithDisposalOrder(int id, DryIoc.FactoryDelegate createValue, DryIoc.IResolverContext r, int disposalOrder) -> object
~DryIoc.Scope.Scope(DryIoc.ImTools.ImMap<object>[] maps, DryIoc.ImTools.ImHashMap<System.Type, object> used, DryIoc.ImTools.ImMap<DryIoc.ImTools.ImList<System.IDisposable>> disposables) -> void
~DryIoc.Scope.SetUsed(int hash, System.Type type, object instance) -> void
~DryIoc.Scope.TrackDisposable<T>(T item, int disposalOrder = 0) -> T
~DryIoc.Scope.TryGetOrAddWithoutClosure(int id, DryIoc.IResolverContext resolveContext, DryIoc.FastExpressionCompiler.LightExpression.Expression expr, System.Func<DryIoc.IResolverContext, DryIoc.FastExpressionCompiler.LightExpression.Expression, object> createValue, int disposalOrder = 0) -> object
~DryIoc.Scope.TryGetUsed(int hash, System.Type type, out object used) -> bool
~DryIoc.ServiceDetails.Equals(DryIoc.ServiceDetails d) -> bool
~DryIoc.ServiceInfo.Typed.Typed(System.Type serviceType) -> void
~DryIoc.Setup.GetMetadataValueMatchedByMetadataType(System.Type metadataType) -> object
~DryIoc.SingletonReuse.Apply(DryIoc.Request request, DryIoc.FastExpressionCompiler.LightExpression.Expression serviceFactoryExpr) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~DryIoc.SingletonReuse.ToExpression(System.Func<object, DryIoc.FastExpressionCompiler.LightExpression.Expression> fallbackConverter) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.DelegateFactory.CreateExpressionOrDefault(DryIoc.Request request) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.DelegateFactory.Setup.get -> DryIoc.Setup
~override DryIoc.ExpressionFactory.CreateExpressionOrDefault(DryIoc.Request request) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.ExpressionFactory.Reuse.get -> DryIoc.IReuse
~override DryIoc.ExpressionFactory.Setup.get -> DryIoc.Setup
~override DryIoc.FactoryPlaceholder.CreateExpressionOrDefault(DryIoc.Request request) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FactoryPlaceholder.Reuse.get -> DryIoc.IReuse
~override DryIoc.FastExpressionCompiler.LightExpression.ArrayIndexExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.BlockExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.ConditionalExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression.ToString() -> string
~override DryIoc.FastExpressionCompiler.LightExpression.ConvertUnaryExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.ConvertViaCastClassIntrinsicExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.ConvertViaCastClassIntrinsicExpression<T>.TryCollectBoundConstants(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags config, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, bool isNestedLambda, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo rootClosure) -> bool
~override DryIoc.FastExpressionCompiler.LightExpression.ConvertViaCastClassIntrinsicExpression<T>.TryEmit(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags config, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, System.Reflection.Emit.ILGenerator il, DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags parent, int byRefIndex = -1) -> bool
~override DryIoc.FastExpressionCompiler.LightExpression.ConvertViaCastClassIntrinsicExpression<T>.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.ConvertWithMethodUnaryExpression.Method.get -> System.Reflection.MethodInfo
~override DryIoc.FastExpressionCompiler.LightExpression.DefaultExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.DynamicExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.Expression.ToString() -> string
~override DryIoc.FastExpressionCompiler.LightExpression.FieldExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsMethodCallExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsMethodCallExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsNewExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsNewExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.FiveBindingsMemberInitExpression.Bindings.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.MemberBinding>
~override DryIoc.FastExpressionCompiler.LightExpression.FiveBindingsMemberInitExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~override DryIoc.FastExpressionCompiler.LightExpression.FiveElementNewArrayInitExpression.Expressions.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.FiveElementNewArrayInitExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsMethodCallExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsMethodCallExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsNewExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsNewExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.FourBindingsMemberInitExpression.Bindings.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.MemberBinding>
~override DryIoc.FastExpressionCompiler.LightExpression.FourBindingsMemberInitExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~override DryIoc.FastExpressionCompiler.LightExpression.FourElementNewArrayInitExpression.Expressions.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.FourElementNewArrayInitExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.GotoExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.HasIndexerManyArgumentsIndexExpression.Indexer.get -> System.Reflection.PropertyInfo
~override DryIoc.FastExpressionCompiler.LightExpression.HasIndexerOneArgumentIndexExpression.Indexer.get -> System.Reflection.PropertyInfo
~override DryIoc.FastExpressionCompiler.LightExpression.InstanceFieldExpression.Expression.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.InstanceFiveArgumentsMethodCallExpression.Object.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.InstanceFourArgumentsMethodCallExpression.Object.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.InstanceManyArgumentsMethodCallExpression.Object.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.InstanceMethodCallExpression.Object.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.InstanceOneArgumentMethodCallExpression.Object.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.InstancePropertyExpression.Expression.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.InstanceSevenArgumentsMethodCallExpression.Object.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.InstanceSixArgumentsMethodCallExpression.Object.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.InstanceThreeArgumentsMethodCallExpression.Object.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.InstanceTwoArgumentsMethodCallExpression.Object.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.IntConstantExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.IntConstantExpression.Value.get -> object
~override DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.LabelExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.LabelTarget.ToString() -> string
~override DryIoc.FastExpressionCompiler.LightExpression.ListInitExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.LoopExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.ManyArgumentsElementInit.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.ManyArgumentsElementInit.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.ManyArgumentsNewExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.ManyArgumentsNewExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.ManyBindingsMemberInitExpression.Bindings.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.MemberBinding>
~override DryIoc.FastExpressionCompiler.LightExpression.ManyBindingsMemberInitExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~override DryIoc.FastExpressionCompiler.LightExpression.ManyBoundsNewArrayBoundsExpression.Expressions.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.ManyElementsNewArrayInitExpression.Expressions.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.MemberInitExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.MethodBinaryExpression.Method.get -> System.Reflection.MethodInfo
~override DryIoc.FastExpressionCompiler.LightExpression.MethodBinaryExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.NamedLabelTarget.Name.get -> string
~override DryIoc.FastExpressionCompiler.LightExpression.NewExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.NewValueTypeExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.NoArgsNewClassIntrinsicExpression.TryCollectBoundConstants(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags config, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, bool isNestedLambda, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo rootClosure) -> bool
~override DryIoc.FastExpressionCompiler.LightExpression.NoArgsNewClassIntrinsicExpression.TryEmit(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags setup, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, System.Reflection.Emit.ILGenerator il, DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags parent, int byRefIndex = -1) -> bool
~override DryIoc.FastExpressionCompiler.LightExpression.NoByRefFiveArgumentsNewExpression.TryCollectBoundConstants(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags config, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, bool isNestedLambda, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo rootClosure) -> bool
~override DryIoc.FastExpressionCompiler.LightExpression.NoByRefFiveArgumentsNewExpression.TryEmit(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags setup, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, System.Reflection.Emit.ILGenerator il, DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags parent, int byRefIndex = -1) -> bool
~override DryIoc.FastExpressionCompiler.LightExpression.NoByRefFourArgumentsNewExpression.TryCollectBoundConstants(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags config, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, bool isNestedLambda, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo rootClosure) -> bool
~override DryIoc.FastExpressionCompiler.LightExpression.NoByRefFourArgumentsNewExpression.TryEmit(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags setup, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, System.Reflection.Emit.ILGenerator il, DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags parent, int byRefIndex = -1) -> bool
~override DryIoc.FastExpressionCompiler.LightExpression.NoByRefOneArgumentNewExpression.TryCollectBoundConstants(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags config, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, bool isNestedLambda, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo rootClosure) -> bool
~override DryIoc.FastExpressionCompiler.LightExpression.NoByRefOneArgumentNewExpression.TryEmit(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags setup, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, System.Reflection.Emit.ILGenerator il, DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags parent, int byRefIndex = -1) -> bool
~override DryIoc.FastExpressionCompiler.LightExpression.NoByRefSevenArgumentsNewExpression.TryCollectBoundConstants(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags config, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, bool isNestedLambda, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo rootClosure) -> bool
~override DryIoc.FastExpressionCompiler.LightExpression.NoByRefSevenArgumentsNewExpression.TryEmit(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags setup, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, System.Reflection.Emit.ILGenerator il, DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags parent, int byRefIndex = -1) -> bool
~override DryIoc.FastExpressionCompiler.LightExpression.NoByRefSixArgumentsNewExpression.TryCollectBoundConstants(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags config, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, bool isNestedLambda, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo rootClosure) -> bool
~override DryIoc.FastExpressionCompiler.LightExpression.NoByRefSixArgumentsNewExpression.TryEmit(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags setup, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, System.Reflection.Emit.ILGenerator il, DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags parent, int byRefIndex = -1) -> bool
~override DryIoc.FastExpressionCompiler.LightExpression.NoByRefThreeArgumentsNewExpression.TryCollectBoundConstants(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags config, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, bool isNestedLambda, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo rootClosure) -> bool
~override DryIoc.FastExpressionCompiler.LightExpression.NoByRefThreeArgumentsNewExpression.TryEmit(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags setup, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, System.Reflection.Emit.ILGenerator il, DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags parent, int byRefIndex = -1) -> bool
~override DryIoc.FastExpressionCompiler.LightExpression.NoByRefTwoArgumentsNewExpression.TryCollectBoundConstants(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags config, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, bool isNestedLambda, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo rootClosure) -> bool
~override DryIoc.FastExpressionCompiler.LightExpression.NoByRefTwoArgumentsNewExpression.TryEmit(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags setup, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, System.Reflection.Emit.ILGenerator il, DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags parent, int byRefIndex = -1) -> bool
~override DryIoc.FastExpressionCompiler.LightExpression.NotBooleanUnaryExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.NotNullMethodCallExpression.Method.get -> System.Reflection.MethodInfo
~override DryIoc.FastExpressionCompiler.LightExpression.NullConstantExpression<T>.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.NullConstantExpression<T>.Value.get -> object
~override DryIoc.FastExpressionCompiler.LightExpression.OneArgumentElementInit.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.OneArgumentElementInit.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.OneArgumentIndexExpression.GetArgument(int index) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.OneArgumentMethodCallExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.OneArgumentMethodCallExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.OneArgumentNewExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.OneArgumentNewExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.OneBindingMemberInitExpression.Bindings.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.MemberBinding>
~override DryIoc.FastExpressionCompiler.LightExpression.OneBindingMemberInitExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~override DryIoc.FastExpressionCompiler.LightExpression.OneBoundNewArrayBoundsExpression.Expressions.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.OneBoundNewArrayBoundsExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.OneElementNewArrayInitExpression.Expressions.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.OneElementNewArrayInitExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.OpAssignMethodConversionBinaryExpression.Conversion.get -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~override DryIoc.FastExpressionCompiler.LightExpression.OpAssignMethodConversionBinaryExpression.Method.get -> System.Reflection.MethodInfo
~override DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.PropertyExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsMethodCallExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsMethodCallExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsNewExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsNewExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsMethodCallExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsMethodCallExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsNewExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsNewExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.SixBindingsMemberInitExpression.Bindings.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.MemberBinding>
~override DryIoc.FastExpressionCompiler.LightExpression.SixBindingsMemberInitExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~override DryIoc.FastExpressionCompiler.LightExpression.SixElementNewArrayInitExpression.Expressions.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.SixElementNewArrayInitExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.SwitchCase.Equals(object obj) -> bool
~override DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsMethodCallExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsMethodCallExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsNewExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsNewExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.ThreeBindingsMemberInitExpression.Bindings.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.MemberBinding>
~override DryIoc.FastExpressionCompiler.LightExpression.ThreeBindingsMemberInitExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~override DryIoc.FastExpressionCompiler.LightExpression.ThreeElementNewArrayInitExpression.Expressions.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.ThreeElementNewArrayInitExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.ThrowUnaryExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TryExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TwoArgumentsMethodCallExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.TwoArgumentsMethodCallExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.TwoArgumentsNewExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.TwoArgumentsNewExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.TwoBindingsMemberInitExpression.Bindings.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.MemberBinding>
~override DryIoc.FastExpressionCompiler.LightExpression.TwoBindingsMemberInitExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~override DryIoc.FastExpressionCompiler.LightExpression.TwoElementNewArrayInitExpression.Expressions.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override DryIoc.FastExpressionCompiler.LightExpression.TwoElementNewArrayInitExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.TypeBinaryExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedBlockExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedConvertUnaryExpression<T>.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedFiveArgumentsInvocationExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedFourArgumentsInvocationExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedGotoExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedInvocationExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedLabelTarget.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedManyArgumentsInvocationExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedManyVariablesBlockExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedNamedLabelTarget.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedNullConstantExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedNullConstantExpression.Value.get -> object
~override DryIoc.FastExpressionCompiler.LightExpression.TypedOneArgumentInvocationExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedParameterExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedParameterExpression<T>.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedReturnExpression<TDelegate>.ReturnType.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedReturnFiveParametersExpression<TDelegate>.ReturnType.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedReturnFiveParametersLambdaExpression.ReturnType.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedReturnFourParametersExpression<TDelegate>.ReturnType.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedReturnFourParametersLambdaExpression.ReturnType.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedReturnLambdaExpression.ReturnType.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedReturnManyParametersExpression<TDelegate>.ReturnType.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedReturnManyParametersLambdaExpression.ReturnType.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedReturnOneParameterExpression<TDelegate>.ReturnType.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedReturnOneParameterLambdaExpression.ReturnType.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedReturnSixParametersExpression<TDelegate>.ReturnType.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedReturnSixParametersLambdaExpression.ReturnType.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedReturnThreeParametersExpression<TDelegate>.ReturnType.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedReturnThreeParametersLambdaExpression.ReturnType.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedReturnTwoParametersExpression<TDelegate>.ReturnType.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedReturnTwoParametersLambdaExpression.ReturnType.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedSixArgumentsInvocationExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedThreeArgumentsInvocationExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedTwoArgumentsInvocationExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedUnaryExpression<T>.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedValueConstantExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedValueConstantExpression.Value.get -> object
~override DryIoc.FastExpressionCompiler.LightExpression.TypedValueGotoExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.TypedWithFalseBranchConditionalExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.ValueConstantExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.ValueConstantExpression.Value.get -> object
~override DryIoc.FastExpressionCompiler.LightExpression.ValueConstantExpression<T>.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.ValueConstantExpression<T>.Value.get -> object
~override DryIoc.FastExpressionCompiler.LightExpression.ValueGotoExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.ValueGotoExpression.Value.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.VoidWithFalseBranchConditionalExpression.IfFalse.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.WithComparisonSwitchExpression.Comparison.get -> System.Reflection.MethodInfo
~override DryIoc.FastExpressionCompiler.LightExpression.WithDefaultValueLabelExpression.DefaultValue.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.FastExpressionCompiler.LightExpression.WithFalseBranchConditionalExpression.Type.get -> System.Type
~override DryIoc.FastExpressionCompiler.LightExpression.WithFinallyTryExpression.Finally.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.ImTools.GrowingList<T>.ToString() -> string
~override DryIoc.ImTools.ImHashMap<K, V>.ToString() -> string
~override DryIoc.ImTools.ImList<T>.ToString() -> string
~override DryIoc.ImTools.ImMap<V>.ToString() -> string
~override DryIoc.ImTools.ImZipper<T>.ToString() -> string
~override DryIoc.ImTools.KV<K, V>.Equals(object obj) -> bool
~override DryIoc.ImTools.KV<K, V>.ToString() -> string
~override DryIoc.InstanceFactory.CreateExpressionOrDefault(DryIoc.Request request) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.InstanceFactory.GetDelegateOrDefault(DryIoc.Request request) -> DryIoc.FactoryDelegate
~override DryIoc.InstanceFactory.GetExpressionOrDefault(DryIoc.Request request) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.InstanceFactory.ImplementationType.get -> System.Type
~override DryIoc.InstanceFactory.Reuse.get -> DryIoc.IReuse
~override DryIoc.InstanceFactory.Setup.get -> DryIoc.Setup
~override DryIoc.Made.TypedMade<TService>.FactoryMethodKnownResultType.get -> System.Type
~override DryIoc.ParameterServiceInfo.Create(System.Type serviceType, DryIoc.ServiceDetails details) -> DryIoc.ServiceInfo
~override DryIoc.ParameterServiceInfo.ServiceType.get -> System.Type
~override DryIoc.PropertyOrFieldServiceInfo.Details.get -> DryIoc.ServiceDetails
~override DryIoc.ReflectionFactory.CreateExpressionOrDefault(DryIoc.Request request) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.ServiceInfo.Typed.ServiceType.get -> System.Type
~override DryIoc.ServiceInfo.Typed<TService>.ServiceType.get -> System.Type
~override DryIoc.WrapperExpressionFactory.CreateExpressionOrDefault(DryIoc.Request request) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.WrapperExpressionFactory.CreateExpressionWithWrappedFactory(DryIoc.Request request, DryIoc.Factory serviceFactory) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override DryIoc.WrapperExpressionFactory.Setup.get -> DryIoc.Setup
~override sealed DryIoc.FastExpressionCompiler.LightExpression.AssignBinaryExpression.Type.get -> System.Type
~override sealed DryIoc.FastExpressionCompiler.LightExpression.DebugInfoExpression.Type.get -> System.Type
~override sealed DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>.Type.get -> System.Type
~override sealed DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsInvocationExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsInvocationExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.FiveParametersExpression<TDelegate>.GetParameter(int i) -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.FiveParametersExpression<TDelegate>.Parameters.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.FiveParametersLambdaExpression.GetParameter(int i) -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.FiveParametersLambdaExpression.Parameters.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsInvocationExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsInvocationExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.FourParametersExpression<TDelegate>.GetParameter(int i) -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.FourParametersExpression<TDelegate>.Parameters.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.FourParametersLambdaExpression.GetParameter(int i) -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.FourParametersLambdaExpression.Parameters.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.IndexExpression.Type.get -> System.Type
~override sealed DryIoc.FastExpressionCompiler.LightExpression.ManyArgumentsIndexExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.ManyArgumentsInvocationExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.ManyArgumentsInvocationExpression.GetArgument(int index) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.ManyArgumentsMethodCallExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.ManyArgumentsMethodCallExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.ManyParametersExpression<TDelegate>.GetParameter(int index) -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.ManyParametersExpression<TDelegate>.Parameters.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.ManyParametersLambdaExpression.GetParameter(int index) -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.ManyParametersLambdaExpression.Parameters.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.ManyVariablesBlockExpression.GetArgument(int index) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.ManyVariablesBlockExpression.Variables.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression.Type.get -> System.Type
~override sealed DryIoc.FastExpressionCompiler.LightExpression.NewArrayExpression.Type.get -> System.Type
~override sealed DryIoc.FastExpressionCompiler.LightExpression.NotNullExpressionInvocationExpression.Expression.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.OneArgumentIndexExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.OneArgumentInvocationExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.OneArgumentInvocationExpression.GetArgument(int index) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.OneParameterExpression<TDelegate>.GetParameter(int index) -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.OneParameterExpression<TDelegate>.Parameters.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.OneParameterLambdaExpression.GetParameter(int index) -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.OneParameterLambdaExpression.Parameters.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.RuntimeVariablesExpression.Type.get -> System.Type
~override sealed DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsInvocationExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsInvocationExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.SixParametersExpression<TDelegate>.GetParameter(int i) -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.SixParametersExpression<TDelegate>.Parameters.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.SixParametersLambdaExpression.GetParameter(int i) -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.SixParametersLambdaExpression.Parameters.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.SwitchExpression.Type.get -> System.Type
~override sealed DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsInvocationExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsInvocationExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.ThreeParametersExpression<TDelegate>.GetParameter(int i) -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.ThreeParametersExpression<TDelegate>.Parameters.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.ThreeParametersLambdaExpression.GetParameter(int i) -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.ThreeParametersLambdaExpression.Parameters.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.TwoArgumentsInvocationExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.TwoArgumentsInvocationExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.TwoParametersExpression<TDelegate>.GetParameter(int i) -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.TwoParametersExpression<TDelegate>.Parameters.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.TwoParametersLambdaExpression.GetParameter(int index) -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~override sealed DryIoc.FastExpressionCompiler.LightExpression.TwoParametersLambdaExpression.Parameters.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression>
~override sealed DryIoc.FastExpressionCompiler.LightExpression.TypedLambdaExpression.Type.get -> System.Type
~override sealed DryIoc.FastExpressionCompiler.LightExpression.TypedUnaryExpression.Type.get -> System.Type
~override sealed DryIoc.ImTools.ImHashMap<K, V>.Entry.AddOrGetEntry(int hash, DryIoc.ImTools.ImHashMap<K, V>.Entry entry) -> DryIoc.ImTools.ImHashMap<K, V>
~override sealed DryIoc.ImTools.ImHashMapEntry<K, V>.GetEntryOrNull(int hash, K key) -> DryIoc.ImTools.ImHashMapEntry<K, V>
~override sealed DryIoc.ImTools.ImHashMapEntry<K, V>.Update(DryIoc.ImTools.ImHashMapEntry<K, V> newEntry) -> DryIoc.ImTools.ImHashMap<K, V>.Entry
~override sealed DryIoc.ImTools.ImHashMapEntry<K, V>.UpdateOrKeep<S>(S state, DryIoc.ImTools.ImHashMapEntry<K, V> newEntry, DryIoc.ImTools.ImHashMap<K, V>.UpdaterOrKeeper<S> updateOrKeep) -> DryIoc.ImTools.ImHashMap<K, V>.Entry
~readonly DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression.Left -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression.Right -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.BlockExpression.Expressions -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~readonly DryIoc.FastExpressionCompiler.LightExpression.CatchBlock.Body -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.CatchBlock.Filter -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.CatchBlock.Test -> System.Type
~readonly DryIoc.FastExpressionCompiler.LightExpression.CatchBlock.Variable -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ConditionalExpression.IfTrue -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ConditionalExpression.Test -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.DebugInfoExpression.Document -> DryIoc.FastExpressionCompiler.LightExpression.SymbolDocumentInfo
~readonly DryIoc.FastExpressionCompiler.LightExpression.ElementInit.AddMethod -> System.Reflection.MethodInfo
~readonly DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ArrayClosure.ConstantsAndNestedLambdas -> object[]
~readonly DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ArrayClosureWithNonPassedParams.NonPassedParams -> object[]
~readonly DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.NestedLambdaInfo.LambdaExpression -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.NestedLambdaWithConstantsAndNestedLambdas.ConstantsAndNestedLambdas -> object
~readonly DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.NestedLambdaWithConstantsAndNestedLambdas.NestedLambda -> object
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsInvocationExpression.Argument0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsInvocationExpression.Argument1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsInvocationExpression.Argument2 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsInvocationExpression.Argument3 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsInvocationExpression.Argument4 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsMethodCallExpression.Argument0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsMethodCallExpression.Argument1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsMethodCallExpression.Argument2 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsMethodCallExpression.Argument3 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsMethodCallExpression.Argument4 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsNewExpression.Argument0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsNewExpression.Argument1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsNewExpression.Argument2 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsNewExpression.Argument3 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveArgumentsNewExpression.Argument4 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveBindingsMemberInitExpression.Binding0 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveBindingsMemberInitExpression.Binding1 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveBindingsMemberInitExpression.Binding2 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveBindingsMemberInitExpression.Binding3 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveBindingsMemberInitExpression.Binding4 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveElementNewArrayInitExpression.Element0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveElementNewArrayInitExpression.Element1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveElementNewArrayInitExpression.Element2 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveElementNewArrayInitExpression.Element3 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveElementNewArrayInitExpression.Element4 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveParametersExpression<TDelegate>.Parameter0 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveParametersExpression<TDelegate>.Parameter1 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveParametersExpression<TDelegate>.Parameter2 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveParametersExpression<TDelegate>.Parameter3 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveParametersExpression<TDelegate>.Parameter4 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveParametersLambdaExpression.Parameter0 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveParametersLambdaExpression.Parameter1 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveParametersLambdaExpression.Parameter2 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveParametersLambdaExpression.Parameter3 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FiveParametersLambdaExpression.Parameter4 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsInvocationExpression.Argument0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsInvocationExpression.Argument1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsInvocationExpression.Argument2 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsInvocationExpression.Argument3 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsMethodCallExpression.Argument0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsMethodCallExpression.Argument1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsMethodCallExpression.Argument2 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsMethodCallExpression.Argument3 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsNewExpression.Argument0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsNewExpression.Argument1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsNewExpression.Argument2 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourArgumentsNewExpression.Argument3 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourBindingsMemberInitExpression.Binding0 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourBindingsMemberInitExpression.Binding1 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourBindingsMemberInitExpression.Binding2 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourBindingsMemberInitExpression.Binding3 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourElementNewArrayInitExpression.Element0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourElementNewArrayInitExpression.Element1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourElementNewArrayInitExpression.Element2 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourElementNewArrayInitExpression.Element3 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourParametersExpression<TDelegate>.Parameter0 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourParametersExpression<TDelegate>.Parameter1 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourParametersExpression<TDelegate>.Parameter2 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourParametersExpression<TDelegate>.Parameter3 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourParametersLambdaExpression.Parameter0 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourParametersLambdaExpression.Parameter1 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourParametersLambdaExpression.Parameter2 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.FourParametersLambdaExpression.Parameter3 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.GotoExpression.Target -> DryIoc.FastExpressionCompiler.LightExpression.LabelTarget
~readonly DryIoc.FastExpressionCompiler.LightExpression.IndexExpression.Object -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.LabelExpression.Target -> DryIoc.FastExpressionCompiler.LightExpression.LabelTarget
~readonly DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression.Body -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ListInitExpression.Initializers -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ElementInit>
~readonly DryIoc.FastExpressionCompiler.LightExpression.ListInitExpression.NewExpression -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.LoopExpression.Body -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.LoopExpression.BreakLabel -> DryIoc.FastExpressionCompiler.LightExpression.LabelTarget
~readonly DryIoc.FastExpressionCompiler.LightExpression.LoopExpression.ContinueLabel -> DryIoc.FastExpressionCompiler.LightExpression.LabelTarget
~readonly DryIoc.FastExpressionCompiler.LightExpression.MemberAssignment.Expression -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.MemberBinding.Member -> System.Reflection.MemberInfo
~readonly DryIoc.FastExpressionCompiler.LightExpression.MemberExpression.Member -> System.Reflection.MemberInfo
~readonly DryIoc.FastExpressionCompiler.LightExpression.MemberInitExpression.Expression -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.MemberListBinding.Initializers -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ElementInit>
~readonly DryIoc.FastExpressionCompiler.LightExpression.MemberMemberBinding.Bindings -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.MemberBinding>
~readonly DryIoc.FastExpressionCompiler.LightExpression.NewExpression.Constructor -> System.Reflection.ConstructorInfo
~readonly DryIoc.FastExpressionCompiler.LightExpression.OneArgumentElementInit.Argument -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.OneArgumentIndexExpression.Argument -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.OneArgumentInvocationExpression.Argument -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.OneArgumentMethodCallExpression.Argument -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.OneArgumentNewExpression.Argument -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.OneBindingMemberInitExpression.Binding -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.OneBoundNewArrayBoundsExpression.Bound -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.OneElementNewArrayInitExpression.Element -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.OneParameterExpression<TDelegate>.Parameter0 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.OneParameterLambdaExpression.Parameter0 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.RuntimeVariablesExpression.Variables -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression>
~readonly DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsMethodCallExpression.Argument0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsMethodCallExpression.Argument1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsMethodCallExpression.Argument2 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsMethodCallExpression.Argument3 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsMethodCallExpression.Argument4 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsMethodCallExpression.Argument5 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsMethodCallExpression.Argument6 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsNewExpression.Argument0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsNewExpression.Argument1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsNewExpression.Argument2 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsNewExpression.Argument3 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsNewExpression.Argument4 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsNewExpression.Argument5 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SevenArgumentsNewExpression.Argument6 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsInvocationExpression.Argument0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsInvocationExpression.Argument1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsInvocationExpression.Argument2 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsInvocationExpression.Argument3 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsInvocationExpression.Argument4 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsInvocationExpression.Argument5 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsMethodCallExpression.Argument0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsMethodCallExpression.Argument1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsMethodCallExpression.Argument2 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsMethodCallExpression.Argument3 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsMethodCallExpression.Argument4 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsMethodCallExpression.Argument5 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsNewExpression.Argument0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsNewExpression.Argument1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsNewExpression.Argument2 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsNewExpression.Argument3 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsNewExpression.Argument4 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixArgumentsNewExpression.Argument5 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixBindingsMemberInitExpression.Binding0 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixBindingsMemberInitExpression.Binding1 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixBindingsMemberInitExpression.Binding2 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixBindingsMemberInitExpression.Binding3 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixBindingsMemberInitExpression.Binding4 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixBindingsMemberInitExpression.Binding5 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixElementNewArrayInitExpression.Element0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixElementNewArrayInitExpression.Element1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixElementNewArrayInitExpression.Element2 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixElementNewArrayInitExpression.Element3 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixElementNewArrayInitExpression.Element4 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixElementNewArrayInitExpression.Element5 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixParametersExpression<TDelegate>.Parameter0 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixParametersExpression<TDelegate>.Parameter1 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixParametersExpression<TDelegate>.Parameter2 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixParametersExpression<TDelegate>.Parameter3 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixParametersExpression<TDelegate>.Parameter4 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixParametersExpression<TDelegate>.Parameter5 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixParametersLambdaExpression.Parameter0 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixParametersLambdaExpression.Parameter1 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixParametersLambdaExpression.Parameter2 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixParametersLambdaExpression.Parameter3 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixParametersLambdaExpression.Parameter4 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SixParametersLambdaExpression.Parameter5 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SwitchCase.Body -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SwitchCase.TestValues -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~readonly DryIoc.FastExpressionCompiler.LightExpression.SwitchExpression.DefaultBody -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.SwitchExpression.SwitchValue -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsInvocationExpression.Argument0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsInvocationExpression.Argument1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsInvocationExpression.Argument2 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsMethodCallExpression.Argument0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsMethodCallExpression.Argument1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsMethodCallExpression.Argument2 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsNewExpression.Argument0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsNewExpression.Argument1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeArgumentsNewExpression.Argument2 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeBindingsMemberInitExpression.Binding0 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeBindingsMemberInitExpression.Binding1 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeBindingsMemberInitExpression.Binding2 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeElementNewArrayInitExpression.Element0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeElementNewArrayInitExpression.Element1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeElementNewArrayInitExpression.Element2 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeParametersExpression<TDelegate>.Parameter0 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeParametersExpression<TDelegate>.Parameter1 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeParametersExpression<TDelegate>.Parameter2 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeParametersLambdaExpression.Parameter0 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeParametersLambdaExpression.Parameter1 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.ThreeParametersLambdaExpression.Parameter2 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.TryExpression.Body -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.TwoArgumentsInvocationExpression.Argument0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.TwoArgumentsInvocationExpression.Argument1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.TwoArgumentsMethodCallExpression.Argument0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.TwoArgumentsMethodCallExpression.Argument1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.TwoArgumentsNewExpression.Argument0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.TwoArgumentsNewExpression.Argument1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.TwoBindingsMemberInitExpression.Binding0 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.TwoBindingsMemberInitExpression.Binding1 -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~readonly DryIoc.FastExpressionCompiler.LightExpression.TwoElementNewArrayInitExpression.Element0 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.TwoElementNewArrayInitExpression.Element1 -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.TwoParametersExpression<TDelegate>.Parameter0 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.TwoParametersExpression<TDelegate>.Parameter1 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.TwoParametersLambdaExpression.Parameter0 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.TwoParametersLambdaExpression.Parameter1 -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~readonly DryIoc.FastExpressionCompiler.LightExpression.TypeBinaryExpression.Expression -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression.Operand -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~readonly DryIoc.ImTools.ImList<T>.Tail -> DryIoc.ImTools.ImList<T>
~readonly DryIoc.ImTools.ImZipper<T>.Left -> DryIoc.ImTools.ImList<T>
~readonly DryIoc.ImTools.ImZipper<T>.Right -> DryIoc.ImTools.ImList<T>
~readonly DryIoc.InstanceFactory.Instance -> object
~readonly DryIoc.Interpreter.ParentLambdaArgs.ParamExprs -> DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider
~static DryIoc.ContainerTools.CreateChild(this DryIoc.IContainer container, DryIoc.RegistrySharing registrySharing, object childDefaultServiceKey, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, DryIoc.Rules newRules = null, bool withDisposables = false) -> DryIoc.IContainer
~static DryIoc.ContainerTools.GetRequestExpression(this DryIoc.IContainer container, DryIoc.Request request, DryIoc.RequestFlags requestParentFlags = DryIoc.RequestFlags.Default) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~static DryIoc.ContainerTools.Use(this DryIoc.IContainer container, System.Type serviceType, DryIoc.FactoryDelegate factory) -> void
~static DryIoc.CurrentScopeReuse.GetNameScopedViaFactoryDelegate(DryIoc.IResolverContext r, object scopeName, bool throwIfNoScope, int id, DryIoc.FactoryDelegate createValue, int disposalOrder) -> object
~static DryIoc.CurrentScopeReuse.GetScopedOrSingletonViaFactoryDelegateWithDisposalOrder(DryIoc.IResolverContext r, int id, DryIoc.FactoryDelegate createValue, int disposalOrder = 0) -> object
~static DryIoc.CurrentScopeReuse.GetScopedViaFactoryDelegate(DryIoc.IResolverContext r, bool throwIfNoScope, int id, DryIoc.FactoryDelegate createValue) -> object
~static DryIoc.CurrentScopeReuse.GetScopedViaFactoryDelegateWithDisposalOrder(DryIoc.IResolverContext r, bool throwIfNoScope, int id, DryIoc.FactoryDelegate createValue, int disposalOrder) -> object
~static DryIoc.DelegateFactory.Of(DryIoc.FactoryDelegate factoryDelegate) -> DryIoc.DelegateFactory
~static DryIoc.DelegateFactory.Of(DryIoc.FactoryDelegate factoryDelegate, DryIoc.IReuse reuse) -> DryIoc.DelegateFactory
~static DryIoc.DelegateFactory.Of(DryIoc.FactoryDelegate factoryDelegate, DryIoc.IReuse reuse, DryIoc.Setup setup) -> DryIoc.DelegateFactory
~static DryIoc.DelegateFactory.Of(DryIoc.FactoryDelegate factoryDelegate, DryIoc.Setup setup) -> DryIoc.DelegateFactory
~static DryIoc.FactoryDelegateCompiler.CompileToFactoryDelegate(this DryIoc.FastExpressionCompiler.LightExpression.Expression expression, bool preferInterpretation) -> DryIoc.FactoryDelegate
~static DryIoc.FactoryDelegateCompiler.CompileToFactoryDelegate(this DryIoc.FastExpressionCompiler.LightExpression.Expression expression, System.Type factoryDelegateType, System.Type resultType, bool preferInterpretation) -> object
~static DryIoc.FactoryDelegateCompiler.InvokeMethod -> System.Reflection.MethodInfo
~static DryIoc.FactoryDelegateCompiler.NormalizeExpression(this DryIoc.FastExpressionCompiler.LightExpression.Expression expr) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~static DryIoc.FactoryDelegateCompiler.WrapInFactoryExpression(this DryIoc.FastExpressionCompiler.LightExpression.Expression expression) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<DryIoc.FactoryDelegate>
~static DryIoc.FactoryDelegateCompiler.WrapInFactoryExpressionWithoutNormalization(this DryIoc.FastExpressionCompiler.LightExpression.Expression expression) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<DryIoc.FactoryDelegate>
~static DryIoc.FastExpressionCompiler.LightExpression.CodePrinter.AppendMethod(this System.Text.StringBuilder sb, System.Reflection.MethodInfo method, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null) -> System.Text.StringBuilder
~static DryIoc.FastExpressionCompiler.LightExpression.CodePrinter.AppendTypeof(this System.Text.StringBuilder sb, System.Type type, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null, bool printGenericTypeArgs = false) -> System.Text.StringBuilder
~static DryIoc.FastExpressionCompiler.LightExpression.CodePrinter.AppendTypeofList(this System.Text.StringBuilder sb, System.Type[] types, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null, bool printGenericTypeArgs = false) -> System.Text.StringBuilder
~static DryIoc.FastExpressionCompiler.LightExpression.CodePrinter.ToArrayInitializerCode(this System.Collections.IEnumerable items, System.Type itemType, DryIoc.FastExpressionCompiler.LightExpression.CodePrinter.IObjectToCode notRecognizedToCode, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null) -> string
~static DryIoc.FastExpressionCompiler.LightExpression.CodePrinter.ToCode(this bool x) -> string
~static DryIoc.FastExpressionCompiler.LightExpression.CodePrinter.ToCode(this object x, DryIoc.FastExpressionCompiler.LightExpression.CodePrinter.IObjectToCode notRecognizedToCode, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null) -> string
~static DryIoc.FastExpressionCompiler.LightExpression.CodePrinter.ToCode(this string x) -> string
~static DryIoc.FastExpressionCompiler.LightExpression.CodePrinter.ToCode(this System.Type type, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null, bool printGenericTypeArgs = false) -> string
~static DryIoc.FastExpressionCompiler.LightExpression.CodePrinter.ToCommaSeparatedCode(this System.Collections.IEnumerable items, DryIoc.FastExpressionCompiler.LightExpression.CodePrinter.IObjectToCode notRecognizedToCode, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null) -> string
~static DryIoc.FastExpressionCompiler.LightExpression.CodePrinter.ToEnumValueCode(this System.Type enumType, object x, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null) -> string
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Add(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Add(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.AddAssign(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.AddAssignChecked(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.AddChecked(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.AddChecked(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.And(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.And(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.AndAlso(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.AndAlso(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.AndAssign(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ArrayAccess(DryIoc.FastExpressionCompiler.LightExpression.Expression array, DryIoc.FastExpressionCompiler.LightExpression.Expression index) -> DryIoc.FastExpressionCompiler.LightExpression.IndexExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ArrayAccess(DryIoc.FastExpressionCompiler.LightExpression.Expression array, params DryIoc.FastExpressionCompiler.LightExpression.Expression[] indexes) -> DryIoc.FastExpressionCompiler.LightExpression.IndexExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ArrayAccess(DryIoc.FastExpressionCompiler.LightExpression.Expression array, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> indexes) -> DryIoc.FastExpressionCompiler.LightExpression.IndexExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ArrayIndex(DryIoc.FastExpressionCompiler.LightExpression.Expression array, DryIoc.FastExpressionCompiler.LightExpression.Expression index) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ArrayIndex(DryIoc.FastExpressionCompiler.LightExpression.Expression array, DryIoc.FastExpressionCompiler.LightExpression.Expression index, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ArrayIndex(DryIoc.FastExpressionCompiler.LightExpression.Expression array, params DryIoc.FastExpressionCompiler.LightExpression.Expression[] indexes) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ArrayIndex(DryIoc.FastExpressionCompiler.LightExpression.Expression array, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> indexes) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ArrayLength(DryIoc.FastExpressionCompiler.LightExpression.Expression array) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Assign(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Bind(System.Reflection.MemberInfo member, DryIoc.FastExpressionCompiler.LightExpression.Expression expression) -> DryIoc.FastExpressionCompiler.LightExpression.MemberAssignment
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Block(DryIoc.FastExpressionCompiler.LightExpression.Expression expr0) -> DryIoc.FastExpressionCompiler.LightExpression.BlockExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Block(DryIoc.FastExpressionCompiler.LightExpression.Expression expr0, DryIoc.FastExpressionCompiler.LightExpression.Expression expr1) -> DryIoc.FastExpressionCompiler.LightExpression.BlockExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Block(DryIoc.FastExpressionCompiler.LightExpression.Expression expr0, DryIoc.FastExpressionCompiler.LightExpression.Expression expr1, DryIoc.FastExpressionCompiler.LightExpression.Expression expr2) -> DryIoc.FastExpressionCompiler.LightExpression.BlockExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Block(params DryIoc.FastExpressionCompiler.LightExpression.Expression[] expressions) -> DryIoc.FastExpressionCompiler.LightExpression.BlockExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Block(System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> expressions) -> DryIoc.FastExpressionCompiler.LightExpression.BlockExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Block(System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> variables, DryIoc.FastExpressionCompiler.LightExpression.Expression expr0) -> DryIoc.FastExpressionCompiler.LightExpression.BlockExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Block(System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> variables, DryIoc.FastExpressionCompiler.LightExpression.Expression expr0, DryIoc.FastExpressionCompiler.LightExpression.Expression expr1) -> DryIoc.FastExpressionCompiler.LightExpression.BlockExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Block(System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> variables, DryIoc.FastExpressionCompiler.LightExpression.Expression expr0, DryIoc.FastExpressionCompiler.LightExpression.Expression expr1, DryIoc.FastExpressionCompiler.LightExpression.Expression expr2) -> DryIoc.FastExpressionCompiler.LightExpression.BlockExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Block(System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> variables, params DryIoc.FastExpressionCompiler.LightExpression.Expression[] expressions) -> DryIoc.FastExpressionCompiler.LightExpression.BlockExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Block(System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> variables, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> expressions) -> DryIoc.FastExpressionCompiler.LightExpression.BlockExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Block(System.Type type, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> variables, DryIoc.FastExpressionCompiler.LightExpression.Expression expr0) -> DryIoc.FastExpressionCompiler.LightExpression.BlockExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Block(System.Type type, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> variables, DryIoc.FastExpressionCompiler.LightExpression.Expression expr0, DryIoc.FastExpressionCompiler.LightExpression.Expression expr1) -> DryIoc.FastExpressionCompiler.LightExpression.BlockExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Block(System.Type type, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> variables, DryIoc.FastExpressionCompiler.LightExpression.Expression expr0, DryIoc.FastExpressionCompiler.LightExpression.Expression expr1, DryIoc.FastExpressionCompiler.LightExpression.Expression expr2) -> DryIoc.FastExpressionCompiler.LightExpression.BlockExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Block(System.Type type, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> variables, params DryIoc.FastExpressionCompiler.LightExpression.Expression[] expressions) -> DryIoc.FastExpressionCompiler.LightExpression.BlockExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Block(System.Type type, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> variables, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> expressions) -> DryIoc.FastExpressionCompiler.LightExpression.BlockExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Break(DryIoc.FastExpressionCompiler.LightExpression.LabelTarget target) -> DryIoc.FastExpressionCompiler.LightExpression.GotoExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Break(DryIoc.FastExpressionCompiler.LightExpression.LabelTarget target, DryIoc.FastExpressionCompiler.LightExpression.Expression value) -> DryIoc.FastExpressionCompiler.LightExpression.GotoExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Break(DryIoc.FastExpressionCompiler.LightExpression.LabelTarget target, DryIoc.FastExpressionCompiler.LightExpression.Expression value, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.GotoExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Break(DryIoc.FastExpressionCompiler.LightExpression.LabelTarget target, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.GotoExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, string methodName, System.Type[] typeArguments, params DryIoc.FastExpressionCompiler.LightExpression.Expression[] arguments) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, string methodName, System.Type[] typeArguments, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> arguments) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.MethodInfo method, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.MethodInfo method, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1, DryIoc.FastExpressionCompiler.LightExpression.Expression arg2) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.MethodInfo method, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1, DryIoc.FastExpressionCompiler.LightExpression.Expression arg2, DryIoc.FastExpressionCompiler.LightExpression.Expression arg3) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.MethodInfo method, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1, DryIoc.FastExpressionCompiler.LightExpression.Expression arg2, DryIoc.FastExpressionCompiler.LightExpression.Expression arg3, DryIoc.FastExpressionCompiler.LightExpression.Expression arg4) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.MethodInfo method, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1, DryIoc.FastExpressionCompiler.LightExpression.Expression arg2, DryIoc.FastExpressionCompiler.LightExpression.Expression arg3, DryIoc.FastExpressionCompiler.LightExpression.Expression arg4, DryIoc.FastExpressionCompiler.LightExpression.Expression arg5) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.MethodInfo method, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1, DryIoc.FastExpressionCompiler.LightExpression.Expression arg2, DryIoc.FastExpressionCompiler.LightExpression.Expression arg3, DryIoc.FastExpressionCompiler.LightExpression.Expression arg4, DryIoc.FastExpressionCompiler.LightExpression.Expression arg5, DryIoc.FastExpressionCompiler.LightExpression.Expression arg6) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.MethodInfo method, DryIoc.FastExpressionCompiler.LightExpression.Expression argument) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.MethodInfo method, params DryIoc.FastExpressionCompiler.LightExpression.Expression[] arguments) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> arguments) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(System.Reflection.MethodInfo method, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(System.Reflection.MethodInfo method, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1, DryIoc.FastExpressionCompiler.LightExpression.Expression arg2) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(System.Reflection.MethodInfo method, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1, DryIoc.FastExpressionCompiler.LightExpression.Expression arg2, DryIoc.FastExpressionCompiler.LightExpression.Expression arg3) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(System.Reflection.MethodInfo method, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1, DryIoc.FastExpressionCompiler.LightExpression.Expression arg2, DryIoc.FastExpressionCompiler.LightExpression.Expression arg3, DryIoc.FastExpressionCompiler.LightExpression.Expression arg4) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(System.Reflection.MethodInfo method, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1, DryIoc.FastExpressionCompiler.LightExpression.Expression arg2, DryIoc.FastExpressionCompiler.LightExpression.Expression arg3, DryIoc.FastExpressionCompiler.LightExpression.Expression arg4, DryIoc.FastExpressionCompiler.LightExpression.Expression arg5) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(System.Reflection.MethodInfo method, DryIoc.FastExpressionCompiler.LightExpression.Expression argument) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(System.Reflection.MethodInfo method, params DryIoc.FastExpressionCompiler.LightExpression.Expression[] arguments) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> arguments) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(System.Type type, string methodName, System.Type[] typeArguments, params DryIoc.FastExpressionCompiler.LightExpression.Expression[] arguments) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Call(System.Type type, string methodName, System.Type[] typeArguments, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> arguments) -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.CallIfNotNull(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.CallIfNotNull(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> arguments) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Catch(DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression variable, DryIoc.FastExpressionCompiler.LightExpression.Expression body) -> DryIoc.FastExpressionCompiler.LightExpression.CatchBlock
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Catch(System.Type test, DryIoc.FastExpressionCompiler.LightExpression.Expression body) -> DryIoc.FastExpressionCompiler.LightExpression.CatchBlock
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Coalesce(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Coalesce(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression conversion) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Coalesce(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Condition(DryIoc.FastExpressionCompiler.LightExpression.Expression test, DryIoc.FastExpressionCompiler.LightExpression.Expression ifTrue, DryIoc.FastExpressionCompiler.LightExpression.Expression ifFalse) -> DryIoc.FastExpressionCompiler.LightExpression.ConditionalExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Condition(DryIoc.FastExpressionCompiler.LightExpression.Expression test, DryIoc.FastExpressionCompiler.LightExpression.Expression ifTrue, DryIoc.FastExpressionCompiler.LightExpression.Expression ifFalse, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.ConditionalExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Constant(bool value) -> DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Constant(object value) -> DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Constant(object value, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ConstantInt(int value) -> DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ConstantNull(System.Type type = null) -> DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ConstantNull<T>() -> DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ConstantOf<T>(T value) -> DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Continue(DryIoc.FastExpressionCompiler.LightExpression.LabelTarget target) -> DryIoc.FastExpressionCompiler.LightExpression.GotoExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Continue(DryIoc.FastExpressionCompiler.LightExpression.LabelTarget target, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.GotoExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Convert(DryIoc.FastExpressionCompiler.LightExpression.Expression expression, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Convert(DryIoc.FastExpressionCompiler.LightExpression.Expression expression, System.Type type, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Convert<T>(DryIoc.FastExpressionCompiler.LightExpression.Expression expression) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ConvertChecked(DryIoc.FastExpressionCompiler.LightExpression.Expression expression, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ConvertChecked(DryIoc.FastExpressionCompiler.LightExpression.Expression expression, System.Type type, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ConvertViaCastClassIntrinsic(DryIoc.FastExpressionCompiler.LightExpression.Expression expression, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ConvertViaCastClassIntrinsic<T>(DryIoc.FastExpressionCompiler.LightExpression.Expression expression) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.DebugInfo(DryIoc.FastExpressionCompiler.LightExpression.SymbolDocumentInfo doc, int startLine, int startColumn, int endLine, int endColumn) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Decrement(DryIoc.FastExpressionCompiler.LightExpression.Expression expression) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Default(System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.DefaultExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Divide(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Divide(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.DivideAssign(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ElementInit(System.Reflection.MethodInfo addMethod, DryIoc.FastExpressionCompiler.LightExpression.Expression arg) -> DryIoc.FastExpressionCompiler.LightExpression.ElementInit
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ElementInit(System.Reflection.MethodInfo addMethod, params DryIoc.FastExpressionCompiler.LightExpression.Expression[] arguments) -> DryIoc.FastExpressionCompiler.LightExpression.ElementInit
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ElementInit(System.Reflection.MethodInfo addMethod, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> arguments) -> DryIoc.FastExpressionCompiler.LightExpression.ElementInit
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Empty() -> DryIoc.FastExpressionCompiler.LightExpression.DefaultExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Equal(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Equal(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, bool liftToNull, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ExclusiveOr(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ExclusiveOr(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ExclusiveOrAssign(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Field(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, string fieldName) -> DryIoc.FastExpressionCompiler.LightExpression.MemberExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Field(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.FieldInfo field) -> DryIoc.FastExpressionCompiler.LightExpression.MemberExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Field(System.Reflection.FieldInfo field) -> DryIoc.FastExpressionCompiler.LightExpression.MemberExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.GetArithmeticBinary(System.Linq.Expressions.ExpressionType nodeType, DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Reflection.MethodInfo method = null) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.GetLeftTypedBinary(System.Linq.Expressions.ExpressionType nodeType, DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Reflection.MethodInfo method = null) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.GetLogicalBinary(System.Linq.Expressions.ExpressionType nodeType, DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, bool liftToNull, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Goto(DryIoc.FastExpressionCompiler.LightExpression.LabelTarget target) -> DryIoc.FastExpressionCompiler.LightExpression.GotoExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Goto(DryIoc.FastExpressionCompiler.LightExpression.LabelTarget target, DryIoc.FastExpressionCompiler.LightExpression.Expression value) -> DryIoc.FastExpressionCompiler.LightExpression.GotoExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Goto(DryIoc.FastExpressionCompiler.LightExpression.LabelTarget target, DryIoc.FastExpressionCompiler.LightExpression.Expression value, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.GotoExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Goto(DryIoc.FastExpressionCompiler.LightExpression.LabelTarget target, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.GotoExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.GreaterThan(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.GreaterThan(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, bool liftToNull, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.GreaterThanOrEqual(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.GreaterThanOrEqual(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, bool liftToNull, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.IfThen(DryIoc.FastExpressionCompiler.LightExpression.Expression test, DryIoc.FastExpressionCompiler.LightExpression.Expression ifTrue) -> DryIoc.FastExpressionCompiler.LightExpression.ConditionalExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.IfThenElse(DryIoc.FastExpressionCompiler.LightExpression.Expression test, DryIoc.FastExpressionCompiler.LightExpression.Expression ifTrue, DryIoc.FastExpressionCompiler.LightExpression.Expression ifFalse) -> DryIoc.FastExpressionCompiler.LightExpression.ConditionalExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Increment(DryIoc.FastExpressionCompiler.LightExpression.Expression expression) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(DryIoc.FastExpressionCompiler.LightExpression.Expression expression, DryIoc.FastExpressionCompiler.LightExpression.Expression a0) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(DryIoc.FastExpressionCompiler.LightExpression.Expression expression, DryIoc.FastExpressionCompiler.LightExpression.Expression a0, DryIoc.FastExpressionCompiler.LightExpression.Expression a1) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(DryIoc.FastExpressionCompiler.LightExpression.Expression expression, DryIoc.FastExpressionCompiler.LightExpression.Expression a0, DryIoc.FastExpressionCompiler.LightExpression.Expression a1, DryIoc.FastExpressionCompiler.LightExpression.Expression a2) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(DryIoc.FastExpressionCompiler.LightExpression.Expression expression, DryIoc.FastExpressionCompiler.LightExpression.Expression a0, DryIoc.FastExpressionCompiler.LightExpression.Expression a1, DryIoc.FastExpressionCompiler.LightExpression.Expression a2, DryIoc.FastExpressionCompiler.LightExpression.Expression a3) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(DryIoc.FastExpressionCompiler.LightExpression.Expression expression, DryIoc.FastExpressionCompiler.LightExpression.Expression a0, DryIoc.FastExpressionCompiler.LightExpression.Expression a1, DryIoc.FastExpressionCompiler.LightExpression.Expression a2, DryIoc.FastExpressionCompiler.LightExpression.Expression a3, DryIoc.FastExpressionCompiler.LightExpression.Expression a4) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(DryIoc.FastExpressionCompiler.LightExpression.Expression expression, DryIoc.FastExpressionCompiler.LightExpression.Expression a0, DryIoc.FastExpressionCompiler.LightExpression.Expression a1, DryIoc.FastExpressionCompiler.LightExpression.Expression a2, DryIoc.FastExpressionCompiler.LightExpression.Expression a3, DryIoc.FastExpressionCompiler.LightExpression.Expression a4, DryIoc.FastExpressionCompiler.LightExpression.Expression a5) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(DryIoc.FastExpressionCompiler.LightExpression.Expression expression, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> args) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(DryIoc.FastExpressionCompiler.LightExpression.Expression lambda, params DryIoc.FastExpressionCompiler.LightExpression.Expression[] args) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression expression) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression expression, DryIoc.FastExpressionCompiler.LightExpression.Expression a0) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression expression, DryIoc.FastExpressionCompiler.LightExpression.Expression a0, DryIoc.FastExpressionCompiler.LightExpression.Expression a1) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression expression, DryIoc.FastExpressionCompiler.LightExpression.Expression a0, DryIoc.FastExpressionCompiler.LightExpression.Expression a1, DryIoc.FastExpressionCompiler.LightExpression.Expression a2) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression expression, DryIoc.FastExpressionCompiler.LightExpression.Expression a0, DryIoc.FastExpressionCompiler.LightExpression.Expression a1, DryIoc.FastExpressionCompiler.LightExpression.Expression a2, DryIoc.FastExpressionCompiler.LightExpression.Expression a3) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression expression, DryIoc.FastExpressionCompiler.LightExpression.Expression a0, DryIoc.FastExpressionCompiler.LightExpression.Expression a1, DryIoc.FastExpressionCompiler.LightExpression.Expression a2, DryIoc.FastExpressionCompiler.LightExpression.Expression a3, DryIoc.FastExpressionCompiler.LightExpression.Expression a4) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression expression, DryIoc.FastExpressionCompiler.LightExpression.Expression a0, DryIoc.FastExpressionCompiler.LightExpression.Expression a1, DryIoc.FastExpressionCompiler.LightExpression.Expression a2, DryIoc.FastExpressionCompiler.LightExpression.Expression a3, DryIoc.FastExpressionCompiler.LightExpression.Expression a4, DryIoc.FastExpressionCompiler.LightExpression.Expression a5) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(System.Type returnType, DryIoc.FastExpressionCompiler.LightExpression.Expression expression, DryIoc.FastExpressionCompiler.LightExpression.Expression a0) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(System.Type returnType, DryIoc.FastExpressionCompiler.LightExpression.Expression expression, DryIoc.FastExpressionCompiler.LightExpression.Expression a0, DryIoc.FastExpressionCompiler.LightExpression.Expression a1) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(System.Type returnType, DryIoc.FastExpressionCompiler.LightExpression.Expression expression, DryIoc.FastExpressionCompiler.LightExpression.Expression a0, DryIoc.FastExpressionCompiler.LightExpression.Expression a1, DryIoc.FastExpressionCompiler.LightExpression.Expression a2) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(System.Type returnType, DryIoc.FastExpressionCompiler.LightExpression.Expression expression, DryIoc.FastExpressionCompiler.LightExpression.Expression a0, DryIoc.FastExpressionCompiler.LightExpression.Expression a1, DryIoc.FastExpressionCompiler.LightExpression.Expression a2, DryIoc.FastExpressionCompiler.LightExpression.Expression a3) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(System.Type returnType, DryIoc.FastExpressionCompiler.LightExpression.Expression expression, DryIoc.FastExpressionCompiler.LightExpression.Expression a0, DryIoc.FastExpressionCompiler.LightExpression.Expression a1, DryIoc.FastExpressionCompiler.LightExpression.Expression a2, DryIoc.FastExpressionCompiler.LightExpression.Expression a3, DryIoc.FastExpressionCompiler.LightExpression.Expression a4) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(System.Type returnType, DryIoc.FastExpressionCompiler.LightExpression.Expression expression, DryIoc.FastExpressionCompiler.LightExpression.Expression a0, DryIoc.FastExpressionCompiler.LightExpression.Expression a1, DryIoc.FastExpressionCompiler.LightExpression.Expression a2, DryIoc.FastExpressionCompiler.LightExpression.Expression a3, DryIoc.FastExpressionCompiler.LightExpression.Expression a4, DryIoc.FastExpressionCompiler.LightExpression.Expression a5) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Invoke(System.Type returnType, DryIoc.FastExpressionCompiler.LightExpression.Expression expression, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> args) -> DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.IsFalse(DryIoc.FastExpressionCompiler.LightExpression.Expression expression) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.IsTrue(DryIoc.FastExpressionCompiler.LightExpression.Expression expression) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Label() -> DryIoc.FastExpressionCompiler.LightExpression.LabelTarget
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Label(DryIoc.FastExpressionCompiler.LightExpression.LabelTarget target) -> DryIoc.FastExpressionCompiler.LightExpression.LabelExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Label(DryIoc.FastExpressionCompiler.LightExpression.LabelTarget target, DryIoc.FastExpressionCompiler.LightExpression.Expression defaultValue) -> DryIoc.FastExpressionCompiler.LightExpression.LabelExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Label(string name) -> DryIoc.FastExpressionCompiler.LightExpression.LabelTarget
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Label(System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.LabelTarget
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Label(System.Type type, string name) -> DryIoc.FastExpressionCompiler.LightExpression.LabelTarget
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(DryIoc.FastExpressionCompiler.LightExpression.Expression body) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p2) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p2, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p3) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p2, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p3, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p4) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p2, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p3, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p4, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p5) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression parameter) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(DryIoc.FastExpressionCompiler.LightExpression.Expression body, params DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression[] parameters) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(DryIoc.FastExpressionCompiler.LightExpression.Expression body, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> parameters, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(DryIoc.FastExpressionCompiler.LightExpression.Expression body, System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> parameters) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(DryIoc.FastExpressionCompiler.LightExpression.Expression body, System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> parameters, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(System.Type delegateType, DryIoc.FastExpressionCompiler.LightExpression.Expression body) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(System.Type delegateType, DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p2, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p3, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p4, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p5, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(System.Type delegateType, DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p2, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p3, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p4, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(System.Type delegateType, DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p2, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p3, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(System.Type delegateType, DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p2, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(System.Type delegateType, DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(System.Type delegateType, DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(System.Type delegateType, DryIoc.FastExpressionCompiler.LightExpression.Expression body, params DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression[] parameters) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(System.Type delegateType, DryIoc.FastExpressionCompiler.LightExpression.Expression body, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> parameters, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(System.Type delegateType, DryIoc.FastExpressionCompiler.LightExpression.Expression body, System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> parameters) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(System.Type delegateType, DryIoc.FastExpressionCompiler.LightExpression.Expression body, System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> parameters, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda(System.Type delegateType, DryIoc.FastExpressionCompiler.LightExpression.Expression body, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(DryIoc.FastExpressionCompiler.LightExpression.Expression body) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p2) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p2, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p3) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p2, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p3, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p4) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p2, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p3, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p4, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p5) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p2, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p3, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p4, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p5, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p2, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p3, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p4, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p2, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p3, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p2, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p1, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression p0, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(DryIoc.FastExpressionCompiler.LightExpression.Expression body, params DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression[] parameters) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(DryIoc.FastExpressionCompiler.LightExpression.Expression body, string name, params DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression[] parameters) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(DryIoc.FastExpressionCompiler.LightExpression.Expression body, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> parameters) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(DryIoc.FastExpressionCompiler.LightExpression.Expression body, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> parameters, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(DryIoc.FastExpressionCompiler.LightExpression.Expression body, System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> parameters, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(DryIoc.FastExpressionCompiler.LightExpression.Expression body, System.Type returnType) -> DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate>
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.LeftShift(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.LeftShift(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.LeftShiftAssign(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.LessThan(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.LessThan(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, bool liftToNull, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.LessThanOrEqual(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.LessThanOrEqual(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, bool liftToNull, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ListBind(System.Reflection.MemberInfo member, params DryIoc.FastExpressionCompiler.LightExpression.ElementInit[] initializers) -> DryIoc.FastExpressionCompiler.LightExpression.MemberListBinding
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ListBind(System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.ElementInit> initializers) -> DryIoc.FastExpressionCompiler.LightExpression.MemberListBinding
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ListInit(DryIoc.FastExpressionCompiler.LightExpression.NewExpression newExpression, params DryIoc.FastExpressionCompiler.LightExpression.ElementInit[] initializers) -> DryIoc.FastExpressionCompiler.LightExpression.ListInitExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ListInit(DryIoc.FastExpressionCompiler.LightExpression.NewExpression newExpression, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.ElementInit> initializers) -> DryIoc.FastExpressionCompiler.LightExpression.ListInitExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Loop(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.LabelTarget break = null) -> DryIoc.FastExpressionCompiler.LightExpression.LoopExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Loop(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.LabelTarget break, DryIoc.FastExpressionCompiler.LightExpression.LabelTarget continue) -> DryIoc.FastExpressionCompiler.LightExpression.LoopExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MakeArrayBounds(System.Type type, System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression> bounds) -> DryIoc.FastExpressionCompiler.LightExpression.NewArrayExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MakeBinary(System.Linq.Expressions.ExpressionType binaryType, DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, bool liftToNull, System.Reflection.MethodInfo method, DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression conversion = null) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MakeBinary(System.Linq.Expressions.ExpressionType binaryType, DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression conversion = null) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MakeBlock(System.Type type, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> variables, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> expressions) -> DryIoc.FastExpressionCompiler.LightExpression.BlockExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MakeCatchBlock(System.Type test, DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression variable, DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.Expression filter) -> DryIoc.FastExpressionCompiler.LightExpression.CatchBlock
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind kind, DryIoc.FastExpressionCompiler.LightExpression.LabelTarget target, DryIoc.FastExpressionCompiler.LightExpression.Expression value, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.GotoExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MakeIndex(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.PropertyInfo indexer, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> arguments) -> DryIoc.FastExpressionCompiler.LightExpression.IndexExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MakeMemberAccess(DryIoc.FastExpressionCompiler.LightExpression.Expression expression, System.Reflection.MemberInfo member) -> DryIoc.FastExpressionCompiler.LightExpression.MemberExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MakeUnary(System.Linq.Expressions.ExpressionType unaryType, DryIoc.FastExpressionCompiler.LightExpression.Expression operand, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MemberBind(System.Reflection.MemberInfo member, params DryIoc.FastExpressionCompiler.LightExpression.MemberBinding[] bindings) -> DryIoc.FastExpressionCompiler.LightExpression.MemberMemberBinding
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MemberBind(System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.MemberBinding> bindings) -> DryIoc.FastExpressionCompiler.LightExpression.MemberMemberBinding
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MemberInit(DryIoc.FastExpressionCompiler.LightExpression.Expression expression, params DryIoc.FastExpressionCompiler.LightExpression.MemberBinding[] bindings) -> DryIoc.FastExpressionCompiler.LightExpression.MemberInitExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MemberInit(DryIoc.FastExpressionCompiler.LightExpression.Expression expression, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.MemberBinding> assignments) -> DryIoc.FastExpressionCompiler.LightExpression.MemberInitExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MemberInit(DryIoc.FastExpressionCompiler.LightExpression.NewExpression newExpr) -> DryIoc.FastExpressionCompiler.LightExpression.MemberInitExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MemberInit(DryIoc.FastExpressionCompiler.LightExpression.NewExpression newExpr, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b0, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b1) -> DryIoc.FastExpressionCompiler.LightExpression.MemberInitExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MemberInit(DryIoc.FastExpressionCompiler.LightExpression.NewExpression newExpr, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b0, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b1, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b2) -> DryIoc.FastExpressionCompiler.LightExpression.MemberInitExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MemberInit(DryIoc.FastExpressionCompiler.LightExpression.NewExpression newExpr, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b0, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b1, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b2, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b3) -> DryIoc.FastExpressionCompiler.LightExpression.MemberInitExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MemberInit(DryIoc.FastExpressionCompiler.LightExpression.NewExpression newExpr, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b0, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b1, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b2, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b3, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b4) -> DryIoc.FastExpressionCompiler.LightExpression.MemberInitExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MemberInit(DryIoc.FastExpressionCompiler.LightExpression.NewExpression newExpr, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b0, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b1, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b2, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b3, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b4, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding b5) -> DryIoc.FastExpressionCompiler.LightExpression.MemberInitExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MemberInit(DryIoc.FastExpressionCompiler.LightExpression.NewExpression newExpr, DryIoc.FastExpressionCompiler.LightExpression.MemberBinding binding) -> DryIoc.FastExpressionCompiler.LightExpression.MemberInitExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MemberInit(DryIoc.FastExpressionCompiler.LightExpression.NewExpression newExpr, params DryIoc.FastExpressionCompiler.LightExpression.MemberBinding[] bindings) -> DryIoc.FastExpressionCompiler.LightExpression.MemberInitExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MemberInit(DryIoc.FastExpressionCompiler.LightExpression.NewExpression newExpr, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.MemberBinding> bindings) -> DryIoc.FastExpressionCompiler.LightExpression.MemberInitExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Modulo(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Modulo(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ModuloAssign(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Multiply(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Multiply(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MultiplyAssign(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MultiplyAssignChecked(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MultiplyChecked(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.MultiplyChecked(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Negate(DryIoc.FastExpressionCompiler.LightExpression.Expression expression) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NegateChecked(DryIoc.FastExpressionCompiler.LightExpression.Expression expression) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.New(System.Reflection.ConstructorInfo ctor) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.New(System.Reflection.ConstructorInfo ctor, DryIoc.FastExpressionCompiler.LightExpression.Expression arg) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.New(System.Reflection.ConstructorInfo ctor, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.New(System.Reflection.ConstructorInfo ctor, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1, DryIoc.FastExpressionCompiler.LightExpression.Expression arg2) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.New(System.Reflection.ConstructorInfo ctor, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1, DryIoc.FastExpressionCompiler.LightExpression.Expression arg2, DryIoc.FastExpressionCompiler.LightExpression.Expression arg3) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.New(System.Reflection.ConstructorInfo ctor, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1, DryIoc.FastExpressionCompiler.LightExpression.Expression arg2, DryIoc.FastExpressionCompiler.LightExpression.Expression arg3, DryIoc.FastExpressionCompiler.LightExpression.Expression arg4) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.New(System.Reflection.ConstructorInfo ctor, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1, DryIoc.FastExpressionCompiler.LightExpression.Expression arg2, DryIoc.FastExpressionCompiler.LightExpression.Expression arg3, DryIoc.FastExpressionCompiler.LightExpression.Expression arg4, DryIoc.FastExpressionCompiler.LightExpression.Expression arg5) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.New(System.Reflection.ConstructorInfo ctor, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1, DryIoc.FastExpressionCompiler.LightExpression.Expression arg2, DryIoc.FastExpressionCompiler.LightExpression.Expression arg3, DryIoc.FastExpressionCompiler.LightExpression.Expression arg4, DryIoc.FastExpressionCompiler.LightExpression.Expression arg5, DryIoc.FastExpressionCompiler.LightExpression.Expression arg6) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.New(System.Reflection.ConstructorInfo ctor, params DryIoc.FastExpressionCompiler.LightExpression.Expression[] arguments) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.New(System.Reflection.ConstructorInfo ctor, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> arguments) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.New(System.Reflection.ConstructorInfo ctor, System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression> arguments) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.New(System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NewArrayBounds(System.Type type, DryIoc.FastExpressionCompiler.LightExpression.Expression bound) -> DryIoc.FastExpressionCompiler.LightExpression.NewArrayExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NewArrayBounds(System.Type type, params DryIoc.FastExpressionCompiler.LightExpression.Expression[] bounds) -> DryIoc.FastExpressionCompiler.LightExpression.NewArrayExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NewArrayBounds(System.Type type, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> bounds) -> DryIoc.FastExpressionCompiler.LightExpression.NewArrayExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NewArrayInit(System.Type type, DryIoc.FastExpressionCompiler.LightExpression.Expression el0, DryIoc.FastExpressionCompiler.LightExpression.Expression el1) -> DryIoc.FastExpressionCompiler.LightExpression.NewArrayExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NewArrayInit(System.Type type, DryIoc.FastExpressionCompiler.LightExpression.Expression el0, DryIoc.FastExpressionCompiler.LightExpression.Expression el1, DryIoc.FastExpressionCompiler.LightExpression.Expression el2) -> DryIoc.FastExpressionCompiler.LightExpression.NewArrayExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NewArrayInit(System.Type type, DryIoc.FastExpressionCompiler.LightExpression.Expression el0, DryIoc.FastExpressionCompiler.LightExpression.Expression el1, DryIoc.FastExpressionCompiler.LightExpression.Expression el2, DryIoc.FastExpressionCompiler.LightExpression.Expression el3) -> DryIoc.FastExpressionCompiler.LightExpression.NewArrayExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NewArrayInit(System.Type type, DryIoc.FastExpressionCompiler.LightExpression.Expression el0, DryIoc.FastExpressionCompiler.LightExpression.Expression el1, DryIoc.FastExpressionCompiler.LightExpression.Expression el2, DryIoc.FastExpressionCompiler.LightExpression.Expression el3, DryIoc.FastExpressionCompiler.LightExpression.Expression el4) -> DryIoc.FastExpressionCompiler.LightExpression.NewArrayExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NewArrayInit(System.Type type, DryIoc.FastExpressionCompiler.LightExpression.Expression el0, DryIoc.FastExpressionCompiler.LightExpression.Expression el1, DryIoc.FastExpressionCompiler.LightExpression.Expression el2, DryIoc.FastExpressionCompiler.LightExpression.Expression el3, DryIoc.FastExpressionCompiler.LightExpression.Expression el4, DryIoc.FastExpressionCompiler.LightExpression.Expression el5) -> DryIoc.FastExpressionCompiler.LightExpression.NewArrayExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NewArrayInit(System.Type type, DryIoc.FastExpressionCompiler.LightExpression.Expression element) -> DryIoc.FastExpressionCompiler.LightExpression.NewArrayExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NewArrayInit(System.Type type, params DryIoc.FastExpressionCompiler.LightExpression.Expression[] initializers) -> DryIoc.FastExpressionCompiler.LightExpression.NewArrayExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NewArrayInit(System.Type type, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> initializers) -> DryIoc.FastExpressionCompiler.LightExpression.NewArrayExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NewNoByRefArgs(System.Reflection.ConstructorInfo ctor, DryIoc.FastExpressionCompiler.LightExpression.Expression arg) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NewNoByRefArgs(System.Reflection.ConstructorInfo ctor, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NewNoByRefArgs(System.Reflection.ConstructorInfo ctor, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1, DryIoc.FastExpressionCompiler.LightExpression.Expression arg2) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NewNoByRefArgs(System.Reflection.ConstructorInfo ctor, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1, DryIoc.FastExpressionCompiler.LightExpression.Expression arg2, DryIoc.FastExpressionCompiler.LightExpression.Expression arg3) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NewNoByRefArgs(System.Reflection.ConstructorInfo ctor, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1, DryIoc.FastExpressionCompiler.LightExpression.Expression arg2, DryIoc.FastExpressionCompiler.LightExpression.Expression arg3, DryIoc.FastExpressionCompiler.LightExpression.Expression arg4) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NewNoByRefArgs(System.Reflection.ConstructorInfo ctor, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1, DryIoc.FastExpressionCompiler.LightExpression.Expression arg2, DryIoc.FastExpressionCompiler.LightExpression.Expression arg3, DryIoc.FastExpressionCompiler.LightExpression.Expression arg4, DryIoc.FastExpressionCompiler.LightExpression.Expression arg5) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NewNoByRefArgs(System.Reflection.ConstructorInfo ctor, DryIoc.FastExpressionCompiler.LightExpression.Expression arg0, DryIoc.FastExpressionCompiler.LightExpression.Expression arg1, DryIoc.FastExpressionCompiler.LightExpression.Expression arg2, DryIoc.FastExpressionCompiler.LightExpression.Expression arg3, DryIoc.FastExpressionCompiler.LightExpression.Expression arg4, DryIoc.FastExpressionCompiler.LightExpression.Expression arg5, DryIoc.FastExpressionCompiler.LightExpression.Expression arg6) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NewNoByRefArgs(System.Reflection.ConstructorInfo ctor, System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression> arguments) -> DryIoc.FastExpressionCompiler.LightExpression.NewExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Not(DryIoc.FastExpressionCompiler.LightExpression.Expression expression) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NotEqual(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.NotEqual(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, bool liftToNull, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.OnesComplement(DryIoc.FastExpressionCompiler.LightExpression.Expression expression) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Or(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Or(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.OrAssign(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.OrElse(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.OrElse(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Parameter(System.Type type, string name = null) -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ParameterOf<T>(string name = null) -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.PostDecrementAssign(DryIoc.FastExpressionCompiler.LightExpression.Expression expression) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.PostIncrementAssign(DryIoc.FastExpressionCompiler.LightExpression.Expression expression) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Power(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Power(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.PowerAssign(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.PreDecrementAssign(DryIoc.FastExpressionCompiler.LightExpression.Expression expression) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.PreIncrementAssign(DryIoc.FastExpressionCompiler.LightExpression.Expression expression) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Property(DryIoc.FastExpressionCompiler.LightExpression.Expression expression, string propertyName) -> DryIoc.FastExpressionCompiler.LightExpression.MemberExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Property(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.PropertyInfo indexer, DryIoc.FastExpressionCompiler.LightExpression.Expression argument) -> DryIoc.FastExpressionCompiler.LightExpression.IndexExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Property(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.PropertyInfo indexer, params DryIoc.FastExpressionCompiler.LightExpression.Expression[] arguments) -> DryIoc.FastExpressionCompiler.LightExpression.IndexExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Property(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.PropertyInfo indexer, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> arguments) -> DryIoc.FastExpressionCompiler.LightExpression.IndexExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Property(DryIoc.FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.PropertyInfo property) -> DryIoc.FastExpressionCompiler.LightExpression.MemberExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Property(System.Reflection.PropertyInfo property) -> DryIoc.FastExpressionCompiler.LightExpression.MemberExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.PropertyOrField(DryIoc.FastExpressionCompiler.LightExpression.Expression expression, string memberName) -> DryIoc.FastExpressionCompiler.LightExpression.MemberExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Quote(DryIoc.FastExpressionCompiler.LightExpression.Expression expression) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ReferenceEqual(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.ReferenceNotEqual(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Return(DryIoc.FastExpressionCompiler.LightExpression.LabelTarget target) -> DryIoc.FastExpressionCompiler.LightExpression.GotoExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Return(DryIoc.FastExpressionCompiler.LightExpression.LabelTarget target, DryIoc.FastExpressionCompiler.LightExpression.Expression value) -> DryIoc.FastExpressionCompiler.LightExpression.GotoExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Return(DryIoc.FastExpressionCompiler.LightExpression.LabelTarget target, DryIoc.FastExpressionCompiler.LightExpression.Expression value, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.GotoExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Return(DryIoc.FastExpressionCompiler.LightExpression.LabelTarget target, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.GotoExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.RightShift(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.RightShift(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.RightShiftAssign(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Subtract(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Subtract(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.SubtractAssign(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.SubtractAssignChecked(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.SubtractChecked(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.SubtractChecked(DryIoc.FastExpressionCompiler.LightExpression.Expression left, DryIoc.FastExpressionCompiler.LightExpression.Expression right, System.Reflection.MethodInfo method) -> DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Switch(DryIoc.FastExpressionCompiler.LightExpression.Expression switchValue, DryIoc.FastExpressionCompiler.LightExpression.Expression defaultBody, params DryIoc.FastExpressionCompiler.LightExpression.SwitchCase[] cases) -> DryIoc.FastExpressionCompiler.LightExpression.SwitchExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Switch(DryIoc.FastExpressionCompiler.LightExpression.Expression switchValue, DryIoc.FastExpressionCompiler.LightExpression.Expression defaultBody, System.Reflection.MethodInfo comparison, params DryIoc.FastExpressionCompiler.LightExpression.SwitchCase[] cases) -> DryIoc.FastExpressionCompiler.LightExpression.SwitchExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Switch(DryIoc.FastExpressionCompiler.LightExpression.Expression switchValue, params DryIoc.FastExpressionCompiler.LightExpression.SwitchCase[] cases) -> DryIoc.FastExpressionCompiler.LightExpression.SwitchExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Switch(System.Type type, DryIoc.FastExpressionCompiler.LightExpression.Expression switchValue, DryIoc.FastExpressionCompiler.LightExpression.Expression defaultBody, System.Reflection.MethodInfo comparison, params DryIoc.FastExpressionCompiler.LightExpression.SwitchCase[] cases) -> DryIoc.FastExpressionCompiler.LightExpression.SwitchExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Switch(System.Type type, DryIoc.FastExpressionCompiler.LightExpression.Expression switchValue, DryIoc.FastExpressionCompiler.LightExpression.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.SwitchCase> cases) -> DryIoc.FastExpressionCompiler.LightExpression.SwitchExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.SwitchCase(DryIoc.FastExpressionCompiler.LightExpression.Expression body, params DryIoc.FastExpressionCompiler.LightExpression.Expression[] testValues) -> DryIoc.FastExpressionCompiler.LightExpression.SwitchCase
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.SwitchCase(DryIoc.FastExpressionCompiler.LightExpression.Expression body, System.Collections.Generic.IEnumerable<DryIoc.FastExpressionCompiler.LightExpression.Expression> testValues) -> DryIoc.FastExpressionCompiler.LightExpression.SwitchCase
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.SymbolDocument(string fileName) -> DryIoc.FastExpressionCompiler.LightExpression.SymbolDocumentInfo
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Throw(DryIoc.FastExpressionCompiler.LightExpression.Expression value) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Throw(DryIoc.FastExpressionCompiler.LightExpression.Expression value, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.TryCatch(DryIoc.FastExpressionCompiler.LightExpression.Expression body, params DryIoc.FastExpressionCompiler.LightExpression.CatchBlock[] handlers) -> DryIoc.FastExpressionCompiler.LightExpression.TryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.TryCatchFinally(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.Expression finally, params DryIoc.FastExpressionCompiler.LightExpression.CatchBlock[] handlers) -> DryIoc.FastExpressionCompiler.LightExpression.TryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.TryFinally(DryIoc.FastExpressionCompiler.LightExpression.Expression body, DryIoc.FastExpressionCompiler.LightExpression.Expression finally) -> DryIoc.FastExpressionCompiler.LightExpression.TryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.TryGetIntConstantValue(DryIoc.FastExpressionCompiler.LightExpression.Expression e) -> int
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.TypeAs(DryIoc.FastExpressionCompiler.LightExpression.Expression expression, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.TypeEqual(DryIoc.FastExpressionCompiler.LightExpression.Expression operand, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.TypeBinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.TypeIs(DryIoc.FastExpressionCompiler.LightExpression.Expression operand, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.TypeBinaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.UnaryPlus(DryIoc.FastExpressionCompiler.LightExpression.Expression expression) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Unbox(DryIoc.FastExpressionCompiler.LightExpression.Expression expression, System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression
~static DryIoc.FastExpressionCompiler.LightExpression.Expression.Variable(System.Type type, string name = null) -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ArrayClosureArrayField -> System.Reflection.FieldInfo
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ArrayClosureWithNonPassedParamsConstructor -> System.Reflection.ConstructorInfo
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ArrayClosureWithNonPassedParamsConstructorWithoutConstants -> System.Reflection.ConstructorInfo
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ArrayClosureWithNonPassedParamsField -> System.Reflection.FieldInfo
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast(this DryIoc.FastExpressionCompiler.LightExpression.Expression<System.Action> lambdaExpr, bool ifFastFailedReturnNull = false, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> System.Action
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast(this DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression lambdaExpr, bool ifFastFailedReturnNull = false, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> System.Delegate
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<R>(this DryIoc.FastExpressionCompiler.LightExpression.Expression<System.Func<R>> lambdaExpr, bool ifFastFailedReturnNull = false, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> System.Func<R>
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<T1, R>(this DryIoc.FastExpressionCompiler.LightExpression.Expression<System.Func<T1, R>> lambdaExpr, bool ifFastFailedReturnNull = false, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> System.Func<T1, R>
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<T1, T2, R>(this DryIoc.FastExpressionCompiler.LightExpression.Expression<System.Func<T1, T2, R>> lambdaExpr, bool ifFastFailedReturnNull = false, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> System.Func<T1, T2, R>
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<T1, T2, T3, R>(this DryIoc.FastExpressionCompiler.LightExpression.Expression<System.Func<T1, T2, T3, R>> lambdaExpr, bool ifFastFailedReturnNull = false, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> System.Func<T1, T2, T3, R>
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<T1, T2, T3, T4, R>(this DryIoc.FastExpressionCompiler.LightExpression.Expression<System.Func<T1, T2, T3, T4, R>> lambdaExpr, bool ifFastFailedReturnNull = false, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> System.Func<T1, T2, T3, T4, R>
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<T1, T2, T3, T4, T5, R>(this DryIoc.FastExpressionCompiler.LightExpression.Expression<System.Func<T1, T2, T3, T4, T5, R>> lambdaExpr, bool ifFastFailedReturnNull = false, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> System.Func<T1, T2, T3, T4, T5, R>
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<T1, T2, T3, T4, T5, T6, R>(this DryIoc.FastExpressionCompiler.LightExpression.Expression<System.Func<T1, T2, T3, T4, T5, T6, R>> lambdaExpr, bool ifFastFailedReturnNull = false, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> System.Func<T1, T2, T3, T4, T5, T6, R>
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<T1, T2, T3, T4, T5, T6>(this DryIoc.FastExpressionCompiler.LightExpression.Expression<System.Action<T1, T2, T3, T4, T5, T6>> lambdaExpr, bool ifFastFailedReturnNull = false, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> System.Action<T1, T2, T3, T4, T5, T6>
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<T1, T2, T3, T4, T5>(this DryIoc.FastExpressionCompiler.LightExpression.Expression<System.Action<T1, T2, T3, T4, T5>> lambdaExpr, bool ifFastFailedReturnNull = false, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> System.Action<T1, T2, T3, T4, T5>
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<T1, T2, T3, T4>(this DryIoc.FastExpressionCompiler.LightExpression.Expression<System.Action<T1, T2, T3, T4>> lambdaExpr, bool ifFastFailedReturnNull = false, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> System.Action<T1, T2, T3, T4>
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<T1, T2, T3>(this DryIoc.FastExpressionCompiler.LightExpression.Expression<System.Action<T1, T2, T3>> lambdaExpr, bool ifFastFailedReturnNull = false, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> System.Action<T1, T2, T3>
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<T1, T2>(this DryIoc.FastExpressionCompiler.LightExpression.Expression<System.Action<T1, T2>> lambdaExpr, bool ifFastFailedReturnNull = false, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> System.Action<T1, T2>
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<T1>(this DryIoc.FastExpressionCompiler.LightExpression.Expression<System.Action<T1>> lambdaExpr, bool ifFastFailedReturnNull = false, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> System.Action<T1>
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<TDelegate>(this DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate> lambdaExpr, bool ifFastFailedReturnNull = false, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> TDelegate
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<TDelegate>(this DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression lambdaExpr, bool ifFastFailedReturnNull = false, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> TDelegate
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFastToIL(this DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression lambdaExpr, System.Reflection.Emit.ILGenerator il, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> bool
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileSys(this DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression lambdaExpr) -> System.Delegate
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileSys<TDelegate>(this DryIoc.FastExpressionCompiler.LightExpression.Expression<TDelegate> lambdaExpr) -> TDelegate
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.EmittingVisitor.EmitLoadConstantInt(System.Reflection.Emit.ILGenerator il, int i) -> void
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.EmittingVisitor.EmitMethodCall(System.Reflection.Emit.ILGenerator il, System.Reflection.MethodInfo method) -> bool
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.EmittingVisitor.EmitMethodCallOrVirtualCall(System.Reflection.Emit.ILGenerator il, System.Reflection.MethodInfo method) -> bool
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.EmittingVisitor.EmitVirtualMethodCall(System.Reflection.Emit.ILGenerator il, System.Reflection.MethodInfo method) -> bool
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.EmittingVisitor.TryEmit(DryIoc.FastExpressionCompiler.LightExpression.Expression expr, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, System.Reflection.Emit.ILGenerator il, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags setup, DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags parent, int byRefIndex = -1) -> bool
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.EmittingVisitor.TryEmitConstantOfNotNullValue(bool considerClosure, System.Type exprType, object constantValue, System.Reflection.Emit.ILGenerator il, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, int byRefIndex = -1) -> bool
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.EmittingVisitor.TryEmitMemberAccess(DryIoc.FastExpressionCompiler.LightExpression.MemberExpression expr, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, System.Reflection.Emit.ILGenerator il, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags setup, DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags parent, int byRefIndex = -1) -> bool
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.EmittingVisitor.TryEmitNonByRefNonValueTypeParameter(DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression paramExpr, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, System.Reflection.Emit.ILGenerator il, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure) -> bool
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.EmittingVisitor.TryEmitParameter(DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression paramExpr, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, System.Reflection.Emit.ILGenerator il, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags parent, int byRefIndex = -1) -> bool
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.IsClosureBoundConstant(object value, System.Type type) -> bool
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.NestedLambdaWithConstantsAndNestedLambdas.ConstantsAndNestedLambdasField -> System.Reflection.FieldInfo
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.NestedLambdaWithConstantsAndNestedLambdas.NestedLambdaField -> System.Reflection.FieldInfo
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.TryCollectBoundConstants(ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.Expression expr, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, bool isNestedLambda, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo rootClosure, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags) -> bool
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.TryCompile<TDelegate>(this DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression lambdaExpr, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> TDelegate
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.TryCompileWithoutClosure<TDelegate>(this DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression lambdaExpr, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags = DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags.Default) -> TDelegate
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.TryCompileWithPreCreatedClosure<TDelegate>(this DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression lambdaExpr, DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression[] closureConstantsExprs, DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags flags) -> TDelegate
~static DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.TryCompileWithPreCreatedClosure<TDelegate>(this DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression lambdaExpr, params DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression[] closureConstantsExprs) -> TDelegate
~static DryIoc.FastExpressionCompiler.LightExpression.ILGeneratorHacks.GetNextLocalVarIndex(this System.Reflection.Emit.ILGenerator il, System.Type t) -> int
~static DryIoc.FastExpressionCompiler.LightExpression.LiveCountArray<T>.Expand(T[] items) -> T[]
~static DryIoc.FastExpressionCompiler.LightExpression.ToCSharpPrinter.ToCSharpString(this DryIoc.FastExpressionCompiler.LightExpression.Expression e, System.Text.StringBuilder sb, int lineIdent = 0, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null, int identSpaces = 4, DryIoc.FastExpressionCompiler.LightExpression.TryPrintConstant tryPrintConstant = null) -> System.Text.StringBuilder
~static DryIoc.FastExpressionCompiler.LightExpression.ToCSharpPrinter.ToCSharpString(this DryIoc.FastExpressionCompiler.LightExpression.Expression expr) -> string
~static DryIoc.FastExpressionCompiler.LightExpression.ToCSharpPrinter.ToCSharpString(this DryIoc.FastExpressionCompiler.LightExpression.Expression expr, DryIoc.FastExpressionCompiler.LightExpression.TryPrintConstant tryPrintConstant) -> string
~static DryIoc.FastExpressionCompiler.LightExpression.ToExpressionPrinter.ToExpressionString(this DryIoc.FastExpressionCompiler.LightExpression.Expression expr, DryIoc.FastExpressionCompiler.LightExpression.TryPrintConstant tryPrintConstant = null) -> string
~static DryIoc.FastExpressionCompiler.LightExpression.ToExpressionPrinter.ToExpressionString(this DryIoc.FastExpressionCompiler.LightExpression.Expression expr, out System.Collections.Generic.List<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression> paramsExprs, out System.Collections.Generic.List<DryIoc.FastExpressionCompiler.LightExpression.Expression> uniqueExprs, out System.Collections.Generic.List<DryIoc.FastExpressionCompiler.LightExpression.LabelTarget> lts, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null, int identSpaces = 2, DryIoc.FastExpressionCompiler.LightExpression.TryPrintConstant tryPrintConstant = null) -> string
~static DryIoc.ImTools.ArrayTools.Append<T>(this System.Collections.Generic.IEnumerable<T> source, System.Collections.Generic.IEnumerable<T> other) -> T[]
~static DryIoc.ImTools.ArrayTools.Append<T>(this T[] source, params T[] added) -> T[]
~static DryIoc.ImTools.ArrayTools.Append<T>(this T[] source, T value) -> T[]
~static DryIoc.ImTools.ArrayTools.AppendNonEmpty<T>(this T[] source, params T[] added) -> T[]
~static DryIoc.ImTools.ArrayTools.AppendOrUpdate<T>(this T[] source, T value, int index = -1) -> T[]
~static DryIoc.ImTools.ArrayTools.AppendTo<T>(T[] source, int sourcePos, int count, T[] results = null) -> T[]
~static DryIoc.ImTools.ArrayTools.AppendToNonEmpty<T>(this T[] source, T value) -> T[]
~static DryIoc.ImTools.ArrayTools.Copy<T>(this T[] source) -> T[]
~static DryIoc.ImTools.ArrayTools.CopyNonEmpty<T>(this T[] source) -> T[]
~static DryIoc.ImTools.ArrayTools.Empty<T>() -> T[]
~static DryIoc.ImTools.ArrayTools.EmptyIfNull<T>(this T[] source) -> T[]
~static DryIoc.ImTools.ArrayTools.FindFirst<T, S>(this T[] source, S state, System.Func<S, T, bool> predicate) -> T
~static DryIoc.ImTools.ArrayTools.FindFirst<T>(this System.Collections.Generic.IEnumerable<T> source, System.Func<T, bool> predicate) -> T
~static DryIoc.ImTools.ArrayTools.FindFirst<T>(this T[] source, System.Func<T, bool> predicate) -> T
~static DryIoc.ImTools.ArrayTools.ForEach<T>(this T[] source, System.Action<T> action) -> void
~static DryIoc.ImTools.ArrayTools.IndexOf<T, S>(this T[] source, S state, System.Func<S, T, bool> predicate) -> int
~static DryIoc.ImTools.ArrayTools.IndexOf<T>(this T[] source, System.Func<T, bool> predicate) -> int
~static DryIoc.ImTools.ArrayTools.IndexOf<T>(this T[] source, T value) -> int
~static DryIoc.ImTools.ArrayTools.IndexOfReference<T>(this T[] source, T reference) -> int
~static DryIoc.ImTools.ArrayTools.IsNullOrEmpty<T>(this T[] source) -> bool
~static DryIoc.ImTools.ArrayTools.Map<T, A, B, R>(this T[] source, A a, B b, System.Func<A, B, T, R> map) -> R[]
~static DryIoc.ImTools.ArrayTools.Map<T, R>(this System.Collections.Generic.IEnumerable<T> source, System.Func<T, R> map) -> System.Collections.Generic.IEnumerable<R>
~static DryIoc.ImTools.ArrayTools.Map<T, R>(this T[] source, System.Func<T, R> map) -> R[]
~static DryIoc.ImTools.ArrayTools.Map<T, S, R>(this T[] source, S state, System.Func<S, T, R> map) -> R[]
~static DryIoc.ImTools.ArrayTools.Match<A, B, T, R>(this T[] source, A a, B b, System.Func<A, B, T, bool> condition, System.Func<A, B, T, R> map) -> R[]
~static DryIoc.ImTools.ArrayTools.Match<A, B, T>(this T[] source, A a, B b, System.Func<A, B, T, bool> condition) -> T[]
~static DryIoc.ImTools.ArrayTools.Match<S, T, R>(this T[] source, S state, System.Func<S, T, bool> condition, System.Func<S, T, R> map) -> R[]
~static DryIoc.ImTools.ArrayTools.Match<S, T>(this T[] source, S state, System.Func<S, T, bool> condition) -> T[]
~static DryIoc.ImTools.ArrayTools.Match<T, R>(this System.Collections.Generic.IEnumerable<T> source, System.Func<T, bool> condition, System.Func<T, R> map) -> System.Collections.Generic.IEnumerable<R>
~static DryIoc.ImTools.ArrayTools.Match<T, R>(this T[] source, System.Func<T, bool> condition, System.Func<T, R> map) -> R[]
~static DryIoc.ImTools.ArrayTools.Match<T>(this System.Collections.Generic.IEnumerable<T> source, System.Func<T, bool> condition) -> System.Collections.Generic.IEnumerable<T>
~static DryIoc.ImTools.ArrayTools.Match<T>(this T[] source, System.Func<T, bool> condition) -> T[]
~static DryIoc.ImTools.ArrayTools.One<T>(this T one) -> T[]
~static DryIoc.ImTools.ArrayTools.PrependToNonEmpty<T>(this T[] source, T value) -> T[]
~static DryIoc.ImTools.ArrayTools.Remove<T>(this T[] source, T value) -> T[]
~static DryIoc.ImTools.ArrayTools.RemoveAt<T>(this T[] source, int index) -> T[]
~static DryIoc.ImTools.ArrayTools.SingleOrDefaultIfMany<T>(this System.Collections.Generic.IEnumerable<T> source) -> T
~static DryIoc.ImTools.ArrayTools.ToArrayOrSelf<T>(this System.Collections.Generic.IEnumerable<T> source) -> T[]
~static DryIoc.ImTools.ArrayTools.ToListOrSelf<T>(this System.Collections.Generic.IEnumerable<T> source) -> System.Collections.Generic.IList<T>
~static DryIoc.ImTools.ArrayTools.UpdateNonEmpty<T>(this T[] source, T value, int index) -> T[]
~static DryIoc.ImTools.Fun.Do<T, S>(this T x, S state, System.Action<T, S> effect) -> T
~static DryIoc.ImTools.Fun.Do<T>(this T x, System.Action<T> effect) -> T
~static DryIoc.ImTools.Fun.To<R>(this object x) -> R
~static DryIoc.ImTools.Fun.To<T, R>(this T x, System.Func<T, R> map) -> R
~static DryIoc.ImTools.Fun.To<T, S, R>(this T x, S state, System.Func<T, S, R> map) -> R
~static DryIoc.ImTools.GrowingList.Push<T>(ref T[] items, int count, T item) -> void
~static DryIoc.ImTools.GrowingList.PushSlot<T>(ref T[] items, int count) -> T
~static DryIoc.ImTools.GrowingList.ResizeToArray<T>(T[] items, int count) -> T[]
~static DryIoc.ImTools.GrowingList.ToString<T>(T[] items, int count) -> string
~static DryIoc.ImTools.ImHashMap.AddOrGetEntry<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, DryIoc.ImTools.ImHashMapEntry<K, V> newEntry) -> DryIoc.ImTools.ImHashMap<K, V>
~static DryIoc.ImTools.ImHashMap.AddOrKeep<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, int hash, K key, V value) -> DryIoc.ImTools.ImHashMap<K, V>
~static DryIoc.ImTools.ImHashMap.AddOrKeep<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, K key, V value) -> DryIoc.ImTools.ImHashMap<K, V>
~static DryIoc.ImTools.ImHashMap.AddOrKeepEntry<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, DryIoc.ImTools.ImHashMapEntry<K, V> newEntry) -> DryIoc.ImTools.ImHashMap<K, V>
~static DryIoc.ImTools.ImHashMap.AddOrUpdate<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, int hash, K key, V value) -> DryIoc.ImTools.ImHashMap<K, V>
~static DryIoc.ImTools.ImHashMap.AddOrUpdate<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, int hash, K key, V value, DryIoc.ImTools.Update<K, V> update) -> DryIoc.ImTools.ImHashMap<K, V>
~static DryIoc.ImTools.ImHashMap.AddOrUpdate<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, K key, V value) -> DryIoc.ImTools.ImHashMap<K, V>
~static DryIoc.ImTools.ImHashMap.AddOrUpdate<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, K key, V value, DryIoc.ImTools.Update<K, V> update) -> DryIoc.ImTools.ImHashMap<K, V>
~static DryIoc.ImTools.ImHashMap.AddOrUpdateEntry<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, DryIoc.ImTools.ImHashMapEntry<K, V> newEntry) -> DryIoc.ImTools.ImHashMap<K, V>
~static DryIoc.ImTools.ImHashMap.Contains<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, int hash, K key) -> bool
~static DryIoc.ImTools.ImHashMap.Contains<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, K key) -> bool
~static DryIoc.ImTools.ImHashMap.Entry<K, V>(int hash, K key, V value) -> DryIoc.ImTools.ImHashMapEntry<K, V>
~static DryIoc.ImTools.ImHashMap.Entry<K, V>(K key, V value) -> DryIoc.ImTools.ImHashMapEntry<K, V>
~static DryIoc.ImTools.ImHashMap.Enumerate<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, DryIoc.ImTools.MapParentStack parents = null) -> System.Collections.Generic.IEnumerable<DryIoc.ImTools.ImHashMapEntry<K, V>>
~static DryIoc.ImTools.ImHashMap.Fold<K, V, S>(this DryIoc.ImTools.ImHashMap<K, V> map, S state, System.Func<DryIoc.ImTools.ImHashMapEntry<K, V>, int, S, S> handler, DryIoc.ImTools.MapParentStack parents = null) -> S
~static DryIoc.ImTools.ImHashMap.ForEach<K, V, S>(this DryIoc.ImTools.ImHashMap<K, V> map, S state, System.Action<DryIoc.ImTools.ImHashMapEntry<K, V>, int, S> handler, DryIoc.ImTools.MapParentStack parents = null) -> S
~static DryIoc.ImTools.ImHashMap.ForEach<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, System.Action<DryIoc.ImTools.ImHashMapEntry<K, V>, int> handler, DryIoc.ImTools.MapParentStack parents = null) -> void
~static DryIoc.ImTools.ImHashMap.GetEntryOrDefault<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, int hash, K key) -> DryIoc.ImTools.ImHashMapEntry<K, V>
~static DryIoc.ImTools.ImHashMap.GetEntryOrDefault<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, K key) -> DryIoc.ImTools.ImHashMapEntry<K, V>
~static DryIoc.ImTools.ImHashMap.GetEntryOrDefaultByReferenceEquals<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, int hash, K key) -> DryIoc.ImTools.ImHashMapEntry<K, V>
~static DryIoc.ImTools.ImHashMap.GetSurePresentEntry<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, int hash, K key) -> DryIoc.ImTools.ImHashMapEntry<K, V>
~static DryIoc.ImTools.ImHashMap.GetValueOrDefault<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, int hash, K key) -> V
~static DryIoc.ImTools.ImHashMap.GetValueOrDefault<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, K key) -> V
~static DryIoc.ImTools.ImHashMap.GetValueOrDefaultByReferenceEquals<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, int hash, K key) -> V
~static DryIoc.ImTools.ImHashMap.Remove<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, int hash, K key) -> DryIoc.ImTools.ImHashMap<K, V>
~static DryIoc.ImTools.ImHashMap.Remove<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, K key) -> DryIoc.ImTools.ImHashMap<K, V>
~static DryIoc.ImTools.ImHashMap.SetValue<K, V>(this DryIoc.ImTools.ImHashMapEntry<K, V> e, V value) -> DryIoc.ImTools.ImHashMapEntry<K, V>
~static DryIoc.ImTools.ImHashMap.ToArray<K, V, S>(this DryIoc.ImTools.ImHashMap<K, V> map, System.Func<DryIoc.ImTools.ImHashMapEntry<K, V>, S> selector) -> S[]
~static DryIoc.ImTools.ImHashMap.ToArray<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map) -> DryIoc.ImTools.ImHashMapEntry<K, V>[]
~static DryIoc.ImTools.ImHashMap.ToDictionary<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map) -> System.Collections.Generic.Dictionary<K, V>
~static DryIoc.ImTools.ImHashMap.TryFind<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, int hash, K key, out V value) -> bool
~static DryIoc.ImTools.ImHashMap.TryFind<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, K key, out V value) -> bool
~static DryIoc.ImTools.ImHashMap.TryFindByReferenceEquals<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, int hash, K key, out V value) -> bool
~static DryIoc.ImTools.ImHashMap.Update<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, int hash, K key, V value) -> DryIoc.ImTools.ImHashMap<K, V>
~static DryIoc.ImTools.ImHashMap.Update<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, int hash, K key, V value, DryIoc.ImTools.Update<K, V> update) -> DryIoc.ImTools.ImHashMap<K, V>
~static DryIoc.ImTools.ImHashMap.Update<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, K key, V value) -> DryIoc.ImTools.ImHashMap<K, V>
~static DryIoc.ImTools.ImHashMap.Update<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, K key, V value, DryIoc.ImTools.Update<K, V> update) -> DryIoc.ImTools.ImHashMap<K, V>
~static DryIoc.ImTools.ImHashMap.UpdateToDefault<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, int hash, K key) -> DryIoc.ImTools.ImHashMap<K, V>
~static DryIoc.ImTools.ImHashMap.UpdateToDefault<K, V>(this DryIoc.ImTools.ImHashMap<K, V> map, K key) -> DryIoc.ImTools.ImHashMap<K, V>
~static DryIoc.ImTools.ImList.Deconstruct<T>(this DryIoc.ImTools.ImList<T> list, out T head, out DryIoc.ImTools.ImList<T> tail, out bool isEmpty) -> void
~static DryIoc.ImTools.ImList.Fold<T, S>(this DryIoc.ImTools.ImList<T> list, S state, System.Func<T, int, S, S> handler) -> S
~static DryIoc.ImTools.ImList.Fold<T, S>(this DryIoc.ImTools.ImList<T> list, S state, System.Func<T, S, S> handler) -> S
~static DryIoc.ImTools.ImList.ForEach<T>(this DryIoc.ImTools.ImList<T> list, System.Action<T> effect) -> void
~static DryIoc.ImTools.ImList.List<T>(params T[] items) -> DryIoc.ImTools.ImList<T>
~static DryIoc.ImTools.ImList.List<T>(this T head) -> DryIoc.ImTools.ImList<T>
~static DryIoc.ImTools.ImList.List<T>(this T head, DryIoc.ImTools.ImList<T> tail) -> DryIoc.ImTools.ImList<T>
~static DryIoc.ImTools.ImList.Map<T, R>(this DryIoc.ImTools.ImList<T> list, System.Func<T, int, R> map) -> DryIoc.ImTools.ImList<R>
~static DryIoc.ImTools.ImList.Map<T, R>(this DryIoc.ImTools.ImList<T> list, System.Func<T, R> map) -> DryIoc.ImTools.ImList<R>
~static DryIoc.ImTools.ImList.Reverse<T>(this DryIoc.ImTools.ImList<T> list) -> DryIoc.ImTools.ImList<T>
~static DryIoc.ImTools.ImList.ToArray<T>(this DryIoc.ImTools.ImList<T> source) -> T[]
~static DryIoc.ImTools.ImList.ToImList<T>(this System.Collections.Generic.IEnumerable<T> source) -> DryIoc.ImTools.ImList<T>
~static DryIoc.ImTools.ImList.ToImList<T>(this System.Collections.Generic.IList<T> source) -> DryIoc.ImTools.ImList<T>
~static DryIoc.ImTools.ImMap.AddOrGetEntry<V>(this DryIoc.ImTools.ImMap<V> map, DryIoc.ImTools.ImMapEntry<V> newEntry) -> DryIoc.ImTools.ImMap<V>
~static DryIoc.ImTools.ImMap.AddOrKeep<V>(this DryIoc.ImTools.ImMap<V> map, int hash, V value) -> DryIoc.ImTools.ImMap<V>
~static DryIoc.ImTools.ImMap.AddOrKeepEntry<V>(this DryIoc.ImTools.ImMap<V> map, DryIoc.ImTools.ImMapEntry<V> newEntry) -> DryIoc.ImTools.ImMap<V>
~static DryIoc.ImTools.ImMap.AddOrUpdate<V>(this DryIoc.ImTools.ImMap<V> map, int hash, V value) -> DryIoc.ImTools.ImMap<V>
~static DryIoc.ImTools.ImMap.AddOrUpdate<V>(this DryIoc.ImTools.ImMap<V> map, int hash, V value, DryIoc.ImTools.Update<int, V> update) -> DryIoc.ImTools.ImMap<V>
~static DryIoc.ImTools.ImMap.AddOrUpdateEntry<V>(this DryIoc.ImTools.ImMap<V> map, DryIoc.ImTools.ImMapEntry<V> newEntry) -> DryIoc.ImTools.ImMap<V>
~static DryIoc.ImTools.ImMap.Entry<V>(int hash, V value) -> DryIoc.ImTools.ImMapEntry<V>
~static DryIoc.ImTools.ImMap.Enumerate<V>(this DryIoc.ImTools.ImMap<V> map) -> DryIoc.ImTools.ImMap.ImMapEnumerable<V>
~static DryIoc.ImTools.ImMap.Fold<V, S>(this DryIoc.ImTools.ImMap<V> map, S state, System.Func<DryIoc.ImTools.ImMapEntry<V>, int, S, S> handler, DryIoc.ImTools.MapParentStack parents = null) -> S
~static DryIoc.ImTools.ImMap.ForEach<V, S>(this DryIoc.ImTools.ImMap<V> map, S state, System.Action<DryIoc.ImTools.ImMapEntry<V>, int, S> handler, DryIoc.ImTools.MapParentStack parents = null) -> S
~static DryIoc.ImTools.ImMap.ForEach<V>(this DryIoc.ImTools.ImMap<V> map, System.Action<DryIoc.ImTools.ImMapEntry<V>, int> handler, DryIoc.ImTools.MapParentStack parents = null) -> void
~static DryIoc.ImTools.ImMap.GetEntryOrDefault<V>(this DryIoc.ImTools.ImMap<V> map, int hash) -> DryIoc.ImTools.ImMapEntry<V>
~static DryIoc.ImTools.ImMap.GetSurePresentEntry<V>(this DryIoc.ImTools.ImMap<V> map, int hash) -> DryIoc.ImTools.ImMapEntry<V>
~static DryIoc.ImTools.ImMap.GetValueOrDefault<V>(this DryIoc.ImTools.ImMap<V> map, int hash) -> V
~static DryIoc.ImTools.ImMap.Remove<V>(this DryIoc.ImTools.ImMap<V> map, int hash) -> DryIoc.ImTools.ImMap<V>
~static DryIoc.ImTools.ImMap.ToArray<V, S>(this DryIoc.ImTools.ImMap<V> map, System.Func<DryIoc.ImTools.ImMapEntry<V>, S> selector) -> S[]
~static DryIoc.ImTools.ImMap.ToArray<V>(this DryIoc.ImTools.ImMap<V> map) -> DryIoc.ImTools.ImMapEntry<V>[]
~static DryIoc.ImTools.ImMap.ToDictionary<V>(this DryIoc.ImTools.ImMap<V> map) -> System.Collections.Generic.Dictionary<int, V>
~static DryIoc.ImTools.ImMap.TryFind<V>(this DryIoc.ImTools.ImMap<V> map, int hash, out V value) -> bool
~static DryIoc.ImTools.ImMap.Update<V>(this DryIoc.ImTools.ImMap<V> map, int hash, V value) -> DryIoc.ImTools.ImMap<V>
~static DryIoc.ImTools.ImMap.UpdateToDefault<V>(this DryIoc.ImTools.ImMap<V> map, int hash) -> DryIoc.ImTools.ImMap<V>
~static DryIoc.ImTools.ImZipper.Fold<T, S>(this DryIoc.ImTools.ImZipper<T> z, S state, System.Func<T, int, S, S> handler) -> S
~static DryIoc.ImTools.ImZipper.Fold<T, S>(this DryIoc.ImTools.ImZipper<T> z, S state, System.Func<T, S, S> handler) -> S
~static DryIoc.ImTools.ImZipper.ForEach<T>(this DryIoc.ImTools.ImZipper<T> z, System.Action<T> effect) -> void
~static DryIoc.ImTools.ImZipper.RemoveAt<T>(this DryIoc.ImTools.ImZipper<T> z, int i) -> DryIoc.ImTools.ImZipper<T>
~static DryIoc.ImTools.ImZipper.ShiftTo<T>(this DryIoc.ImTools.ImZipper<T> z, int i) -> DryIoc.ImTools.ImZipper<T>
~static DryIoc.ImTools.ImZipper.ToArray<T>(this DryIoc.ImTools.ImZipper<T> z) -> T[]
~static DryIoc.ImTools.ImZipper.Update<T>(this DryIoc.ImTools.ImZipper<T> z, System.Func<T, T> update) -> DryIoc.ImTools.ImZipper<T>
~static DryIoc.ImTools.ImZipper.UpdateAt<T>(this DryIoc.ImTools.ImZipper<T> z, int i, System.Func<T, T> update) -> DryIoc.ImTools.ImZipper<T>
~static DryIoc.ImTools.ImZipper.Zip<T>(params T[] items) -> DryIoc.ImTools.ImZipper<T>
~static DryIoc.ImTools.KV.Of<K, V>(K key, V value) -> DryIoc.ImTools.KV<K, V>
~static DryIoc.ImTools.KV.WithValue<K, V>(this DryIoc.ImTools.KV<K, V> kv, V value) -> DryIoc.ImTools.KV<K, V>
~static DryIoc.ImTools.Lazy.Of<T>(System.Func<T> valueFactory) -> System.Lazy<T>
~static DryIoc.ImTools.PartitionedHashMap.AddOrKeep<K, V>(this DryIoc.ImTools.ImHashMap<K, V>[] parts, int hash, K key, V value, int partHashMask = 15) -> void
~static DryIoc.ImTools.PartitionedHashMap.AddOrKeep<K, V>(this DryIoc.ImTools.ImHashMap<K, V>[] parts, K key, V value, int partHashMask = 15) -> void
~static DryIoc.ImTools.PartitionedHashMap.AddOrUpdate<K, V>(this DryIoc.ImTools.ImHashMap<K, V>[] parts, int hash, K key, V value, DryIoc.ImTools.Update<K, V> update, int partHashMask = 15) -> void
~static DryIoc.ImTools.PartitionedHashMap.AddOrUpdate<K, V>(this DryIoc.ImTools.ImHashMap<K, V>[] parts, int hash, K key, V value, int partHashMask = 15) -> void
~static DryIoc.ImTools.PartitionedHashMap.AddOrUpdate<K, V>(this DryIoc.ImTools.ImHashMap<K, V>[] parts, K key, V value, int partHashMask = 15) -> void
~static DryIoc.ImTools.PartitionedHashMap.CreateEmpty<K, V>(int partionCountOfPowerOfTwo = 16) -> DryIoc.ImTools.ImHashMap<K, V>[]
~static DryIoc.ImTools.PartitionedHashMap.Enumerate<K, V>(this DryIoc.ImTools.ImHashMap<K, V>[] parts, DryIoc.ImTools.MapParentStack parents = null) -> System.Collections.Generic.IEnumerable<DryIoc.ImTools.ImHashMapEntry<K, V>>
~static DryIoc.ImTools.PartitionedHashMap.ForEach<K, V, S>(this DryIoc.ImTools.ImHashMap<K, V>[] parts, S state, System.Action<DryIoc.ImTools.ImHashMapEntry<K, V>, int, S> handler, DryIoc.ImTools.MapParentStack parents = null) -> S
~static DryIoc.ImTools.PartitionedHashMap.GetValueOrDefault<K, V>(this DryIoc.ImTools.ImHashMap<K, V>[] parts, int hash, K key, int partHashMask = 15) -> V
~static DryIoc.ImTools.PartitionedHashMap.GetValueOrDefault<K, V>(this DryIoc.ImTools.ImHashMap<K, V>[] parts, K key, int partHashMask = 15) -> V
~static DryIoc.ImTools.PartitionedHashMap.GetValueOrDefaultByReferenceEquals<K, V>(this DryIoc.ImTools.ImHashMap<K, V>[] parts, int hash, K key, int partHashMask = 15) -> V
~static DryIoc.ImTools.PartitionedHashMap.GetValueOrDefaultByReferenceEquals<K, V>(this DryIoc.ImTools.ImHashMap<K, V>[] parts, K key, int partHashMask = 15) -> V
~static DryIoc.ImTools.PartitionedHashMap.TryFind<K, V>(this DryIoc.ImTools.ImHashMap<K, V>[] parts, int hash, K key, out V value, int partHashMask = 15) -> bool
~static DryIoc.ImTools.PartitionedHashMap.TryFind<K, V>(this DryIoc.ImTools.ImHashMap<K, V>[] parts, K key, out V value, int partHashMask = 15) -> bool
~static DryIoc.ImTools.PartitionedHashMap.TryFindByReferenceEquals<K, V>(this DryIoc.ImTools.ImHashMap<K, V>[] parts, int hash, K key, out V value, int partHashMask = 15) -> bool
~static DryIoc.ImTools.PartitionedMap.AddOrKeep<V>(this DryIoc.ImTools.ImMap<V>[] parts, int hash, V value, int partHashMask = 15) -> void
~static DryIoc.ImTools.PartitionedMap.AddOrUpdate<V>(this DryIoc.ImTools.ImMap<V>[] parts, int hash, V value, DryIoc.ImTools.Update<int, V> update, int partHashMask = 15) -> void
~static DryIoc.ImTools.PartitionedMap.AddOrUpdate<V>(this DryIoc.ImTools.ImMap<V>[] parts, int hash, V value, int partHashMask = 15) -> void
~static DryIoc.ImTools.PartitionedMap.CreateEmpty<V>(int partionCountOfPowerOfTwo = 16) -> DryIoc.ImTools.ImMap<V>[]
~static DryIoc.ImTools.PartitionedMap.Enumerate<V>(this DryIoc.ImTools.ImMap<V>[] parts) -> System.Collections.Generic.IEnumerable<DryIoc.ImTools.ImMapEntry<V>>
~static DryIoc.ImTools.PartitionedMap.ForEach<V, S>(this DryIoc.ImTools.ImMap<V>[] parts, S state, System.Action<DryIoc.ImTools.ImMapEntry<V>, int, S> handler, DryIoc.ImTools.MapParentStack parents = null) -> S
~static DryIoc.ImTools.PartitionedMap.GetValueOrDefault<V>(this DryIoc.ImTools.ImMap<V>[] parts, int hash, int partHashMask = 15) -> V
~static DryIoc.ImTools.PartitionedMap.TryFind<V>(this DryIoc.ImTools.ImMap<V>[] parts, int hash, out V value, int partHashMask = 15) -> bool
~static DryIoc.ImTools.PartitionedMap.Update<V>(this DryIoc.ImTools.ImMap<V>[] parts, int hash, V value, int partHashMask = 15) -> void
~static DryIoc.ImTools.Ref.NewRef<T>(this DryIoc.ImTools.Ref<T> original) -> DryIoc.ImTools.Ref<T>
~static DryIoc.ImTools.Ref.Of<T>(T value) -> DryIoc.ImTools.Ref<T>
~static DryIoc.ImTools.Ref.Swap<T, A, B, C>(ref T value, A a, B b, C c, System.Func<T, A, B, C, T> getNewValue, int retryCountUntilThrow = 50) -> T
~static DryIoc.ImTools.Ref.Swap<T, A, B>(ref T value, A a, B b, System.Func<T, A, B, T> getNewValue, int retryCountUntilThrow = 50) -> T
~static DryIoc.ImTools.Ref.Swap<T, A>(ref T value, A a, System.Func<T, A, T> getNewValue, int retryCountUntilThrow = 50) -> T
~static DryIoc.ImTools.Ref.Swap<T>(ref T value, System.Func<T, T> getNewValue, int retryCountUntilThrow = 50) -> T
~static DryIoc.ImTools.Ref.SwapAndGetNewValue<T, A>(ref T value, A a, System.Func<T, A, T> getNewValue, int retryCountUntilThrow = 50) -> T
~static DryIoc.ImTools.St.Of<A, B>(A a, B b) -> DryIoc.ImTools.St<A, B>
~static DryIoc.ImTools.St.Of<A>(A a) -> DryIoc.ImTools.St<A>
~static DryIoc.ImTools.St.Rent<A, B>(A a, B b) -> DryIoc.ImTools.St<A, B>
~static DryIoc.ImTools.St.Rent<A>(A a) -> DryIoc.ImTools.St<A>
~static DryIoc.InstanceFactory.Of(object instance) -> DryIoc.InstanceFactory
~static DryIoc.InstanceFactory.Of(object instance, DryIoc.Setup setup) -> DryIoc.InstanceFactory
~static DryIoc.Interpreter.TryInterpret(DryIoc.IResolverContext r, DryIoc.FastExpressionCompiler.LightExpression.Expression expr, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, object paramValues, DryIoc.Interpreter.ParentLambdaArgs parentArgs, out object result) -> bool
~static DryIoc.Interpreter.TryInterpretAndUnwrapContainerException(DryIoc.IResolverContext r, DryIoc.FastExpressionCompiler.LightExpression.Expression expr, out object result) -> bool
~static DryIoc.Made.Of(DryIoc.FactoryMethodSelector factoryMethodSelector = null, DryIoc.ParameterSelector parameters = null, DryIoc.PropertiesAndFieldsSelector propertiesAndFields = null, bool isConditionalImplementation = false) -> DryIoc.Made
~static DryIoc.Parameters.Position(this DryIoc.ParameterSelector source, int position, System.Func<DryIoc.Request, object> getCustomValue) -> DryIoc.ParameterSelector
~static DryIoc.Parameters.Position(this DryIoc.ParameterSelector source, int position, System.Func<DryIoc.Request, System.Reflection.ParameterInfo, DryIoc.ServiceDetails> getServiceDetails) -> DryIoc.ParameterSelector
~static DryIoc.Parameters.Position(this DryIoc.ParameterSelector source, int position, System.Type requiredServiceType = null, object serviceKey = null, DryIoc.IfUnresolved ifUnresolved = DryIoc.IfUnresolved.Throw, object defaultValue = null, string metadataKey = null, object metadata = null) -> DryIoc.ParameterSelector
~static DryIoc.ParameterServiceInfo.Of(System.Reflection.ParameterInfo parameter, System.Type serviceType, DryIoc.ServiceDetails details) -> DryIoc.ParameterServiceInfo
~static DryIoc.ReflectionFactory.Of(System.Func<System.Type> implementationTypeProvider, DryIoc.IReuse reuse = null, DryIoc.Made made = null, DryIoc.Setup setup = null) -> DryIoc.ReflectionFactory
~static DryIoc.ReflectionFactory.Of(System.Type implementationType = null, DryIoc.IReuse reuse = null, DryIoc.Made made = null, DryIoc.Setup setup = null) -> DryIoc.ReflectionFactory
~static DryIoc.ReflectionFactory.Of(System.Type implementationType, DryIoc.IReuse reuse) -> DryIoc.ReflectionFactory
~static DryIoc.ReflectionTools.AddOrUpdate(this DryIoc.ImTools.ImHashMap<System.Type, object> map, System.Type t, object value) -> DryIoc.ImTools.ImHashMap<System.Type, object>
~static DryIoc.ReflectionTools.GetConversionOperatorOrNull(this System.Type sourceType, System.Type targetType) -> System.Reflection.MethodInfo
~static DryIoc.ReflectionTools.GetDefaultValueExpression(this System.Type type) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~static DryIoc.ReflectionTools.GetValueOrDefault(this DryIoc.ImTools.ImHashMap<System.Type, object> map, System.Type t) -> object
~static DryIoc.ReflectionTools.PublicConstructors(this System.Type type) -> System.Reflection.ConstructorInfo[]
~static DryIoc.Registrator.Register(this DryIoc.IRegistrator registrator, System.Type serviceType, System.Type implementationType, DryIoc.IReuse reuse) -> void
~static DryIoc.Registrator.RegisterDelegate(this DryIoc.IRegistrator r, System.Type serviceType, System.Type dep1Type, System.Type dep2Type, System.Func<object, object, object> factory, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterDelegate(this DryIoc.IRegistrator r, System.Type serviceType, System.Type dep1Type, System.Type dep2Type, System.Type dep3Type, System.Func<object, object, object, object> factory, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterDelegate(this DryIoc.IRegistrator r, System.Type serviceType, System.Type dep1Type, System.Type dep2Type, System.Type dep3Type, System.Type dep4Type, System.Func<object, object, object, object, object> factory, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterDelegate(this DryIoc.IRegistrator r, System.Type serviceType, System.Type dep1Type, System.Type dep2Type, System.Type dep3Type, System.Type dep4Type, System.Type dep5Type, System.Func<object, object, object, object, object, object> factory, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterDelegate(this DryIoc.IRegistrator r, System.Type serviceType, System.Type dep1Type, System.Type dep2Type, System.Type dep3Type, System.Type dep4Type, System.Type dep5Type, System.Type dep6Type, System.Func<object, object, object, object, object, object, object> factory, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterDelegate(this DryIoc.IRegistrator r, System.Type serviceType, System.Type dep1Type, System.Type dep2Type, System.Type dep3Type, System.Type dep4Type, System.Type dep5Type, System.Type dep6Type, System.Type dep7Type, System.Func<object, object, object, object, object, object, object, object> factory, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterDelegate(this DryIoc.IRegistrator r, System.Type serviceType, System.Type depType, System.Func<object, object> factory, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterDelegate<TDep1, TDep2, TDep3, TDep4, TDep5, TDep6, TDep7>(this DryIoc.IRegistrator r, System.Type serviceType, System.Func<TDep1, TDep2, TDep3, TDep4, TDep5, TDep6, TDep7, object> factory, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterDelegate<TDep1, TDep2, TDep3, TDep4, TDep5, TDep6>(this DryIoc.IRegistrator r, System.Type serviceType, System.Func<TDep1, TDep2, TDep3, TDep4, TDep5, TDep6, object> factory, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterDelegate<TDep1, TDep2, TDep3, TDep4, TDep5>(this DryIoc.IRegistrator r, System.Type serviceType, System.Func<TDep1, TDep2, TDep3, TDep4, TDep5, object> factory, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterDelegate<TDep1, TDep2, TDep3, TDep4>(this DryIoc.IRegistrator r, System.Type serviceType, System.Func<TDep1, TDep2, TDep3, TDep4, object> factory, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterDelegate<TDep1, TDep2, TDep3>(this DryIoc.IRegistrator r, System.Type serviceType, System.Func<TDep1, TDep2, TDep3, object> factory, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.RegisterDelegate<TDep1, TDep2>(this DryIoc.IRegistrator r, System.Type serviceType, System.Func<TDep1, TDep2, object> factory, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
~static DryIoc.Registrator.ToFactory(this System.Type implType) -> DryIoc.ReflectionFactory
~static DryIoc.Registrator.ToFactory(this System.Type implType, DryIoc.IReuse reuse = null, DryIoc.Made made = null, DryIoc.Setup setup = null) -> DryIoc.ReflectionFactory
~static DryIoc.Registrator.TrackDisposable(this DryIoc.IRegistrator registrator, object instance) -> void
~static DryIoc.Registrator.TrackDisposable(this DryIoc.IRegistrator registrator, object instance, DryIoc.Setup setup) -> void
~static DryIoc.Registrator.Use(this DryIoc.IContainer c, System.Type serviceType, DryIoc.FactoryDelegate factory) -> void
~static DryIoc.Registrator.Use(this DryIoc.IRegistrator r, System.Type serviceType, DryIoc.FactoryDelegate factory) -> void
~static DryIoc.Registrator.Use(this DryIoc.IResolverContext r, System.Type serviceType, DryIoc.FactoryDelegate factory) -> void
~static DryIoc.Registrator.Use<TService>(this DryIoc.IContainer c, DryIoc.FactoryDelegate factory) -> void
~static DryIoc.Registrator.Use<TService>(this DryIoc.IRegistrator r, DryIoc.FactoryDelegate factory) -> void
~static DryIoc.Registrator.Use<TService>(this DryIoc.IResolverContext r, DryIoc.FactoryDelegate factory) -> void
~static DryIoc.Request.Create(DryIoc.IContainer container, DryIoc.ServiceInfo serviceInfo, DryIoc.Request preResolveParent = null, DryIoc.RequestFlags flags = DryIoc.RequestFlags.Default, object[] inputArgs = null) -> DryIoc.Request
~static DryIoc.Request.Create(DryIoc.IContainer container, System.Type serviceType, object serviceKey = null, DryIoc.IfUnresolved ifUnresolved = DryIoc.IfUnresolved.Throw, System.Type requiredServiceType = null, DryIoc.Request preResolveParent = null, DryIoc.RequestFlags flags = DryIoc.RequestFlags.Default, object[] inputArgs = null) -> DryIoc.Request
~static DryIoc.Request.CreateResolutionRoot(DryIoc.IContainer container, System.Type serviceType, DryIoc.IfUnresolved ifUnresolved = DryIoc.IfUnresolved.Throw) -> DryIoc.Request
~static DryIoc.RequestTools.MatchFactoryConditionAndMetadata(this DryIoc.Request request, DryIoc.ServiceDetails details, DryIoc.Factory factory) -> bool
~static DryIoc.RequestTools.MatchFactoryReuse(this DryIoc.Request r, DryIoc.Factory f) -> bool
~static DryIoc.RequestTools.MatchGeneratedFactory(this DryIoc.Request r, DryIoc.Factory f) -> bool
~static DryIoc.RequestTools.MatchGeneratedFactoryByReuseAndConditionOrNull(this DryIoc.Request r, DryIoc.Factory f) -> DryIoc.Factory
~static DryIoc.Resolver.CreateResolutionExpression(DryIoc.Request request, bool openResolutionScope = false, bool asResolutionCall = false) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~static DryIoc.ResolverContext.GetCurrentScopeOrThrow(this DryIoc.IResolverContext r) -> DryIoc.IScope
~static DryIoc.ResolverContext.GetRootOrSelfExpr(DryIoc.Request request) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~static DryIoc.ResolverContext.IsUsed(this DryIoc.IResolverContext r, System.Type serviceType) -> bool
~static DryIoc.ResolverContext.IsUsed<TService>(this DryIoc.IResolverContext r) -> bool
~static DryIoc.ResolverContext.OpenScope(this DryIoc.IResolverContext r) -> DryIoc.IResolverContext
~static DryIoc.ResolverContext.OpenScope(this DryIoc.IResolverContext r, object name, bool trackInParent = false) -> DryIoc.IResolverContext
~static DryIoc.ResolverContext.TrackDisposable<T>(this DryIoc.IResolverContext r, T instance, int disposalOrder = 0) -> T
~static DryIoc.Scope.Of(DryIoc.IScope parent) -> DryIoc.IScope
~static DryIoc.Scope.Of(DryIoc.IScope parent, object name) -> DryIoc.IScope
~static DryIoc.Scope.Of(object name) -> DryIoc.IScope
~static DryIoc.ScopeTools.Clone(this DryIoc.IScope s) -> DryIoc.IScope
~static DryIoc.ScopeTools.IsUsed(this DryIoc.IScope s, System.Type serviceType) -> bool
~static DryIoc.ScopeTools.Use(this DryIoc.IScope s, System.Type type, object instance) -> void
~static DryIoc.ScopeTools.Use<T>(this DryIoc.IScope s, object instance) -> void
~static DryIoc.ScopeTools.UseFactory(this DryIoc.IScope s, System.Type type, DryIoc.FactoryDelegate factory) -> void
~static DryIoc.ScopeTools.UseFactory<T>(this DryIoc.IScope s, DryIoc.FactoryDelegate factory) -> void
~static DryIoc.ServiceDetails.Of(DryIoc.IfUnresolved ifUnresolved) -> DryIoc.ServiceDetails
~static DryIoc.ServiceInfo.Of(System.Type serviceType) -> DryIoc.ServiceInfo
~static DryIoc.ServiceInfo.Of(System.Type serviceType, DryIoc.IfUnresolved ifUnresolved) -> DryIoc.ServiceInfo
~static DryIoc.ServiceInfo.Of(System.Type serviceType, DryIoc.IfUnresolved ifUnresolved, object serviceKey) -> DryIoc.ServiceInfo
~static DryIoc.ServiceInfo.Of(System.Type serviceType, DryIoc.ServiceDetails details) -> DryIoc.ServiceInfo
~static DryIoc.ServiceInfo.Of(System.Type serviceType, object serviceKey) -> DryIoc.ServiceInfo
~static DryIoc.ServiceInfoTools.GetActualServiceType(this DryIoc.ServiceInfo info) -> System.Type
~static DryIoc.ServiceInfoTools.InheritInfoFromDependencyOwner(this DryIoc.ServiceInfo dependency, System.Type ownerServiceType, DryIoc.ServiceDetails ownerDetails, DryIoc.IContainer container, DryIoc.FactoryType ownerType = DryIoc.FactoryType.Service) -> DryIoc.ServiceInfo
~static DryIoc.ServiceInfoTools.InheritInfoFromDependencyOwner(this System.Type serviceType, DryIoc.ServiceInfo owner, DryIoc.IContainer container, DryIoc.FactoryType ownerFactoryType = DryIoc.FactoryType.Service) -> DryIoc.ServiceInfo
~static DryIoc.ServiceInfoTools.InheritInfoFromDependencyOwner(this System.Type serviceType, System.Type ownerServiceType, DryIoc.ServiceDetails ownerDetails, DryIoc.IContainer container, DryIoc.FactoryType ownerType = DryIoc.FactoryType.Service) -> object
~static DryIoc.ServiceInfoTools.Print(this System.Text.StringBuilder s, DryIoc.ServiceInfo info) -> System.Text.StringBuilder
~static DryIoc.ServiceInfoTools.WithIfUnresolved(this DryIoc.ServiceInfo source, DryIoc.IfUnresolved ifUnresolved) -> DryIoc.ServiceInfo
~static DryIoc.ServiceInfoTools.WithType(this DryIoc.ServiceInfo source, System.Type serviceType) -> DryIoc.ServiceInfo
~static DryIoc.Setup.DecoratorWith(System.Func<DryIoc.Request, bool> condition = null, int order = 0, bool useDecorateeReuse = false, bool openResolutionScope = false, bool asResolutionCall = false, bool preventDisposal = false, bool weaklyReferenced = false, bool allowDisposableTransient = false, bool trackDisposableTransient = false, int disposalOrder = 0, bool avoidResolutionScopeTracking = false) -> DryIoc.Setup
~static DryIoc.Setup.With(object metadataOrFuncOfMetadata = null, System.Func<DryIoc.Request, bool> condition = null, bool openResolutionScope = false, bool asResolutionCall = false, bool asResolutionRoot = false, bool preventDisposal = false, bool weaklyReferenced = false, bool allowDisposableTransient = false, bool trackDisposableTransient = false, bool useParentReuse = false, int disposalOrder = 0, bool preferInSingleServiceResolve = false, bool avoidResolutionScopeTracking = false) -> DryIoc.Setup
~static DryIoc.Setup.WrapperWith(int wrappedServiceTypeArgIndex = -1, bool alwaysWrapsRequiredServiceType = false, System.Func<System.Type, System.Type> unwrap = null, bool openResolutionScope = false, bool asResolutionCall = false, bool preventDisposal = false, bool weaklyReferenced = false, bool allowDisposableTransient = false, bool trackDisposableTransient = false, bool useParentReuse = false, System.Func<DryIoc.Request, bool> condition = null, int disposalOrder = 0, bool avoidResolutionScopeTracking = false) -> DryIoc.Setup
~static DryIoc.Throw.When(bool throwIfInvalid, int error, object arg0 = null, object arg1 = null, object arg2 = null, object arg3 = null) -> bool
~static DryIoc.WrapperExpressionFactory.Of(System.Func<DryIoc.Request, DryIoc.Factory, DryIoc.FastExpressionCompiler.LightExpression.Expression> getServiceExpression) -> DryIoc.WrapperExpressionFactory
~static DryIoc.WrapperExpressionFactory.Of(System.Func<DryIoc.Request, DryIoc.Factory, DryIoc.FastExpressionCompiler.LightExpression.Expression> getServiceExpression, DryIoc.IReuse reuse, DryIoc.Setup setup = null) -> DryIoc.WrapperExpressionFactory
~static DryIoc.WrapperExpressionFactory.Of(System.Func<DryIoc.Request, DryIoc.Factory, DryIoc.FastExpressionCompiler.LightExpression.Expression> getServiceExpression, DryIoc.Setup setup) -> DryIoc.WrapperExpressionFactory
~static DryIoc.WrappersSupport.GetFuncOrActionExpressionOrDefault(DryIoc.Request request, DryIoc.Factory serviceFactory = null) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~static DryIoc.WrappersSupport.GetLazyExpressionOrDefault(DryIoc.Request request, DryIoc.Factory serviceFactory = null) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~static DryIoc.WrappersSupport.GetMetaExpressionOrDefault(DryIoc.Request request, DryIoc.Factory serviceFactory = null) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~static DryIoc.WrappersSupport.MatchMetadataType(this DryIoc.Factory f, System.Type metadataType) -> bool
~static readonly DryIoc.FactoryDelegateCompiler.ResolverContextParamExpr -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~static readonly DryIoc.FactoryDelegateCompiler.ResolverContextParamExprs -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression[]
~static readonly DryIoc.FastExpressionCompiler.LightExpression.Expression.FalseConstant -> DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression
~static readonly DryIoc.FastExpressionCompiler.LightExpression.Expression.MinusOneConstant -> DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression
~static readonly DryIoc.FastExpressionCompiler.LightExpression.Expression.NullConstant -> DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression
~static readonly DryIoc.FastExpressionCompiler.LightExpression.Expression.OneConstant -> DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression
~static readonly DryIoc.FastExpressionCompiler.LightExpression.Expression.TrueConstant -> DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression
~static readonly DryIoc.FastExpressionCompiler.LightExpression.Expression.VoidDefault -> DryIoc.FastExpressionCompiler.LightExpression.DefaultExpression
~static readonly DryIoc.FastExpressionCompiler.LightExpression.Expression.ZeroConstant -> DryIoc.FastExpressionCompiler.LightExpression.ConstantExpression
~static readonly DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.EmptyArrayClosure -> DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ArrayClosure
~static readonly DryIoc.ImTools.ImHashMap<K, V>.Empty -> DryIoc.ImTools.ImHashMap<K, V>
~static readonly DryIoc.ImTools.ImList<T>.Empty -> DryIoc.ImTools.ImList<T>
~static readonly DryIoc.ImTools.ImMap<V>.Empty -> DryIoc.ImTools.ImMap<V>
~static readonly DryIoc.ImTools.ImZipper<T>.Empty -> DryIoc.ImTools.ImZipper<T>
~static readonly DryIoc.ResolverContext.CurrentOrSingletonScopeExpr -> DryIoc.FastExpressionCompiler.LightExpression.PropertyExpression
~static readonly DryIoc.ResolverContext.CurrentScopeExpr -> DryIoc.FastExpressionCompiler.LightExpression.PropertyExpression
~static readonly DryIoc.ResolverContext.GetCurrentScopeOrThrowExpr -> DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression
~static readonly DryIoc.ResolverContext.RootOrSelfExpr -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~static readonly DryIoc.ResolverContext.SingletonScopeExpr -> DryIoc.FastExpressionCompiler.LightExpression.PropertyExpression
~static readonly DryIoc.Setup.AsResolutionCallSetup -> DryIoc.Setup
~static readonly DryIoc.WrappersSupport.Wrappers -> DryIoc.ImTools.ImHashMap<System.Type, object>
~virtual DryIoc.Factory.ApplyReuse(DryIoc.FastExpressionCompiler.LightExpression.Expression serviceExpr, DryIoc.Request request) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.Factory.CreateExpressionWithWrappedFactory(DryIoc.Request request, DryIoc.Factory serviceFactory) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.Factory.GeneratedFactories.get -> DryIoc.ImTools.ImHashMap<DryIoc.ImTools.KV<System.Type, object>, DryIoc.ReflectionFactory>
~virtual DryIoc.Factory.GeneratorFactory.get -> DryIoc.ReflectionFactory
~virtual DryIoc.Factory.GetExpressionOrDefault(DryIoc.Request request) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.Factory.GetGeneratedFactoryOrDefault(DryIoc.Request request, bool ifErrorReturnDefault = false) -> DryIoc.Factory
~virtual DryIoc.FactoryMethod.FactoryExpression.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.FactoryMethod.FactoryServiceInfo.get -> DryIoc.ServiceInfo
~virtual DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression.Conversion.get -> DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression
~virtual DryIoc.FastExpressionCompiler.LightExpression.BinaryExpression.Method.get -> System.Reflection.MethodInfo
~virtual DryIoc.FastExpressionCompiler.LightExpression.BlockExpression.GetArgument(int index) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.FastExpressionCompiler.LightExpression.BlockExpression.Variables.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression>
~virtual DryIoc.FastExpressionCompiler.LightExpression.ConditionalExpression.IfFalse.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.FastExpressionCompiler.LightExpression.ElementInit.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~virtual DryIoc.FastExpressionCompiler.LightExpression.ElementInit.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.FastExpressionCompiler.LightExpression.Expression.Reduce() -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.FastExpressionCompiler.LightExpression.Expression.Tag.get -> object
~virtual DryIoc.FastExpressionCompiler.LightExpression.Expression.TryCollectBoundConstants(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags config, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, bool isNestedLambda, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo rootClosure) -> bool
~virtual DryIoc.FastExpressionCompiler.LightExpression.Expression.TryEmit(DryIoc.FastExpressionCompiler.LightExpression.CompilerFlags config, ref DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ClosureInfo closure, DryIoc.FastExpressionCompiler.LightExpression.IParameterProvider paramExprs, System.Reflection.Emit.ILGenerator il, DryIoc.FastExpressionCompiler.LightExpression.ExpressionCompiler.ParentFlags parent, int byRefIndex = -1) -> bool
~virtual DryIoc.FastExpressionCompiler.LightExpression.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor visitor) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.FastExpressionCompiler.LightExpression.GotoExpression.Value.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.FastExpressionCompiler.LightExpression.IndexExpression.GetArgument(int index) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.FastExpressionCompiler.LightExpression.IndexExpression.Indexer.get -> System.Reflection.PropertyInfo
~virtual DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~virtual DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression.Expression.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.FastExpressionCompiler.LightExpression.InvocationExpression.GetArgument(int index) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.FastExpressionCompiler.LightExpression.LabelExpression.DefaultValue.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.FastExpressionCompiler.LightExpression.LabelTarget.Name.get -> string
~virtual DryIoc.FastExpressionCompiler.LightExpression.LabelTarget.Type.get -> System.Type
~virtual DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression.GetParameter(int index) -> DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression
~virtual DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression.Parameters.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.ParameterExpression>
~virtual DryIoc.FastExpressionCompiler.LightExpression.LambdaExpression.ReturnType.get -> System.Type
~virtual DryIoc.FastExpressionCompiler.LightExpression.MemberExpression.Expression.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.FastExpressionCompiler.LightExpression.MemberInitExpression.Bindings.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.MemberBinding>
~virtual DryIoc.FastExpressionCompiler.LightExpression.MemberInitExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.MemberBinding
~virtual DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~virtual DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression.Method.get -> System.Reflection.MethodInfo
~virtual DryIoc.FastExpressionCompiler.LightExpression.MethodCallExpression.Object.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.FastExpressionCompiler.LightExpression.NewArrayExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.FastExpressionCompiler.LightExpression.NewExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<DryIoc.FastExpressionCompiler.LightExpression.Expression>
~virtual DryIoc.FastExpressionCompiler.LightExpression.NewExpression.GetArgument(int i) -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.FastExpressionCompiler.LightExpression.SwitchExpression.Comparison.get -> System.Reflection.MethodInfo
~virtual DryIoc.FastExpressionCompiler.LightExpression.TryExpression.Finally.get -> DryIoc.FastExpressionCompiler.LightExpression.Expression
~virtual DryIoc.FastExpressionCompiler.LightExpression.UnaryExpression.Method.get -> System.Reflection.MethodInfo
~virtual DryIoc.ImTools.ImHashMap<K, V>.AddOrGetEntry(int hash, DryIoc.ImTools.ImHashMap<K, V>.Entry entry) -> DryIoc.ImTools.ImHashMap<K, V>
~virtual DryIoc.Made.FactoryMethodKnownResultType.get -> System.Type
~virtual DryIoc.Made.Parameters.get -> DryIoc.ParameterSelector
~virtual DryIoc.Made.PropertiesAndFields.get -> DryIoc.PropertiesAndFieldsSelector
~virtual DryIoc.Scope.Clone(bool withDisposables) -> DryIoc.IScope
~virtual DryIoc.Scope.Name.get -> object
~virtual DryIoc.Scope.Parent.get -> DryIoc.IScope
~virtual DryIoc.ServiceInfo.Create(System.Type serviceType, DryIoc.ServiceDetails details) -> DryIoc.ServiceInfo
*REMOVED* abstract FastExpressionCompiler.LightExpression.Expression.NodeType.get -> System.Linq.Expressions.ExpressionType
*REMOVED* abstract FastExpressionCompiler.LightExpression.MemberBinding.BindingType.get -> System.Linq.Expressions.MemberBindingType
*REMOVED* const DryIoc.Rules.DefaultDependencyDepthToSplitObjectGraph = 20 -> int
*REMOVED* const ImTools.GrowingList.DefaultInitialCapacity = 2 -> int
*REMOVED* const ImTools.GrowingList<T>.DefaultInitialCapacity = 2 -> int
*REMOVED* const ImTools.ImHashMapSlots.HASH_MASK_TO_FIND_SLOT = 31 -> int
*REMOVED* const ImTools.ImHashMapSlots.SLOT_COUNT_POWER_OF_TWO = 32 -> int
*REMOVED* const ImTools.ImMapSlots.KEY_MASK_TO_FIND_SLOT = 31 -> int
*REMOVED* const ImTools.ImMapSlots.SLOT_COUNT_POWER_OF_TWO = 32 -> int
*REMOVED* const ImTools.Ref.RETRY_COUNT_UNTIL_THROW = 50 -> int
*REMOVED* DryIoc.Factory.Caching.get -> DryIoc.FactoryCaching
*REMOVED* DryIoc.Factory.Caching.set -> void
*REMOVED* DryIoc.FactoryCaching
*REMOVED* DryIoc.FactoryCaching.Default = 0 -> DryIoc.FactoryCaching
*REMOVED* DryIoc.FactoryCaching.DoNotCache = 2 -> DryIoc.FactoryCaching
*REMOVED* DryIoc.FactoryCaching.PleaseDontSetDoNotCache = 1 -> DryIoc.FactoryCaching
*REMOVED* DryIoc.IConcreteFactoryGenerator
*REMOVED* DryIoc.IServiceInfo
*REMOVED* DryIoc.PropertyOrFieldServiceInfo.PropertyOrFieldServiceInfo() -> void
*REMOVED* DryIoc.ReflectionFactory.GeneratorFactoryID.get -> int
*REMOVED* DryIoc.RegisteredInstanceFactory
*REMOVED* DryIoc.Request.ShouldSplitObjectGraph() -> bool
*REMOVED* DryIoc.RequestFlags.IsDirectlyWrappedInFunc = 512 -> DryIoc.RequestFlags
*REMOVED* DryIoc.RequestFlags.IsGeneratedResolutionDependencyExpression = 256 -> DryIoc.RequestFlags
*REMOVED* DryIoc.RequestFlags.IsResolutionCall = 32 -> DryIoc.RequestFlags
*REMOVED* DryIoc.RequestFlags.IsSingletonOrDependencyOfSingleton = 8 -> DryIoc.RequestFlags
*REMOVED* DryIoc.RequestFlags.IsWrappedInFunc = 16 -> DryIoc.RequestFlags
*REMOVED* DryIoc.RequestFlags.OpensResolutionScope = 64 -> DryIoc.RequestFlags
*REMOVED* DryIoc.RequestFlags.StopRecursiveDependencyCheck = 128 -> DryIoc.RequestFlags
*REMOVED* DryIoc.RequestFlags.TracksTransientDisposable = 2 -> DryIoc.RequestFlags
*REMOVED* DryIoc.Rules.DependencyDepthToSplitObjectGraph.get -> int
*REMOVED* DryIoc.Rules.UseFastExpressionCompiler.get -> bool
*REMOVED* FastExpressionCompiler.LightExpression.ArgumentsExpression
*REMOVED* FastExpressionCompiler.LightExpression.ArrayIndexExpression
*REMOVED* FastExpressionCompiler.LightExpression.AssignBinaryExpression
*REMOVED* FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* FastExpressionCompiler.LightExpression.BlockExpression
*REMOVED* FastExpressionCompiler.LightExpression.CatchBlock
*REMOVED* FastExpressionCompiler.LightExpression.CatchBlock.CatchBlock() -> void
*REMOVED* FastExpressionCompiler.LightExpression.CoalesceConversionBinaryExpression
*REMOVED* FastExpressionCompiler.LightExpression.CodePrinter
*REMOVED* FastExpressionCompiler.LightExpression.CodePrinter.IObjectToCode
*REMOVED* FastExpressionCompiler.LightExpression.ConditionalExpression
*REMOVED* FastExpressionCompiler.LightExpression.ConstantExpression
*REMOVED* FastExpressionCompiler.LightExpression.ConvertWithMethodUnaryExpression
*REMOVED* FastExpressionCompiler.LightExpression.DefaultExpression
*REMOVED* FastExpressionCompiler.LightExpression.Expression
*REMOVED* FastExpressionCompiler.LightExpression.Expression.Expression() -> void
*REMOVED* FastExpressionCompiler.LightExpression.Expression<TDelegate>
*REMOVED* FastExpressionCompiler.LightExpression.ExpressionCodePrinter
*REMOVED* FastExpressionCompiler.LightExpression.ExpressionCompiler
*REMOVED* FastExpressionCompiler.LightExpression.ExpressionCompiler.ArrayClosure
*REMOVED* FastExpressionCompiler.LightExpression.ExpressionCompiler.ArrayClosureWithNonPassedParams
*REMOVED* FastExpressionCompiler.LightExpression.ExpressionCompiler.NestedLambdaWithConstantsAndNestedLambdas
*REMOVED* FastExpressionCompiler.LightExpression.FieldExpression
*REMOVED* FastExpressionCompiler.LightExpression.FiveArgumentsMethodCallExpression
*REMOVED* FastExpressionCompiler.LightExpression.FiveArgumentsNewExpression
*REMOVED* FastExpressionCompiler.LightExpression.FourArgumentsMethodCallExpression
*REMOVED* FastExpressionCompiler.LightExpression.FourArgumentsNewExpression
*REMOVED* FastExpressionCompiler.LightExpression.GotoExpression
*REMOVED* FastExpressionCompiler.LightExpression.ILGeneratorHacks
*REMOVED* FastExpressionCompiler.LightExpression.IndexExpression
*REMOVED* FastExpressionCompiler.LightExpression.InstanceFiveArgumentsMethodCallExpression
*REMOVED* FastExpressionCompiler.LightExpression.InstanceFourArgumentsMethodCallExpression
*REMOVED* FastExpressionCompiler.LightExpression.InstanceManyArgumentsMethodCallExpression
*REMOVED* FastExpressionCompiler.LightExpression.InstanceMethodCallExpression
*REMOVED* FastExpressionCompiler.LightExpression.InstanceOneArgumentMethodCallExpression
*REMOVED* FastExpressionCompiler.LightExpression.InstanceThreeArgumentsMethodCallExpression
*REMOVED* FastExpressionCompiler.LightExpression.InstanceTwoArgumentsMethodCallExpression
*REMOVED* FastExpressionCompiler.LightExpression.InvocationExpression
*REMOVED* FastExpressionCompiler.LightExpression.LabelExpression
*REMOVED* FastExpressionCompiler.LightExpression.LambdaExpression
*REMOVED* FastExpressionCompiler.LightExpression.LoopExpression
*REMOVED* FastExpressionCompiler.LightExpression.ManyArgumentsMethodCallExpression
*REMOVED* FastExpressionCompiler.LightExpression.ManyArgumentsNewExpression
*REMOVED* FastExpressionCompiler.LightExpression.ManyParametersExpression<TDelegate>
*REMOVED* FastExpressionCompiler.LightExpression.ManyParametersLambdaExpression
*REMOVED* FastExpressionCompiler.LightExpression.MemberAssignment
*REMOVED* FastExpressionCompiler.LightExpression.MemberBinding
*REMOVED* FastExpressionCompiler.LightExpression.MemberExpression
*REMOVED* FastExpressionCompiler.LightExpression.MemberInitExpression
*REMOVED* FastExpressionCompiler.LightExpression.MethodCallExpression
*REMOVED* FastExpressionCompiler.LightExpression.NewArrayExpression
*REMOVED* FastExpressionCompiler.LightExpression.NewExpression
*REMOVED* FastExpressionCompiler.LightExpression.NewValueTypeExpression
*REMOVED* FastExpressionCompiler.LightExpression.OneArgumentMethodCallExpression
*REMOVED* FastExpressionCompiler.LightExpression.OneArgumentNewExpression
*REMOVED* FastExpressionCompiler.LightExpression.OneVariableTwoExpressionBlockExpression
*REMOVED* FastExpressionCompiler.LightExpression.ParameterExpression
*REMOVED* FastExpressionCompiler.LightExpression.PropertyExpression
*REMOVED* FastExpressionCompiler.LightExpression.SimpleBinaryExpression
*REMOVED* FastExpressionCompiler.LightExpression.SwitchCase
*REMOVED* FastExpressionCompiler.LightExpression.SwitchCase.SwitchCase() -> void
*REMOVED* FastExpressionCompiler.LightExpression.SwitchExpression
*REMOVED* FastExpressionCompiler.LightExpression.ThreeArgumentsMethodCallExpression
*REMOVED* FastExpressionCompiler.LightExpression.ThreeArgumentsNewExpression
*REMOVED* FastExpressionCompiler.LightExpression.TryExpression
*REMOVED* FastExpressionCompiler.LightExpression.TwoArgumentsMethodCallExpression
*REMOVED* FastExpressionCompiler.LightExpression.TwoArgumentsNewExpression
*REMOVED* FastExpressionCompiler.LightExpression.TypeBinaryExpression
*REMOVED* FastExpressionCompiler.LightExpression.TypedConstantExpression
*REMOVED* FastExpressionCompiler.LightExpression.TypedConstantExpression<T>
*REMOVED* FastExpressionCompiler.LightExpression.TypedUnaryExpression
*REMOVED* FastExpressionCompiler.LightExpression.TypedUnaryExpression<T>
*REMOVED* FastExpressionCompiler.LightExpression.UnaryExpression
*REMOVED* ImTools.ArrayTools
*REMOVED* ImTools.Box<TBox, T>.Box() -> void
*REMOVED* ImTools.Box<TBox, T>.Value.get -> T
*REMOVED* ImTools.Fun
*REMOVED* ImTools.GrowingList
*REMOVED* ImTools.GrowingList<T>
*REMOVED* ImTools.GrowingList<T>.Count -> int
*REMOVED* ImTools.GrowingList<T>.GrowingList() -> void
*REMOVED* ImTools.GrowingList<T>.Pop() -> void
*REMOVED* ImTools.GrowingList<T>.Push(T item) -> void
*REMOVED* ImTools.GrowingList<T>.PushSlot() -> T
*REMOVED* ImTools.Hasher
*REMOVED* ImTools.I<T>
*REMOVED* ImTools.I<T>.Value.get -> T
*REMOVED* ImTools.IFoldReducer<T, S>
*REMOVED* ImTools.IFoldReducer<T, S>.Reduce(T x, S state) -> S
*REMOVED* ImTools.ImHashMap
*REMOVED* ImTools.ImHashMap<K, V>
*REMOVED* ImTools.ImHashMap<K, V>.ContainsConflictedData(K key) -> bool
*REMOVED* ImTools.ImHashMap<K, V>.GetConflictedValueOrDefault(K key, V defaultValue) -> V
*REMOVED* ImTools.ImHashMap<K, V>.Hash.get -> int
*REMOVED* ImTools.ImHashMap<K, V>.Height -> int
*REMOVED* ImTools.ImHashMap<K, V>.ImHashMap(int hash, K key) -> void
*REMOVED* ImTools.ImHashMap<K, V>.ImHashMap(int hash, K key, V value) -> void
*REMOVED* ImTools.ImHashMap<K, V>.IsEmpty.get -> bool
*REMOVED* ImTools.ImHashMap<K, V>.Key.get -> K
*REMOVED* ImTools.ImHashMap<K, V>.TryFindConflictedValue(K key, out V value) -> bool
*REMOVED* ImTools.ImHashMap<K, V>.Value.get -> V
*REMOVED* ImTools.ImHashMapConflicts<K, V>
*REMOVED* ImTools.ImHashMapEntry<K, V>
*REMOVED* ImTools.ImHashMapEntry<K, V>.ImHashMapEntry(int hash, K key) -> void
*REMOVED* ImTools.ImHashMapEntry<K, V>.ImHashMapEntry(int hash, K key, V value) -> void
*REMOVED* ImTools.ImHashMapEntry<K, V>.Value -> V
*REMOVED* ImTools.ImHashMapSlots
*REMOVED* ImTools.ImList
*REMOVED* ImTools.ImList<T>
*REMOVED* ImTools.ImList<T>.IsEmpty.get -> bool
*REMOVED* ImTools.ImMap
*REMOVED* ImTools.ImMap.KValue<K>
*REMOVED* ImTools.ImMap.KValue<K>.Key -> K
*REMOVED* ImTools.ImMap.KValue<K>.KValue() -> void
*REMOVED* ImTools.ImMap<V>
*REMOVED* ImTools.ImMap<V>.ImMap() -> void
*REMOVED* ImTools.ImMap<V>.IsEmpty.get -> bool
*REMOVED* ImTools.ImMapBranch<V>
*REMOVED* ImTools.ImMapEntry<V>
*REMOVED* ImTools.ImMapEntry<V>.ImMapEntry(int key) -> void
*REMOVED* ImTools.ImMapEntry<V>.ImMapEntry(int key, V value) -> void
*REMOVED* ImTools.ImMapEntry<V>.Value -> V
*REMOVED* ImTools.ImMapSlots
*REMOVED* ImTools.ImMapTree<V>
*REMOVED* ImTools.ImMapTree<V>.TreeHeight -> int
*REMOVED* ImTools.ImZipper
*REMOVED* ImTools.ImZipper<T>
*REMOVED* ImTools.ImZipper<T>.IsEmpty.get -> bool
*REMOVED* ImTools.IPrintable
*REMOVED* ImTools.Item<TItem, T>.item
*REMOVED* ImTools.Item<TItem, T>.Item() -> void
*REMOVED* ImTools.Item<TItem, T>.item.item() -> void
*REMOVED* ImTools.Item<TItem, T>.item.item(T x) -> void
*REMOVED* ImTools.Item<TItem, T>.item.Value.get -> T
*REMOVED* ImTools.Item<TItem>.item
*REMOVED* ImTools.Item<TItem>.Item() -> void
*REMOVED* ImTools.Item<TItem>.item.item() -> void
*REMOVED* ImTools.KeysAndValues<K, V>
*REMOVED* ImTools.KeysAndValues<K, V>.Count -> int
*REMOVED* ImTools.KeysAndValues<K, V>.KeysAndValues() -> void
*REMOVED* ImTools.KeyValuePair
*REMOVED* ImTools.KV
*REMOVED* ImTools.KV<K, V>
*REMOVED* ImTools.KV<K, V>.KV(K key, V value) -> void
*REMOVED* ImTools.Lazy
*REMOVED* ImTools.Opt<T>
*REMOVED* ImTools.Opt<T>.Opt() -> void
*REMOVED* ImTools.Opt<T>.Opt(T value) -> void
*REMOVED* ImTools.Opt<T>.OrDefault(T defaultValue = default(T)) -> T
*REMOVED* ImTools.Ref
*REMOVED* ImTools.StackPool<T>.StackPool() -> void
*REMOVED* ImTools.U<T1, T2, T3, T4, T5, T6, T7>
*REMOVED* ImTools.U<T1, T2, T3, T4, T5, T6, T7>.U() -> void
*REMOVED* ImTools.U<T1, T2, T3, T4, T5, T6>
*REMOVED* ImTools.U<T1, T2, T3, T4, T5, T6>.U() -> void
*REMOVED* ImTools.U<T1, T2, T3, T4, T5>
*REMOVED* ImTools.U<T1, T2, T3, T4, T5>.U() -> void
*REMOVED* ImTools.U<T1, T2, T3, T4>
*REMOVED* ImTools.U<T1, T2, T3, T4>.U() -> void
*REMOVED* ImTools.U<T1, T2, T3>
*REMOVED* ImTools.U<T1, T2, T3>.U() -> void
*REMOVED* ImTools.U<T1, T2>
*REMOVED* ImTools.U<T1, T2>.U() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case1
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case1.case1() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case1.case1(T1 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case1.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case1 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case1.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case1.Value.get -> T1
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case10
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case10.case10() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case10.case10(T10 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case10.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case10 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case10.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case10.Value.get -> T10
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case2
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case2.case2() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case2.case2(T2 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case2.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case2 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case2.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case2.Value.get -> T2
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case3
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case3.case3() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case3.case3(T3 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case3.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case3 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case3.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case3.Value.get -> T3
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case4
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case4.case4() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case4.case4(T4 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case4.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case4 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case4.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case4.Value.get -> T4
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case5
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case5.case5() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case5.case5(T5 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case5.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case5 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case5.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case5.Value.get -> T5
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case6
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case6.case6() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case6.case6(T6 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case6.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case6 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case6.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case6.Value.get -> T6
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case7
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case7.case7() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case7.case7(T7 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case7.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case7 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case7.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case7.Value.get -> T7
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case8
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case8.case8() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case8.case8(T8 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case8.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case8 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case8.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case8.Value.get -> T8
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case9
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case9.case9() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case9.case9(T9 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case9.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case9 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case9.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case9.Value.get -> T9
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Tag.Case1 = 0 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Tag.Case10 = 9 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Tag.Case2 = 1 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Tag.Case3 = 2 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Tag.Case4 = 3 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Tag.Case5 = 4 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Tag.Case6 = 5 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Tag.Case7 = 6 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Tag.Case8 = 7 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Tag.Case9 = 8 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.union
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Union() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.union.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case1
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case1.case1() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case1.case1(T1 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case1.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case1 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case1.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case1.Value.get -> T1
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case2
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case2.case2() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case2.case2(T2 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case2.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case2 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case2.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case2.Value.get -> T2
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case3
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case3.case3() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case3.case3(T3 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case3.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case3 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case3.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case3.Value.get -> T3
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case4
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case4.case4() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case4.case4(T4 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case4.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case4 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case4.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case4.Value.get -> T4
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case5
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case5.case5() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case5.case5(T5 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case5.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case5 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case5.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case5.Value.get -> T5
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case6
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case6.case6() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case6.case6(T6 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case6.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case6 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case6.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case6.Value.get -> T6
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case7
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case7.case7() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case7.case7(T7 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case7.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case7 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case7.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case7.Value.get -> T7
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case8
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case8.case8() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case8.case8(T8 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case8.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case8 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case8.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case8.Value.get -> T8
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case9
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case9.case9() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case9.case9(T9 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case9.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case9 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case9.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case9.Value.get -> T9
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Tag.Case1 = 0 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Tag.Case2 = 1 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Tag.Case3 = 2 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Tag.Case4 = 3 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Tag.Case5 = 4 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Tag.Case6 = 5 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Tag.Case7 = 6 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Tag.Case8 = 7 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Tag.Case9 = 8 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.union
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Union() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.union.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case1
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case1.case1() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case1.case1(T1 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case1.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case1 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case1.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case1.Value.get -> T1
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case2
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case2.case2() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case2.case2(T2 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case2.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case2 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case2.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case2.Value.get -> T2
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case3
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case3.case3() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case3.case3(T3 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case3.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case3 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case3.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case3.Value.get -> T3
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case4
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case4.case4() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case4.case4(T4 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case4.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case4 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case4.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case4.Value.get -> T4
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case5
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case5.case5() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case5.case5(T5 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case5.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case5 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case5.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case5.Value.get -> T5
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case6
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case6.case6() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case6.case6(T6 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case6.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case6 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case6.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case6.Value.get -> T6
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case7
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case7.case7() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case7.case7(T7 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case7.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case7 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case7.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case7.Value.get -> T7
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case8
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case8.case8() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case8.case8(T8 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case8.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case8 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case8.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case8.Value.get -> T8
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.Tag.Case1 = 0 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.Tag.Case2 = 1 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.Tag.Case3 = 2 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.Tag.Case4 = 3 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.Tag.Case5 = 4 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.Tag.Case6 = 5 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.Tag.Case7 = 6 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.Tag.Case8 = 7 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.union
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.Union() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.union.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case1
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case1.case1() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case1.case1(T1 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case1.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case1 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case1.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case1.Value.get -> T1
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case2
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case2.case2() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case2.case2(T2 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case2.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case2 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case2.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case2.Value.get -> T2
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case3
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case3.case3() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case3.case3(T3 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case3.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case3 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case3.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case3.Value.get -> T3
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case4
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case4.case4() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case4.case4(T4 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case4.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case4 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case4.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case4.Value.get -> T4
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case5
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case5.case5() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case5.case5(T5 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case5.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case5 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case5.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case5.Value.get -> T5
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case6
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case6.case6() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case6.case6(T6 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case6.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case6 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case6.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case6.Value.get -> T6
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case7
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case7.case7() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case7.case7(T7 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case7.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case7 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case7.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case7.Value.get -> T7
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.Tag.Case1 = 0 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.Tag.Case2 = 1 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.Tag.Case3 = 2 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.Tag.Case4 = 3 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.Tag.Case5 = 4 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.Tag.Case6 = 5 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.Tag.Case7 = 6 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.union
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.Union() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.union.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case1
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case1.case1() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case1.case1(T1 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case1.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case1 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case1.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case1.Value.get -> T1
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case2
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case2.case2() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case2.case2(T2 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case2.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case2 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case2.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case2.Value.get -> T2
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case3
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case3.case3() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case3.case3(T3 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case3.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case3 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case3.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case3.Value.get -> T3
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case4
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case4.case4() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case4.case4(T4 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case4.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case4 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case4.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case4.Value.get -> T4
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case5
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case5.case5() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case5.case5(T5 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case5.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case5 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case5.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case5.Value.get -> T5
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case6
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case6.case6() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case6.case6(T6 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case6.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case6 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case6.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case6.Value.get -> T6
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.Tag.Case1 = 0 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.Tag.Case2 = 1 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.Tag.Case3 = 2 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.Tag.Case4 = 3 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.Tag.Case5 = 4 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.Tag.Case6 = 5 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.union
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.Union() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.union.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case1
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case1.case1() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case1.case1(T1 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case1.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case1 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case1.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case1.Value.get -> T1
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case2
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case2.case2() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case2.case2(T2 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case2.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case2 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case2.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case2.Value.get -> T2
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case3
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case3.case3() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case3.case3(T3 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case3.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case3 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case3.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case3.Value.get -> T3
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case4
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case4.case4() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case4.case4(T4 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case4.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case4 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case4.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case4.Value.get -> T4
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case5
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case5.case5() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case5.case5(T5 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case5.Equals(ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case5 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case5.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case5.Value.get -> T5
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>.Tag.Case1 = 0 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>.Tag.Case2 = 1 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>.Tag.Case3 = 2 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>.Tag.Case4 = 3 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>.Tag.Case5 = 4 -> ImTools.Union<TUnion, T1, T2, T3, T4, T5>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>.union
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>.Union() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4, T5>.union.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4, T5>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4>
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4>.case1
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4>.case1.case1() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4>.case1.case1(T1 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4>.case1.Equals(ImTools.Union<TUnion, T1, T2, T3, T4>.case1 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4>.case1.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4>.case1.Value.get -> T1
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4>.case2
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4>.case2.case2() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4>.case2.case2(T2 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4>.case2.Equals(ImTools.Union<TUnion, T1, T2, T3, T4>.case2 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4>.case2.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4>.case2.Value.get -> T2
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4>.case3
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4>.case3.case3() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4>.case3.case3(T3 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4>.case3.Equals(ImTools.Union<TUnion, T1, T2, T3, T4>.case3 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4>.case3.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4>.case3.Value.get -> T3
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4>.case4
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4>.case4.case4() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4>.case4.case4(T4 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4>.case4.Equals(ImTools.Union<TUnion, T1, T2, T3, T4>.case4 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4>.case4.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4>.case4.Value.get -> T4
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4>.Tag.Case1 = 0 -> ImTools.Union<TUnion, T1, T2, T3, T4>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4>.Tag.Case2 = 1 -> ImTools.Union<TUnion, T1, T2, T3, T4>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4>.Tag.Case3 = 2 -> ImTools.Union<TUnion, T1, T2, T3, T4>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4>.Tag.Case4 = 3 -> ImTools.Union<TUnion, T1, T2, T3, T4>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4>.union
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4>.Union() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3, T4>.union.Tag.get -> ImTools.Union<TUnion, T1, T2, T3, T4>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3>
*REMOVED* ImTools.Union<TUnion, T1, T2, T3>.case1
*REMOVED* ImTools.Union<TUnion, T1, T2, T3>.case1.case1() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3>.case1.case1(T1 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3>.case1.Equals(ImTools.Union<TUnion, T1, T2, T3>.case1 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3>.case1.Tag.get -> ImTools.Union<TUnion, T1, T2, T3>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3>.case1.Value.get -> T1
*REMOVED* ImTools.Union<TUnion, T1, T2, T3>.case2
*REMOVED* ImTools.Union<TUnion, T1, T2, T3>.case2.case2() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3>.case2.case2(T2 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3>.case2.Equals(ImTools.Union<TUnion, T1, T2, T3>.case2 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3>.case2.Tag.get -> ImTools.Union<TUnion, T1, T2, T3>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3>.case2.Value.get -> T2
*REMOVED* ImTools.Union<TUnion, T1, T2, T3>.case3
*REMOVED* ImTools.Union<TUnion, T1, T2, T3>.case3.case3() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3>.case3.case3(T3 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3>.case3.Equals(ImTools.Union<TUnion, T1, T2, T3>.case3 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2, T3>.case3.Tag.get -> ImTools.Union<TUnion, T1, T2, T3>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3>.case3.Value.get -> T3
*REMOVED* ImTools.Union<TUnion, T1, T2, T3>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3>.Tag.Case1 = 0 -> ImTools.Union<TUnion, T1, T2, T3>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3>.Tag.Case2 = 1 -> ImTools.Union<TUnion, T1, T2, T3>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3>.Tag.Case3 = 2 -> ImTools.Union<TUnion, T1, T2, T3>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2, T3>.union
*REMOVED* ImTools.Union<TUnion, T1, T2, T3>.Union() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2, T3>.union.Tag.get -> ImTools.Union<TUnion, T1, T2, T3>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2>
*REMOVED* ImTools.Union<TUnion, T1, T2>.case1
*REMOVED* ImTools.Union<TUnion, T1, T2>.case1.case1() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2>.case1.case1(T1 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2>.case1.Equals(ImTools.Union<TUnion, T1, T2>.case1 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2>.case1.Tag.get -> ImTools.Union<TUnion, T1, T2>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2>.case1.Value.get -> T1
*REMOVED* ImTools.Union<TUnion, T1, T2>.case2
*REMOVED* ImTools.Union<TUnion, T1, T2>.case2.case2() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2>.case2.case2(T2 x) -> void
*REMOVED* ImTools.Union<TUnion, T1, T2>.case2.Equals(ImTools.Union<TUnion, T1, T2>.case2 other) -> bool
*REMOVED* ImTools.Union<TUnion, T1, T2>.case2.Tag.get -> ImTools.Union<TUnion, T1, T2>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2>.case2.Value.get -> T2
*REMOVED* ImTools.Union<TUnion, T1, T2>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2>.Tag.Case1 = 0 -> ImTools.Union<TUnion, T1, T2>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2>.Tag.Case2 = 1 -> ImTools.Union<TUnion, T1, T2>.Tag
*REMOVED* ImTools.Union<TUnion, T1, T2>.union
*REMOVED* ImTools.Union<TUnion, T1, T2>.Union() -> void
*REMOVED* ImTools.Union<TUnion, T1, T2>.union.Tag.get -> ImTools.Union<TUnion, T1, T2>.Tag
*REMOVED* ImTools.UnionTools
*REMOVED* ImTools.Unit
*REMOVED* ImTools.Unit.Equals(ImTools.Unit other) -> bool
*REMOVED* ImTools.Unit.Unit() -> void
*REMOVED* ImTools.Update<K, V>
*REMOVED* ImTools.Update<V>
*REMOVED* override DryIoc.RegisteredInstanceFactory.HasRuntimeState.get -> bool
*REMOVED* override FastExpressionCompiler.LightExpression.BinaryExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
*REMOVED* override FastExpressionCompiler.LightExpression.BlockExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
*REMOVED* override FastExpressionCompiler.LightExpression.ConditionalExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
*REMOVED* override FastExpressionCompiler.LightExpression.ConstantExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
*REMOVED* override FastExpressionCompiler.LightExpression.DefaultExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
*REMOVED* override FastExpressionCompiler.LightExpression.FiveArgumentsMethodCallExpression.FewArgumentCount.get -> int
*REMOVED* override FastExpressionCompiler.LightExpression.FiveArgumentsNewExpression.FewArgumentCount.get -> int
*REMOVED* override FastExpressionCompiler.LightExpression.FourArgumentsMethodCallExpression.FewArgumentCount.get -> int
*REMOVED* override FastExpressionCompiler.LightExpression.FourArgumentsNewExpression.FewArgumentCount.get -> int
*REMOVED* override FastExpressionCompiler.LightExpression.GotoExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
*REMOVED* override FastExpressionCompiler.LightExpression.IndexExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
*REMOVED* override FastExpressionCompiler.LightExpression.InvocationExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
*REMOVED* override FastExpressionCompiler.LightExpression.LabelExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
*REMOVED* override FastExpressionCompiler.LightExpression.LambdaExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
*REMOVED* override FastExpressionCompiler.LightExpression.LoopExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
*REMOVED* override FastExpressionCompiler.LightExpression.ManyArgumentsMethodCallExpression.FewArgumentCount.get -> int
*REMOVED* override FastExpressionCompiler.LightExpression.ManyArgumentsNewExpression.FewArgumentCount.get -> int
*REMOVED* override FastExpressionCompiler.LightExpression.MemberAssignment.BindingType.get -> System.Linq.Expressions.MemberBindingType
*REMOVED* override FastExpressionCompiler.LightExpression.MemberExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
*REMOVED* override FastExpressionCompiler.LightExpression.MemberInitExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
*REMOVED* override FastExpressionCompiler.LightExpression.MethodCallExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
*REMOVED* override FastExpressionCompiler.LightExpression.NewArrayExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
*REMOVED* override FastExpressionCompiler.LightExpression.NewExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
*REMOVED* override FastExpressionCompiler.LightExpression.OneArgumentMethodCallExpression.FewArgumentCount.get -> int
*REMOVED* override FastExpressionCompiler.LightExpression.OneArgumentNewExpression.FewArgumentCount.get -> int
*REMOVED* override FastExpressionCompiler.LightExpression.OneVariableTwoExpressionBlockExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
*REMOVED* override FastExpressionCompiler.LightExpression.ParameterExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
*REMOVED* override FastExpressionCompiler.LightExpression.SwitchExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
*REMOVED* override FastExpressionCompiler.LightExpression.ThreeArgumentsMethodCallExpression.FewArgumentCount.get -> int
*REMOVED* override FastExpressionCompiler.LightExpression.ThreeArgumentsNewExpression.FewArgumentCount.get -> int
*REMOVED* override FastExpressionCompiler.LightExpression.TryExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
*REMOVED* override FastExpressionCompiler.LightExpression.TwoArgumentsMethodCallExpression.FewArgumentCount.get -> int
*REMOVED* override FastExpressionCompiler.LightExpression.TwoArgumentsNewExpression.FewArgumentCount.get -> int
*REMOVED* override FastExpressionCompiler.LightExpression.TypeBinaryExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
*REMOVED* override FastExpressionCompiler.LightExpression.UnaryExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
*REMOVED* override ImTools.Box<TBox, T>.GetHashCode() -> int
*REMOVED* override ImTools.ImMapBranch<V>.Height.get -> int
*REMOVED* override ImTools.ImMapEntry<V>.Height.get -> int
*REMOVED* override ImTools.ImMapTree<V>.Height.get -> int
*REMOVED* override ImTools.Item<TItem, T>.item.GetHashCode() -> int
*REMOVED* override ImTools.Item<TItem>.item.GetHashCode() -> int
*REMOVED* override ImTools.KV<K, V>.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case1.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case10.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case2.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case3.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case4.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case5.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case6.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case7.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case8.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case9.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case1.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case2.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case3.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case4.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case5.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case6.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case7.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case8.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case9.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case1.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case2.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case3.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case4.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case5.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case6.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case7.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case8.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case1.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case2.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case3.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case4.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case5.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case6.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case7.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case1.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case2.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case3.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case4.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case5.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case6.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case1.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case2.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case3.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case4.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case5.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4>.case1.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4>.case2.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4>.case3.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3, T4>.case4.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3>.case1.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3>.case2.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2, T3>.case3.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2>.case1.GetHashCode() -> int
*REMOVED* override ImTools.Union<TUnion, T1, T2>.case2.GetHashCode() -> int
*REMOVED* override ImTools.Unit.GetHashCode() -> int
*REMOVED* readonly FastExpressionCompiler.LightExpression.GotoExpression.Kind -> System.Linq.Expressions.GotoExpressionKind
*REMOVED* readonly FastExpressionCompiler.LightExpression.ParameterExpression.IsByRef -> bool
*REMOVED* readonly ImTools.ImHashMapEntry<K, V>.Hash -> int
*REMOVED* readonly ImTools.ImHashMapEntry<K, V>.Key -> K
*REMOVED* readonly ImTools.ImList<T>.Head -> T
*REMOVED* readonly ImTools.ImMapEntry<V>.Key -> int
*REMOVED* readonly ImTools.ImZipper<T>.Count -> int
*REMOVED* readonly ImTools.ImZipper<T>.Focus -> T
*REMOVED* readonly ImTools.ImZipper<T>.Index -> int
*REMOVED* readonly ImTools.Item<TItem, T>.item.Item -> T
*REMOVED* readonly ImTools.KV<K, V>.Key -> K
*REMOVED* readonly ImTools.KV<K, V>.Value -> V
*REMOVED* readonly ImTools.Opt<T>.HasValue -> bool
*REMOVED* readonly ImTools.Opt<T>.Value -> T
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case1.Case -> T1
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case10.Case -> T10
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case2.Case -> T2
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case3.Case -> T3
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case4.Case -> T4
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case5.Case -> T5
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case6.Case -> T6
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case7.Case -> T7
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case8.Case -> T8
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case9.Case -> T9
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case1.Case -> T1
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case2.Case -> T2
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case3.Case -> T3
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case4.Case -> T4
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case5.Case -> T5
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case6.Case -> T6
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case7.Case -> T7
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case8.Case -> T8
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case9.Case -> T9
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case1.Case -> T1
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case2.Case -> T2
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case3.Case -> T3
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case4.Case -> T4
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case5.Case -> T5
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case6.Case -> T6
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case7.Case -> T7
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case8.Case -> T8
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case1.Case -> T1
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case2.Case -> T2
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case3.Case -> T3
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case4.Case -> T4
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case5.Case -> T5
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case6.Case -> T6
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case7.Case -> T7
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case1.Case -> T1
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case2.Case -> T2
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case3.Case -> T3
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case4.Case -> T4
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case5.Case -> T5
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case6.Case -> T6
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case1.Case -> T1
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case2.Case -> T2
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case3.Case -> T3
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case4.Case -> T4
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case5.Case -> T5
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4>.case1.Case -> T1
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4>.case2.Case -> T2
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4>.case3.Case -> T3
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3, T4>.case4.Case -> T4
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3>.case1.Case -> T1
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3>.case2.Case -> T2
*REMOVED* readonly ImTools.Union<TUnion, T1, T2, T3>.case3.Case -> T3
*REMOVED* readonly ImTools.Union<TUnion, T1, T2>.case1.Case -> T1
*REMOVED* readonly ImTools.Union<TUnion, T1, T2>.case2.Case -> T2
*REMOVED* static ImTools.Fun.Always<T>(T _) -> bool
*REMOVED* static ImTools.Fun.Id<T>(T x) -> T
*REMOVED* static ImTools.Fun.ToFunc<T, R>(this R result, T ignoredArg) -> R
*REMOVED* static ImTools.Hasher.Combine(int h1, int h2) -> int
*REMOVED* static ImTools.Hasher.Combine<T1, T2>(T1 a, T2 b) -> int
*REMOVED* static ImTools.KeyValuePair.Pair<K, V>(this K key, V value) -> System.Collections.Generic.KeyValuePair<K, V>
*REMOVED* static ImTools.Opt<T>.implicit operator ImTools.Opt<T>(T value) -> ImTools.Opt<T>
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case1.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case1(T1 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case1
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case10.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case10(T10 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case10
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case2.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case2(T2 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case2
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case3.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case3(T3 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case3
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case4.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case4(T4 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case4
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case5.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case5(T5 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case5
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case6.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case6(T6 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case6
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case7.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case7(T7 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case7
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case8.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case8(T8 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case8
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case9.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case9(T9 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case9
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case1.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case1(T1 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case1
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case2.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case2(T2 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case2
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case3.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case3(T3 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case3
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case4.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case4(T4 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case4
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case5.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case5(T5 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case5
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case6.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case6(T6 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case6
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case7.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case7(T7 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case7
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case8.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case8(T8 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case8
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case9.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case9(T9 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case9
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case1.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case1(T1 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case1
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case2.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case2(T2 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case2
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case3.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case3(T3 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case3
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case4.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case4(T4 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case4
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case5.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case5(T5 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case5
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case6.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case6(T6 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case6
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case7.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case7(T7 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case7
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case8.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case8(T8 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case8
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case1.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case1(T1 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case1
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case2.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case2(T2 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case2
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case3.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case3(T3 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case3
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case4.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case4(T4 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case4
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case5.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case5(T5 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case5
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case6.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case6(T6 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case6
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case7.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case7(T7 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case7
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case1.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case1(T1 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case1
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case2.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case2(T2 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case2
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case3.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case3(T3 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case3
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case4.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case4(T4 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case4
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case5.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case5(T5 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case5
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case6.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case6(T6 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case6
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case1.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case1(T1 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case1
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case2.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case2(T2 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case2
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case3.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case3(T3 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case3
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case4.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case4(T4 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case4
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case5.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case5(T5 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case5
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4>.case1.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4>.case1(T1 x) -> ImTools.Union<TUnion, T1, T2, T3, T4>.case1
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4>.case2.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4>.case2(T2 x) -> ImTools.Union<TUnion, T1, T2, T3, T4>.case2
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4>.case3.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4>.case3(T3 x) -> ImTools.Union<TUnion, T1, T2, T3, T4>.case3
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3, T4>.case4.implicit operator ImTools.Union<TUnion, T1, T2, T3, T4>.case4(T4 x) -> ImTools.Union<TUnion, T1, T2, T3, T4>.case4
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3>.case1.implicit operator ImTools.Union<TUnion, T1, T2, T3>.case1(T1 x) -> ImTools.Union<TUnion, T1, T2, T3>.case1
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3>.case2.implicit operator ImTools.Union<TUnion, T1, T2, T3>.case2(T2 x) -> ImTools.Union<TUnion, T1, T2, T3>.case2
*REMOVED* static ImTools.Union<TUnion, T1, T2, T3>.case3.implicit operator ImTools.Union<TUnion, T1, T2, T3>.case3(T3 x) -> ImTools.Union<TUnion, T1, T2, T3>.case3
*REMOVED* static ImTools.Union<TUnion, T1, T2>.case1.implicit operator ImTools.Union<TUnion, T1, T2>.case1(T1 x) -> ImTools.Union<TUnion, T1, T2>.case1
*REMOVED* static ImTools.Union<TUnion, T1, T2>.case2.implicit operator ImTools.Union<TUnion, T1, T2>.case2(T2 x) -> ImTools.Union<TUnion, T1, T2>.case2
*REMOVED* static readonly DryIoc.Error.UnableToFindSingletonInstance -> int
*REMOVED* static readonly ImTools.Unit.unit -> ImTools.Unit
*REMOVED* virtual FastExpressionCompiler.LightExpression.MethodCallExpression.FewArgumentCount.get -> int
*REMOVED* virtual FastExpressionCompiler.LightExpression.NewExpression.FewArgumentCount.get -> int
*REMOVED* virtual ImTools.ImMap<V>.Height.get -> int
*REMOVED* ~abstract DryIoc.Factory.CreateExpressionOrDefault(DryIoc.Request request) -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~abstract DryIoc.PropertyOrFieldServiceInfo.Create(System.Type serviceType, DryIoc.ServiceDetails details) -> DryIoc.IServiceInfo
*REMOVED* ~abstract DryIoc.PropertyOrFieldServiceInfo.ServiceType.get -> System.Type
*REMOVED* ~abstract FastExpressionCompiler.LightExpression.Expression.ToCodeString(System.Text.StringBuilder sb, int lineIdent = 0, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null, int identSpaces = 2) -> System.Text.StringBuilder
*REMOVED* ~abstract FastExpressionCompiler.LightExpression.Expression.Type.get -> System.Type
*REMOVED* ~abstract FastExpressionCompiler.LightExpression.MemberBinding.ToCodeString(System.Text.StringBuilder sb, int lineIdent, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null, int identSpaces = 2) -> System.Text.StringBuilder
*REMOVED* ~DryIoc.Container.GetConstantExpression(object item, System.Type itemType = null, bool throwIfStateRequired = false) -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~DryIoc.Container.Use(System.Type serviceType, DryIoc.FactoryDelegate factory) -> void
*REMOVED* ~DryIoc.Container.UseInstance(System.Type serviceType, object instance, DryIoc.IfAlreadyRegistered ifAlreadyRegistered, bool preventDisposal, bool weaklyReferenced, object serviceKey) -> void
*REMOVED* ~DryIoc.CurrentScopeReuse.Apply(DryIoc.Request request, FastExpressionCompiler.LightExpression.Expression serviceFactoryExpr) -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~DryIoc.CurrentScopeReuse.ToExpression(System.Func<object, FastExpressionCompiler.LightExpression.Expression> fallbackConverter) -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~DryIoc.DefaultDynamicKey.ToExpression(System.Func<object, FastExpressionCompiler.LightExpression.Expression> fallbackConverter) -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~DryIoc.DefaultKey.ToExpression(System.Func<object, FastExpressionCompiler.LightExpression.Expression> fallbackConverter) -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~DryIoc.DelegateFactory.DelegateFactory(DryIoc.FactoryDelegate factoryDelegate, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, System.Type knownImplementationType = null) -> void
*REMOVED* ~DryIoc.ExpressionFactory.ExpressionFactory(System.Func<DryIoc.Request, FastExpressionCompiler.LightExpression.Expression> getServiceExpression, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null) -> void
*REMOVED* ~DryIoc.Factory.Factory(DryIoc.IReuse reuse = null, DryIoc.Setup setup = null) -> void
*REMOVED* ~DryIoc.FactoryMethod.FactoryMethod(System.Reflection.ConstructorInfo constructor) -> void
*REMOVED* ~DryIoc.IConcreteFactoryGenerator.GeneratedFactories.get -> ImTools.ImHashMap<ImTools.KV<System.Type, object>, DryIoc.ReflectionFactory>
*REMOVED* ~DryIoc.IConcreteFactoryGenerator.GetGeneratedFactory(DryIoc.Request request, bool ifErrorReturnDefault = false) -> DryIoc.Factory
*REMOVED* ~DryIoc.IContainer.GetAllServiceFactories(System.Type serviceType, bool bothClosedAndOpenGenerics = false) -> System.Collections.Generic.IEnumerable<ImTools.KV<object, DryIoc.Factory>>
*REMOVED* ~DryIoc.IContainer.GetConstantExpression(object item, System.Type itemType = null, bool throwIfStateRequired = false) -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~DryIoc.IContainer.GetDecoratorExpressionOrDefault(DryIoc.Request request) -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~DryIoc.IContainer.GetServiceRegisteredAndDynamicFactories(System.Type serviceType) -> ImTools.KV<object, DryIoc.Factory>[]
*REMOVED* ~DryIoc.IContainer.OwnCurrentScope.get -> DryIoc.IScope
*REMOVED* ~DryIoc.IContainer.Rules.get -> DryIoc.Rules
*REMOVED* ~DryIoc.IContainer.Use(System.Type serviceType, DryIoc.FactoryDelegate factory) -> void
*REMOVED* ~DryIoc.IContainer.UseInstance(System.Type serviceType, object instance, DryIoc.IfAlreadyRegistered IfAlreadyRegistered, bool preventDisposal, bool weaklyReferenced, object serviceKey) -> void
*REMOVED* ~DryIoc.IConvertibleToExpression.ToExpression(System.Func<object, FastExpressionCompiler.LightExpression.Expression> fallbackConverter) -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~DryIoc.Interpreter.ParentLambdaArgs.ParentLambdaArgs(DryIoc.Interpreter.ParentLambdaArgs parentWithArgs, object paramExprs, object paramValues) -> void
*REMOVED* ~DryIoc.IRegistrator.Use(System.Type serviceType, DryIoc.FactoryDelegate factory) -> void
*REMOVED* ~DryIoc.IRegistrator.UseInstance(System.Type serviceType, object instance, DryIoc.IfAlreadyRegistered IfAlreadyRegistered, bool preventDisposal, bool weaklyReferenced, object serviceKey) -> void
*REMOVED* ~DryIoc.IResolverContext.Use(System.Type serviceType, DryIoc.FactoryDelegate factory) -> void
*REMOVED* ~DryIoc.IResolverContext.UseInstance(System.Type serviceType, object instance, DryIoc.IfAlreadyRegistered IfAlreadyRegistered, bool preventDisposal, bool weaklyReferenced, object serviceKey) -> void
*REMOVED* ~DryIoc.IReuse.Apply(DryIoc.Request request, FastExpressionCompiler.LightExpression.Expression serviceFactoryExpr) -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~DryIoc.IScope.Clone() -> DryIoc.IScope
*REMOVED* ~DryIoc.IScope.GetOrAddViaFactoryDelegate(int id, DryIoc.FactoryDelegate createValue, DryIoc.IResolverContext r, int disposalOrder = 0) -> object
*REMOVED* ~DryIoc.IScope.SetUsedInstance(int typeHash, System.Type type, DryIoc.FactoryDelegate factory) -> void
*REMOVED* ~DryIoc.IScope.SetUsedInstance(System.Type type, DryIoc.FactoryDelegate factory) -> void
*REMOVED* ~DryIoc.IScope.TrackDisposable(object item, int disposalOrder = 0) -> object
*REMOVED* ~DryIoc.IScope.TrackDisposableWithoutDisposalOrder<T>(T disposable) -> T
*REMOVED* ~DryIoc.IScope.TryGetOrAddWithoutClosure(int id, DryIoc.IResolverContext resolveContext, FastExpressionCompiler.LightExpression.Expression expr, bool useFec, System.Func<DryIoc.IResolverContext, FastExpressionCompiler.LightExpression.Expression, bool, object> createValue, int disposalOrder = 0) -> object
*REMOVED* ~DryIoc.IScope.TryGetUsedInstance(DryIoc.IResolverContext r, System.Type type, out object instance) -> bool
*REMOVED* ~DryIoc.IServiceInfo.Create(System.Type serviceType, DryIoc.ServiceDetails details) -> DryIoc.IServiceInfo
*REMOVED* ~DryIoc.IServiceInfo.Details.get -> DryIoc.ServiceDetails
*REMOVED* ~DryIoc.IServiceInfo.ServiceType.get -> System.Type
*REMOVED* ~DryIoc.Made.FactoryMethod.get -> DryIoc.FactoryMethodSelector
*REMOVED* ~DryIoc.Made.FactoryMethodKnownResultType.get -> System.Type
*REMOVED* ~DryIoc.Made.Parameters.get -> DryIoc.ParameterSelector
*REMOVED* ~DryIoc.Made.PropertiesAndFields.get -> DryIoc.PropertiesAndFieldsSelector
*REMOVED* ~DryIoc.OpenGenericTypeKey.ToExpression(System.Func<object, FastExpressionCompiler.LightExpression.Expression> fallbackConverter) -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~DryIoc.ParameterServiceInfo.Create(System.Type serviceType, DryIoc.ServiceDetails details) -> DryIoc.IServiceInfo
*REMOVED* ~DryIoc.ReflectionFactory.ReflectionFactory(System.Func<System.Type> implementationTypeProvider, DryIoc.IReuse reuse = null, DryIoc.Made made = null, DryIoc.Setup setup = null) -> void
*REMOVED* ~DryIoc.ReflectionFactory.ReflectionFactory(System.Type implementationType = null, DryIoc.IReuse reuse = null, DryIoc.Made made = null, DryIoc.Setup setup = null) -> void
*REMOVED* ~DryIoc.RegisteredInstanceFactory.RegisteredInstanceFactory(object instance, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null) -> void
*REMOVED* ~DryIoc.Request.Container -> DryIoc.IContainer
*REMOVED* ~DryIoc.Request.Enumerate() -> System.Collections.Generic.IEnumerable<DryIoc.Request>
*REMOVED* ~DryIoc.Request.GetInputArgsExpr() -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~DryIoc.Request.Metadata.get -> object
*REMOVED* ~DryIoc.Request.MetadataKey.get -> string
*REMOVED* ~DryIoc.Request.Push(DryIoc.IServiceInfo info, DryIoc.RequestFlags additionalFlags = (DryIoc.RequestFlags)0) -> DryIoc.Request
*REMOVED* ~DryIoc.Request.Push(System.Type serviceType, object serviceKey = null, DryIoc.IfUnresolved ifUnresolved = DryIoc.IfUnresolved.Throw, System.Type requiredServiceType = null, DryIoc.RequestFlags flags = (DryIoc.RequestFlags)0) -> DryIoc.Request
*REMOVED* ~DryIoc.Request.PushServiceType(System.Type serviceType, DryIoc.RequestFlags additionalFlags = (DryIoc.RequestFlags)0) -> DryIoc.Request
*REMOVED* ~DryIoc.Request.WithChangedServiceInfo(System.Func<DryIoc.IServiceInfo, DryIoc.IServiceInfo> getInfo) -> DryIoc.Request
*REMOVED* ~DryIoc.Request.WithInputArgs(FastExpressionCompiler.LightExpression.Expression[] inputArgs) -> DryIoc.Request
*REMOVED* ~DryIoc.Rules.DependencyResolutionCallExprs.get -> ImTools.Ref<ImTools.ImHashMap<DryIoc.Request, System.Linq.Expressions.Expression>>
*REMOVED* ~DryIoc.Rules.FactoryMethod.get -> DryIoc.FactoryMethodSelector
*REMOVED* ~DryIoc.Rules.WithDefaultReuseInsteadOfTransient(DryIoc.IReuse reuse) -> DryIoc.Rules
*REMOVED* ~DryIoc.Rules.WithDependencyDepthToSplitObjectGraph(int depth) -> DryIoc.Rules
*REMOVED* ~DryIoc.Rules.WithoutDependencyDepthToSplitObjectGraph() -> DryIoc.Rules
*REMOVED* ~DryIoc.Rules.WithoutFastExpressionCompiler() -> DryIoc.Rules
*REMOVED* ~DryIoc.Scope.Clone() -> DryIoc.IScope
*REMOVED* ~DryIoc.Scope.Clone(bool withDisposables) -> DryIoc.IScope
*REMOVED* ~DryIoc.Scope.GetOrAdd(int id, DryIoc.CreateScopedValue createValue, int disposalOrder = 0) -> object
*REMOVED* ~DryIoc.Scope.GetOrAddViaFactoryDelegate(int id, DryIoc.FactoryDelegate createValue, DryIoc.IResolverContext r, int disposalOrder = 0) -> object
*REMOVED* ~DryIoc.Scope.GetOrTryAdd(int id, object newItem, int disposalOrder) -> object
*REMOVED* ~DryIoc.Scope.Name.get -> object
*REMOVED* ~DryIoc.Scope.Parent.get -> DryIoc.IScope
*REMOVED* ~DryIoc.Scope.Scope(DryIoc.IScope parent = null, object name = null) -> void
*REMOVED* ~DryIoc.Scope.SetUsedInstance(int typeHash, System.Type type, DryIoc.FactoryDelegate factory) -> void
*REMOVED* ~DryIoc.Scope.SetUsedInstance(System.Type type, DryIoc.FactoryDelegate factory) -> void
*REMOVED* ~DryIoc.Scope.TrackDisposable(object item, int disposalOrder = 0) -> object
*REMOVED* ~DryIoc.Scope.TrackDisposableWithoutDisposalOrder<T>(T disposable) -> T
*REMOVED* ~DryIoc.Scope.TryGetOrAddWithoutClosure(int id, DryIoc.IResolverContext resolveContext, FastExpressionCompiler.LightExpression.Expression expr, bool useFec, System.Func<DryIoc.IResolverContext, FastExpressionCompiler.LightExpression.Expression, bool, object> createValue, int disposalOrder = 0) -> object
*REMOVED* ~DryIoc.Scope.TryGetUsedInstance(DryIoc.IResolverContext r, System.Type type, out object instance) -> bool
*REMOVED* ~DryIoc.ServiceInfo.Create(System.Type serviceType, DryIoc.ServiceDetails details) -> DryIoc.IServiceInfo
*REMOVED* ~DryIoc.ServiceInfo.ServiceKey.get -> object
*REMOVED* ~DryIoc.ServiceInfo.ServiceType.get -> System.Type
*REMOVED* ~DryIoc.SingletonReuse.Apply(DryIoc.Request request, FastExpressionCompiler.LightExpression.Expression serviceFactoryExpr) -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~DryIoc.SingletonReuse.ToExpression(System.Func<object, FastExpressionCompiler.LightExpression.Expression> fallbackConverter) -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~FastExpressionCompiler.LightExpression.ArgumentsExpression.ArgumentsExpression(System.Collections.Generic.IReadOnlyList<FastExpressionCompiler.LightExpression.Expression> arguments) -> void
*REMOVED* ~FastExpressionCompiler.LightExpression.BinaryExpression.BinaryExpression(System.Linq.Expressions.ExpressionType nodeType, FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right, System.Type type) -> void
*REMOVED* ~FastExpressionCompiler.LightExpression.BlockExpression.Result.get -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~FastExpressionCompiler.LightExpression.CodePrinter.IObjectToCode.ToCode(object x, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null) -> string
*REMOVED* ~FastExpressionCompiler.LightExpression.ConvertWithMethodUnaryExpression.ConvertWithMethodUnaryExpression(System.Linq.Expressions.ExpressionType nodeType, FastExpressionCompiler.LightExpression.Expression operand, System.Reflection.MethodInfo method) -> void
*REMOVED* ~FastExpressionCompiler.LightExpression.ConvertWithMethodUnaryExpression.ConvertWithMethodUnaryExpression(System.Linq.Expressions.ExpressionType nodeType, FastExpressionCompiler.LightExpression.Expression operand, System.Type type, System.Reflection.MethodInfo method) -> void
*REMOVED* ~FastExpressionCompiler.LightExpression.Expression.CodeString.get -> string
*REMOVED* ~FastExpressionCompiler.LightExpression.Expression.ToExpression() -> System.Linq.Expressions.Expression
*REMOVED* ~FastExpressionCompiler.LightExpression.Expression<TDelegate>.ToLambdaExpression() -> System.Linq.Expressions.Expression<TDelegate>
*REMOVED* ~FastExpressionCompiler.LightExpression.ExpressionCompiler.ArrayClosure.ArrayClosure(object[] constantsAndNestedLambdas) -> void
*REMOVED* ~FastExpressionCompiler.LightExpression.ExpressionCompiler.ArrayClosureWithNonPassedParams.ArrayClosureWithNonPassedParams(object[] constantsAndNestedLambdas, object[] nonPassedParams) -> void
*REMOVED* ~FastExpressionCompiler.LightExpression.ExpressionCompiler.NestedLambdaWithConstantsAndNestedLambdas.NestedLambdaWithConstantsAndNestedLambdas(object nestedLambda, object constantsAndNestedLambdas) -> void
*REMOVED* ~FastExpressionCompiler.LightExpression.FieldExpression.FieldInfo.get -> System.Reflection.FieldInfo
*REMOVED* ~FastExpressionCompiler.LightExpression.LambdaExpression.ToLambdaExpression() -> System.Linq.Expressions.LambdaExpression
*REMOVED* ~FastExpressionCompiler.LightExpression.MemberBinding.CodeString.get -> string
*REMOVED* ~FastExpressionCompiler.LightExpression.MemberExpression.MemberExpression(FastExpressionCompiler.LightExpression.Expression expression, System.Reflection.MemberInfo member) -> void
*REMOVED* ~FastExpressionCompiler.LightExpression.MemberInitExpression.NewExpression.get -> FastExpressionCompiler.LightExpression.NewExpression
*REMOVED* ~FastExpressionCompiler.LightExpression.NewArrayExpression.Expressions.get -> System.Collections.Generic.IReadOnlyList<FastExpressionCompiler.LightExpression.Expression>
*REMOVED* ~FastExpressionCompiler.LightExpression.OneVariableTwoExpressionBlockExpression.Result.get -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~FastExpressionCompiler.LightExpression.PropertyExpression.PropertyInfo.get -> System.Reflection.PropertyInfo
*REMOVED* ~FastExpressionCompiler.LightExpression.SwitchCase.SwitchCase(FastExpressionCompiler.LightExpression.Expression body, System.Collections.Generic.IEnumerable<FastExpressionCompiler.LightExpression.Expression> testValues) -> void
*REMOVED* ~FastExpressionCompiler.LightExpression.SwitchExpression.Cases.get -> System.Collections.Generic.IReadOnlyList<FastExpressionCompiler.LightExpression.SwitchCase>
*REMOVED* ~FastExpressionCompiler.LightExpression.SwitchExpression.SwitchExpression(System.Type type, FastExpressionCompiler.LightExpression.Expression switchValue, FastExpressionCompiler.LightExpression.Expression defaultBody, System.Reflection.MethodInfo comparison, FastExpressionCompiler.LightExpression.SwitchCase[] cases) -> void
*REMOVED* ~FastExpressionCompiler.LightExpression.TryExpression.Handlers.get -> System.Collections.Generic.IReadOnlyList<FastExpressionCompiler.LightExpression.CatchBlock>
*REMOVED* ~FastExpressionCompiler.LightExpression.TypeBinaryExpression.TypeOperand.get -> System.Type
*REMOVED* ~FastExpressionCompiler.LightExpression.TypedUnaryExpression.TypedUnaryExpression(System.Linq.Expressions.ExpressionType nodeType, FastExpressionCompiler.LightExpression.Expression operand, System.Type type) -> void
*REMOVED* ~FastExpressionCompiler.LightExpression.TypedUnaryExpression<T>.TypedUnaryExpression(System.Linq.Expressions.ExpressionType nodeType, FastExpressionCompiler.LightExpression.Expression operand) -> void
*REMOVED* ~FastExpressionCompiler.LightExpression.UnaryExpression.UnaryExpression(System.Linq.Expressions.ExpressionType nodeType, FastExpressionCompiler.LightExpression.Expression operand) -> void
*REMOVED* ~ImTools.Box<TBox, T>
*REMOVED* ~ImTools.Box<TBox, T>.Equals(ImTools.Box<TBox, T> other) -> bool
*REMOVED* ~ImTools.GrowingList<T>.GrowingList(T[] items, int count = 0) -> void
*REMOVED* ~ImTools.GrowingList<T>.Items -> T[]
*REMOVED* ~ImTools.GrowingList<T>.ResizeToArray() -> T[]
*REMOVED* ~ImTools.ImHashMap<K, V>.AddOrKeep(int hash, K key) -> ImTools.ImHashMap<K, V>
*REMOVED* ~ImTools.ImHashMap<K, V>.AddOrKeep(int hash, K key, V value) -> ImTools.ImHashMap<K, V>
*REMOVED* ~ImTools.ImHashMap<K, V>.AddOrKeep(K key) -> ImTools.ImHashMap<K, V>
*REMOVED* ~ImTools.ImHashMap<K, V>.AddOrKeep(K key, V value) -> ImTools.ImHashMap<K, V>
*REMOVED* ~ImTools.ImHashMap<K, V>.AddOrUpdate(int hash, K key, V value) -> ImTools.ImHashMap<K, V>
*REMOVED* ~ImTools.ImHashMap<K, V>.AddOrUpdate(int hash, K key, V value, ImTools.Update<K, V> update) -> ImTools.ImHashMap<K, V>
*REMOVED* ~ImTools.ImHashMap<K, V>.AddOrUpdate(K key, V value) -> ImTools.ImHashMap<K, V>
*REMOVED* ~ImTools.ImHashMap<K, V>.AddOrUpdate(K key, V value, ImTools.Update<K, V> update) -> ImTools.ImHashMap<K, V>
*REMOVED* ~ImTools.ImHashMap<K, V>.AddOrUpdate(K key, V value, ImTools.Update<V> update) -> ImTools.ImHashMap<K, V>
*REMOVED* ~ImTools.ImHashMap<K, V>.Conflicts.get -> ImTools.ImHashMapEntry<K, V>[]
*REMOVED* ~ImTools.ImHashMap<K, V>.Enumerate() -> System.Collections.Generic.IEnumerable<ImTools.ImHashMapEntry<K, V>>
*REMOVED* ~ImTools.ImHashMap<K, V>.FindFirstOrDefault(System.Func<ImTools.ImHashMapEntry<K, V>, bool> condition, ImTools.ImHashMap<K, V>[] parentsStack = null) -> ImTools.ImHashMapEntry<K, V>
*REMOVED* ~ImTools.ImHashMap<K, V>.Fold<S>(S state, System.Func<ImTools.ImHashMapEntry<K, V>, int, S, S> reduce, ImTools.ImHashMap<K, V>[] parentsStack = null) -> S
*REMOVED* ~ImTools.ImHashMap<K, V>.Fold<S>(S state, System.Func<ImTools.ImHashMapEntry<K, V>, S, S> reduce, ImTools.ImHashMap<K, V>[] parentsStack = null) -> S
*REMOVED* ~ImTools.ImHashMap<K, V>.GetConflictedEntryOrDefault(K key) -> ImTools.ImHashMapEntry<K, V>
*REMOVED* ~ImTools.ImHashMap<K, V>.ImHashMap(ImTools.ImHashMapEntry<K, V> entry) -> void
*REMOVED* ~ImTools.ImHashMap<K, V>.ImHashMap(ImTools.ImHashMapEntry<K, V> entry, ImTools.ImHashMap<K, V> left, ImTools.ImHashMap<K, V> right) -> void
*REMOVED* ~ImTools.ImHashMap<K, V>.ImHashMap(ImTools.ImHashMapEntry<K, V> entry, ImTools.ImHashMap<K, V> left, ImTools.ImHashMap<K, V> right, int height) -> void
*REMOVED* ~ImTools.ImHashMap<K, V>.Left -> ImTools.ImHashMap<K, V>
*REMOVED* ~ImTools.ImHashMap<K, V>.Remove(int hash, K key) -> ImTools.ImHashMap<K, V>
*REMOVED* ~ImTools.ImHashMap<K, V>.Remove(K key) -> ImTools.ImHashMap<K, V>
*REMOVED* ~ImTools.ImHashMap<K, V>.Right -> ImTools.ImHashMap<K, V>
*REMOVED* ~ImTools.ImHashMap<K, V>.ToKeysAndValues<S>(S state, System.Func<ImTools.ImHashMapEntry<K, V>, S, bool> condition, ref ImTools.KeysAndValues<K, V> keysAndValues, ImTools.ImHashMap<K, V>[] parentsStack = null) -> int
*REMOVED* ~ImTools.ImHashMap<K, V>.Update(int hash, K key, V value, ImTools.Update<K, V> update = null) -> ImTools.ImHashMap<K, V>
*REMOVED* ~ImTools.ImHashMap<K, V>.Update(K key, V value) -> ImTools.ImHashMap<K, V>
*REMOVED* ~ImTools.ImHashMap<K, V>.Update(K key, V value, ImTools.Update<V> update) -> ImTools.ImHashMap<K, V>
*REMOVED* ~ImTools.ImHashMap<K, V>.UpdateToDefault(int hash, K key) -> ImTools.ImHashMap<K, V>
*REMOVED* ~ImTools.ImHashMap<K, V>.Visit(System.Action<ImTools.ImHashMapEntry<K, V>> effect, ImTools.ImHashMap<K, V>[] parentsStack = null) -> void
*REMOVED* ~ImTools.ImHashMap<K, V>.Visit<S>(S state, System.Action<ImTools.ImHashMapEntry<K, V>, S> effect, ImTools.ImHashMap<K, V>[] parentsStack = null) -> S
*REMOVED* ~ImTools.ImHashMapConflicts<K, V>.ImHashMapConflicts(int hash, params ImTools.ImHashMapEntry<K, V>[] conflicts) -> void
*REMOVED* ~ImTools.ImList<T>.Enumerate() -> System.Collections.Generic.IEnumerable<T>
*REMOVED* ~ImTools.ImList<T>.Push(T head) -> ImTools.ImList<T>
*REMOVED* ~ImTools.ImMap.KValue<K>.KValue(K key, object value) -> void
*REMOVED* ~ImTools.ImMap.KValue<K>.Value -> object
*REMOVED* ~ImTools.ImMapBranch<V>.ImMapBranch(ImTools.ImMapEntry<V> entry, ImTools.ImMapEntry<V> rightEntry) -> void
*REMOVED* ~ImTools.ImMapBranch<V>.RightEntry -> ImTools.ImMapEntry<V>
*REMOVED* ~ImTools.ImMapTree<V>.AddOrKeepLeftOrRight(int key) -> ImTools.ImMapTree<V>
*REMOVED* ~ImTools.ImMapTree<V>.AddOrKeepLeftOrRight(int key, V value) -> ImTools.ImMapTree<V>
*REMOVED* ~ImTools.ImMapTree<V>.AddOrKeepLeftOrRightEntry(int key, ImTools.ImMapEntry<V> entry) -> ImTools.ImMapTree<V>
*REMOVED* ~ImTools.ImMapTree<V>.AddOrUpdateLeftOrRightEntry(int key, ImTools.ImMapEntry<V> entry) -> ImTools.ImMapTree<V>
*REMOVED* ~ImTools.ImMapTree<V>.AddUnsafeLeftOrRightEntry(int key, ImTools.ImMapEntry<V> entry) -> ImTools.ImMapTree<V>
*REMOVED* ~ImTools.ImMapTree<V>.Left -> ImTools.ImMap<V>
*REMOVED* ~ImTools.ImMapTree<V>.Right -> ImTools.ImMap<V>
*REMOVED* ~ImTools.ImZipper<T>.Append(T focus) -> ImTools.ImZipper<T>
*REMOVED* ~ImTools.ImZipper<T>.Insert(T focus) -> ImTools.ImZipper<T>
*REMOVED* ~ImTools.ImZipper<T>.Map<R>(System.Func<T, int, R> map) -> ImTools.ImZipper<R>
*REMOVED* ~ImTools.ImZipper<T>.Map<R>(System.Func<T, R> map) -> ImTools.ImZipper<R>
*REMOVED* ~ImTools.ImZipper<T>.PopLeft() -> ImTools.ImZipper<T>
*REMOVED* ~ImTools.ImZipper<T>.PopRight() -> ImTools.ImZipper<T>
*REMOVED* ~ImTools.ImZipper<T>.PushLeft(T focus) -> ImTools.ImZipper<T>
*REMOVED* ~ImTools.ImZipper<T>.PushRight(T focus) -> ImTools.ImZipper<T>
*REMOVED* ~ImTools.ImZipper<T>.ShiftLeft() -> ImTools.ImZipper<T>
*REMOVED* ~ImTools.ImZipper<T>.ShiftRight() -> ImTools.ImZipper<T>
*REMOVED* ~ImTools.ImZipper<T>.WithFocus(T focus) -> ImTools.ImZipper<T>
*REMOVED* ~ImTools.IPrintable.Print(System.Text.StringBuilder s, System.Func<System.Text.StringBuilder, object, System.Text.StringBuilder> printer) -> System.Text.StringBuilder
*REMOVED* ~ImTools.Item<TItem, T>
*REMOVED* ~ImTools.Item<TItem, T>.item.Equals(ImTools.Item<TItem, T>.item other) -> bool
*REMOVED* ~ImTools.Item<TItem>
*REMOVED* ~ImTools.Item<TItem>.item.Equals(ImTools.Item<TItem>.item other) -> bool
*REMOVED* ~ImTools.KeysAndValues<K, V>.Keys -> K[]
*REMOVED* ~ImTools.KeysAndValues<K, V>.KeysAndValues(K[] keys, V[] values, int count) -> void
*REMOVED* ~ImTools.KeysAndValues<K, V>.Values -> V[]
*REMOVED* ~ImTools.KV<K, V>.Print(System.Text.StringBuilder s, System.Func<System.Text.StringBuilder, object, System.Text.StringBuilder> printer) -> System.Text.StringBuilder
*REMOVED* ~ImTools.Ref<T>
*REMOVED* ~ImTools.Ref<T>.Ref(T initialValue = null) -> void
*REMOVED* ~ImTools.Ref<T>.SetNonAtomic(T newValue) -> T
*REMOVED* ~ImTools.Ref<T>.Swap(System.Func<T, T> getNewValue) -> T
*REMOVED* ~ImTools.Ref<T>.Swap(T newValue) -> T
*REMOVED* ~ImTools.Ref<T>.Swap<A, B>(A a, B b, System.Func<T, A, B, T> getNewValue) -> T
*REMOVED* ~ImTools.Ref<T>.Swap<A>(A a, System.Func<T, A, T> getNewValue) -> T
*REMOVED* ~ImTools.Ref<T>.TrySwapIfStillCurrent(T currentValue, T newValue) -> bool
*REMOVED* ~ImTools.Ref<T>.UnsafeSet(T newValue) -> void
*REMOVED* ~ImTools.Ref<T>.Value.get -> T
*REMOVED* ~ImTools.StackPool<T>
*REMOVED* ~ImTools.StackPool<T>.RentOrDefault() -> T
*REMOVED* ~ImTools.StackPool<T>.Return(T x) -> void
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case1.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6, System.Func<T7, R> map7, System.Func<T8, R> map8, System.Func<T9, R> map9, System.Func<T10, R> map10) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case10.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6, System.Func<T7, R> map7, System.Func<T8, R> map8, System.Func<T9, R> map9, System.Func<T10, R> map10) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case2.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6, System.Func<T7, R> map7, System.Func<T8, R> map8, System.Func<T9, R> map9, System.Func<T10, R> map10) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case3.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6, System.Func<T7, R> map7, System.Func<T8, R> map8, System.Func<T9, R> map9, System.Func<T10, R> map10) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case4.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6, System.Func<T7, R> map7, System.Func<T8, R> map8, System.Func<T9, R> map9, System.Func<T10, R> map10) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case5.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6, System.Func<T7, R> map7, System.Func<T8, R> map8, System.Func<T9, R> map9, System.Func<T10, R> map10) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case6.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6, System.Func<T7, R> map7, System.Func<T8, R> map8, System.Func<T9, R> map9, System.Func<T10, R> map10) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case7.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6, System.Func<T7, R> map7, System.Func<T8, R> map8, System.Func<T9, R> map9, System.Func<T10, R> map10) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case8.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6, System.Func<T7, R> map7, System.Func<T8, R> map8, System.Func<T9, R> map9, System.Func<T10, R> map10) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case9.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6, System.Func<T7, R> map7, System.Func<T8, R> map8, System.Func<T9, R> map9, System.Func<T10, R> map10) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.union.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6, System.Func<T7, R> map7, System.Func<T8, R> map8, System.Func<T9, R> map9, System.Func<T10, R> map10) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case1.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6, System.Func<T7, R> map7, System.Func<T8, R> map8, System.Func<T9, R> map9) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case2.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6, System.Func<T7, R> map7, System.Func<T8, R> map8, System.Func<T9, R> map9) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case3.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6, System.Func<T7, R> map7, System.Func<T8, R> map8, System.Func<T9, R> map9) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case4.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6, System.Func<T7, R> map7, System.Func<T8, R> map8, System.Func<T9, R> map9) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case5.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6, System.Func<T7, R> map7, System.Func<T8, R> map8, System.Func<T9, R> map9) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case6.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6, System.Func<T7, R> map7, System.Func<T8, R> map8, System.Func<T9, R> map9) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case7.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6, System.Func<T7, R> map7, System.Func<T8, R> map8, System.Func<T9, R> map9) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case8.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6, System.Func<T7, R> map7, System.Func<T8, R> map8, System.Func<T9, R> map9) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case9.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6, System.Func<T7, R> map7, System.Func<T8, R> map8, System.Func<T9, R> map9) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.union.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6, System.Func<T7, R> map7, System.Func<T8, R> map8, System.Func<T9, R> map9) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case1.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6, System.Func<T7, R> map7, System.Func<T8, R> map8) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case2.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6, System.Func<T7, R> map7, System.Func<T8, R> map8) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case3.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6, System.Func<T7, R> map7, System.Func<T8, R> map8) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case4.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6, System.Func<T7, R> map7, System.Func<T8, R> map8) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case5.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6, System.Func<T7, R> map7, System.Func<T8, R> map8) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case6.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6, System.Func<T7, R> map7, System.Func<T8, R> map8) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case7.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6, System.Func<T7, R> map7, System.Func<T8, R> map8) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case8.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6, System.Func<T7, R> map7, System.Func<T8, R> map8) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.union.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6, System.Func<T7, R> map7, System.Func<T8, R> map8) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case1.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6, System.Func<T7, R> map7) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case2.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6, System.Func<T7, R> map7) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case3.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6, System.Func<T7, R> map7) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case4.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6, System.Func<T7, R> map7) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case5.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6, System.Func<T7, R> map7) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case6.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6, System.Func<T7, R> map7) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case7.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6, System.Func<T7, R> map7) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.union.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6, System.Func<T7, R> map7) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case1.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case2.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case3.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case4.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case5.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case6.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.union.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5, System.Func<T6, R> map6) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case1.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case2.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case3.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case4.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case5.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4, T5>.union.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4, System.Func<T5, R> map5) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4>.case1.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4>.case2.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4>.case3.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4>.case4.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3, T4>.union.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3, System.Func<T4, R> map4) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3>.case1.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3>.case2.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3>.case3.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2, T3>.union.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2, System.Func<T3, R> map3) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2>.case1.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2>.case2.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2) -> R
*REMOVED* ~ImTools.Union<TUnion, T1, T2>.union.Match<R>(System.Func<T1, R> map1, System.Func<T2, R> map2) -> R
*REMOVED* ~override DryIoc.DelegateFactory.CreateExpressionOrDefault(DryIoc.Request request) -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~override DryIoc.DelegateFactory.ImplementationType.get -> System.Type
*REMOVED* ~override DryIoc.ExpressionFactory.CreateExpressionOrDefault(DryIoc.Request request) -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~override DryIoc.FactoryPlaceholder.CreateExpressionOrDefault(DryIoc.Request request) -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~override DryIoc.ReflectionFactory.CreateExpressionOrDefault(DryIoc.Request request) -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~override DryIoc.ReflectionFactory.FactoryGenerator.get -> DryIoc.IConcreteFactoryGenerator
*REMOVED* ~override DryIoc.RegisteredInstanceFactory.CreateExpressionOrDefault(DryIoc.Request request) -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~override DryIoc.RegisteredInstanceFactory.GetDelegateOrDefault(DryIoc.Request request) -> DryIoc.FactoryDelegate
*REMOVED* ~override DryIoc.RegisteredInstanceFactory.GetExpressionOrDefault(DryIoc.Request request) -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~override DryIoc.RegisteredInstanceFactory.ImplementationType.get -> System.Type
*REMOVED* ~override FastExpressionCompiler.LightExpression.BinaryExpression.ToCodeString(System.Text.StringBuilder sb, int lineIdent = 0, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null, int identSpaces = 2) -> System.Text.StringBuilder
*REMOVED* ~override FastExpressionCompiler.LightExpression.BinaryExpression.Type.get -> System.Type
*REMOVED* ~override FastExpressionCompiler.LightExpression.BlockExpression.ToCodeString(System.Text.StringBuilder sb, int lineIdent = 0, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null, int identSpaces = 2) -> System.Text.StringBuilder
*REMOVED* ~override FastExpressionCompiler.LightExpression.BlockExpression.Type.get -> System.Type
*REMOVED* ~override FastExpressionCompiler.LightExpression.CoalesceConversionBinaryExpression.ToCodeString(System.Text.StringBuilder sb, int lineIdent = 0, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null, int identSpaces = 2) -> System.Text.StringBuilder
*REMOVED* ~override FastExpressionCompiler.LightExpression.ConditionalExpression.ToCodeString(System.Text.StringBuilder sb, int lineIdent = 0, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null, int identSpaces = 2) -> System.Text.StringBuilder
*REMOVED* ~override FastExpressionCompiler.LightExpression.ConditionalExpression.Type.get -> System.Type
*REMOVED* ~override FastExpressionCompiler.LightExpression.ConstantExpression.ToCodeString(System.Text.StringBuilder sb, int lineIdent = 0, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null, int identSpaces = 2) -> System.Text.StringBuilder
*REMOVED* ~override FastExpressionCompiler.LightExpression.ConstantExpression.ToString() -> string
*REMOVED* ~override FastExpressionCompiler.LightExpression.ConstantExpression.Type.get -> System.Type
*REMOVED* ~override FastExpressionCompiler.LightExpression.ConvertWithMethodUnaryExpression.Method.get -> System.Reflection.MethodInfo
*REMOVED* ~override FastExpressionCompiler.LightExpression.ConvertWithMethodUnaryExpression.Type.get -> System.Type
*REMOVED* ~override FastExpressionCompiler.LightExpression.DefaultExpression.ToCodeString(System.Text.StringBuilder sb, int lineIdent = 0, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null, int identSpaces = 2) -> System.Text.StringBuilder
*REMOVED* ~override FastExpressionCompiler.LightExpression.DefaultExpression.Type.get -> System.Type
*REMOVED* ~override FastExpressionCompiler.LightExpression.Expression.ToString() -> string
*REMOVED* ~override FastExpressionCompiler.LightExpression.FieldExpression.ToCodeString(System.Text.StringBuilder sb, int lineIdent = 0, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null, int identSpaces = 2) -> System.Text.StringBuilder
*REMOVED* ~override FastExpressionCompiler.LightExpression.FieldExpression.Type.get -> System.Type
*REMOVED* ~override FastExpressionCompiler.LightExpression.FiveArgumentsMethodCallExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<FastExpressionCompiler.LightExpression.Expression>
*REMOVED* ~override FastExpressionCompiler.LightExpression.FiveArgumentsNewExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<FastExpressionCompiler.LightExpression.Expression>
*REMOVED* ~override FastExpressionCompiler.LightExpression.FourArgumentsMethodCallExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<FastExpressionCompiler.LightExpression.Expression>
*REMOVED* ~override FastExpressionCompiler.LightExpression.FourArgumentsNewExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<FastExpressionCompiler.LightExpression.Expression>
*REMOVED* ~override FastExpressionCompiler.LightExpression.GotoExpression.ToCodeString(System.Text.StringBuilder sb, int lineIdent = 0, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null, int identSpaces = 2) -> System.Text.StringBuilder
*REMOVED* ~override FastExpressionCompiler.LightExpression.GotoExpression.Type.get -> System.Type
*REMOVED* ~override FastExpressionCompiler.LightExpression.IndexExpression.ToCodeString(System.Text.StringBuilder sb, int lineIdent = 0, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null, int identSpaces = 2) -> System.Text.StringBuilder
*REMOVED* ~override FastExpressionCompiler.LightExpression.IndexExpression.Type.get -> System.Type
*REMOVED* ~override FastExpressionCompiler.LightExpression.InstanceFiveArgumentsMethodCallExpression.Object.get -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~override FastExpressionCompiler.LightExpression.InstanceFourArgumentsMethodCallExpression.Object.get -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~override FastExpressionCompiler.LightExpression.InstanceManyArgumentsMethodCallExpression.Object.get -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~override FastExpressionCompiler.LightExpression.InstanceMethodCallExpression.Object.get -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~override FastExpressionCompiler.LightExpression.InstanceOneArgumentMethodCallExpression.Object.get -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~override FastExpressionCompiler.LightExpression.InstanceThreeArgumentsMethodCallExpression.Object.get -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~override FastExpressionCompiler.LightExpression.InstanceTwoArgumentsMethodCallExpression.Object.get -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~override FastExpressionCompiler.LightExpression.InvocationExpression.ToCodeString(System.Text.StringBuilder sb, int lineIdent = 0, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null, int identSpaces = 2) -> System.Text.StringBuilder
*REMOVED* ~override FastExpressionCompiler.LightExpression.InvocationExpression.Type.get -> System.Type
*REMOVED* ~override FastExpressionCompiler.LightExpression.LabelExpression.ToCodeString(System.Text.StringBuilder sb, int lineIdent = 0, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null, int identSpaces = 2) -> System.Text.StringBuilder
*REMOVED* ~override FastExpressionCompiler.LightExpression.LabelExpression.Type.get -> System.Type
*REMOVED* ~override FastExpressionCompiler.LightExpression.LambdaExpression.ToCodeString(System.Text.StringBuilder sb, int lineIdent = 0, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null, int identSpaces = 2) -> System.Text.StringBuilder
*REMOVED* ~override FastExpressionCompiler.LightExpression.LambdaExpression.Type.get -> System.Type
*REMOVED* ~override FastExpressionCompiler.LightExpression.LoopExpression.ToCodeString(System.Text.StringBuilder sb, int lineIdent = 0, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null, int identSpaces = 2) -> System.Text.StringBuilder
*REMOVED* ~override FastExpressionCompiler.LightExpression.LoopExpression.Type.get -> System.Type
*REMOVED* ~override FastExpressionCompiler.LightExpression.ManyArgumentsMethodCallExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<FastExpressionCompiler.LightExpression.Expression>
*REMOVED* ~override FastExpressionCompiler.LightExpression.ManyArgumentsNewExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<FastExpressionCompiler.LightExpression.Expression>
*REMOVED* ~override FastExpressionCompiler.LightExpression.ManyParametersExpression<TDelegate>.Parameters.get -> System.Collections.Generic.IReadOnlyList<FastExpressionCompiler.LightExpression.ParameterExpression>
*REMOVED* ~override FastExpressionCompiler.LightExpression.ManyParametersLambdaExpression.Parameters.get -> System.Collections.Generic.IReadOnlyList<FastExpressionCompiler.LightExpression.ParameterExpression>
*REMOVED* ~override FastExpressionCompiler.LightExpression.MemberAssignment.ToCodeString(System.Text.StringBuilder sb, int lineIdent, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null, int identSpaces = 2) -> System.Text.StringBuilder
*REMOVED* ~override FastExpressionCompiler.LightExpression.MemberInitExpression.ToCodeString(System.Text.StringBuilder sb, int lineIdent = 0, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null, int identSpaces = 2) -> System.Text.StringBuilder
*REMOVED* ~override FastExpressionCompiler.LightExpression.MemberInitExpression.Type.get -> System.Type
*REMOVED* ~override FastExpressionCompiler.LightExpression.MethodCallExpression.ToCodeString(System.Text.StringBuilder sb, int lineIdent = 0, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null, int identSpaces = 2) -> System.Text.StringBuilder
*REMOVED* ~override FastExpressionCompiler.LightExpression.MethodCallExpression.Type.get -> System.Type
*REMOVED* ~override FastExpressionCompiler.LightExpression.NewArrayExpression.ToCodeString(System.Text.StringBuilder sb, int lineIdent = 0, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null, int identSpaces = 2) -> System.Text.StringBuilder
*REMOVED* ~override FastExpressionCompiler.LightExpression.NewArrayExpression.Type.get -> System.Type
*REMOVED* ~override FastExpressionCompiler.LightExpression.NewExpression.ToCodeString(System.Text.StringBuilder sb, int lineIdent = 0, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null, int identSpaces = 2) -> System.Text.StringBuilder
*REMOVED* ~override FastExpressionCompiler.LightExpression.NewExpression.Type.get -> System.Type
*REMOVED* ~override FastExpressionCompiler.LightExpression.NewValueTypeExpression.ToCodeString(System.Text.StringBuilder sb, int lineIdent = 0, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null, int identSpaces = 2) -> System.Text.StringBuilder
*REMOVED* ~override FastExpressionCompiler.LightExpression.NewValueTypeExpression.Type.get -> System.Type
*REMOVED* ~override FastExpressionCompiler.LightExpression.OneArgumentMethodCallExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<FastExpressionCompiler.LightExpression.Expression>
*REMOVED* ~override FastExpressionCompiler.LightExpression.OneArgumentNewExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<FastExpressionCompiler.LightExpression.Expression>
*REMOVED* ~override FastExpressionCompiler.LightExpression.OneVariableTwoExpressionBlockExpression.ToCodeString(System.Text.StringBuilder sb, int lineIdent = 0, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null, int identSpaces = 2) -> System.Text.StringBuilder
*REMOVED* ~override FastExpressionCompiler.LightExpression.OneVariableTwoExpressionBlockExpression.Type.get -> System.Type
*REMOVED* ~override FastExpressionCompiler.LightExpression.ParameterExpression.ToCodeString(System.Text.StringBuilder sb, int lineIdent = 0, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null, int identSpaces = 2) -> System.Text.StringBuilder
*REMOVED* ~override FastExpressionCompiler.LightExpression.ParameterExpression.Type.get -> System.Type
*REMOVED* ~override FastExpressionCompiler.LightExpression.PropertyExpression.ToCodeString(System.Text.StringBuilder sb, int lineIdent = 0, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null, int identSpaces = 2) -> System.Text.StringBuilder
*REMOVED* ~override FastExpressionCompiler.LightExpression.PropertyExpression.Type.get -> System.Type
*REMOVED* ~override FastExpressionCompiler.LightExpression.SwitchExpression.ToCodeString(System.Text.StringBuilder sb, int lineIdent = 0, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null, int identSpaces = 2) -> System.Text.StringBuilder
*REMOVED* ~override FastExpressionCompiler.LightExpression.SwitchExpression.Type.get -> System.Type
*REMOVED* ~override FastExpressionCompiler.LightExpression.ThreeArgumentsMethodCallExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<FastExpressionCompiler.LightExpression.Expression>
*REMOVED* ~override FastExpressionCompiler.LightExpression.ThreeArgumentsNewExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<FastExpressionCompiler.LightExpression.Expression>
*REMOVED* ~override FastExpressionCompiler.LightExpression.TryExpression.ToCodeString(System.Text.StringBuilder sb, int lineIdent = 0, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null, int identSpaces = 2) -> System.Text.StringBuilder
*REMOVED* ~override FastExpressionCompiler.LightExpression.TryExpression.Type.get -> System.Type
*REMOVED* ~override FastExpressionCompiler.LightExpression.TwoArgumentsMethodCallExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<FastExpressionCompiler.LightExpression.Expression>
*REMOVED* ~override FastExpressionCompiler.LightExpression.TwoArgumentsNewExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<FastExpressionCompiler.LightExpression.Expression>
*REMOVED* ~override FastExpressionCompiler.LightExpression.TypeBinaryExpression.ToCodeString(System.Text.StringBuilder sb, int lineIdent = 0, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null, int identSpaces = 2) -> System.Text.StringBuilder
*REMOVED* ~override FastExpressionCompiler.LightExpression.TypeBinaryExpression.Type.get -> System.Type
*REMOVED* ~override FastExpressionCompiler.LightExpression.TypedConstantExpression.Type.get -> System.Type
*REMOVED* ~override FastExpressionCompiler.LightExpression.TypedConstantExpression<T>.Type.get -> System.Type
*REMOVED* ~override FastExpressionCompiler.LightExpression.TypedUnaryExpression.Type.get -> System.Type
*REMOVED* ~override FastExpressionCompiler.LightExpression.TypedUnaryExpression<T>.Type.get -> System.Type
*REMOVED* ~override FastExpressionCompiler.LightExpression.UnaryExpression.ToCodeString(System.Text.StringBuilder sb, int lineIdent = 0, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null, int identSpaces = 2) -> System.Text.StringBuilder
*REMOVED* ~override FastExpressionCompiler.LightExpression.UnaryExpression.Type.get -> System.Type
*REMOVED* ~override ImTools.Box<TBox, T>.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Box<TBox, T>.ToString() -> string
*REMOVED* ~override ImTools.GrowingList<T>.ToString() -> string
*REMOVED* ~override ImTools.ImHashMap<K, V>.ToString() -> string
*REMOVED* ~override ImTools.ImHashMapEntry<K, V>.ToString() -> string
*REMOVED* ~override ImTools.ImList<T>.ToString() -> string
*REMOVED* ~override ImTools.ImMap<V>.ToString() -> string
*REMOVED* ~override ImTools.ImMapBranch<V>.ToString() -> string
*REMOVED* ~override ImTools.ImMapEntry<V>.ToString() -> string
*REMOVED* ~override ImTools.ImMapTree<V>.ToString() -> string
*REMOVED* ~override ImTools.ImZipper<T>.ToString() -> string
*REMOVED* ~override ImTools.Item<TItem, T>.item.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Item<TItem, T>.item.ToString() -> string
*REMOVED* ~override ImTools.Item<TItem>.item.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Item<TItem>.item.ToString() -> string
*REMOVED* ~override ImTools.KV<K, V>.Equals(object obj) -> bool
*REMOVED* ~override ImTools.KV<K, V>.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case1.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case1.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case10.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case10.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case2.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case2.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case3.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case3.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case4.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case4.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case5.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case5.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case6.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case6.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case7.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case7.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case8.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case8.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case9.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.case9.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case1.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case1.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case2.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case2.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case3.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case3.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case4.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case4.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case5.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case5.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case6.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case6.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case7.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case7.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case8.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case8.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case9.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.case9.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case1.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case1.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case2.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case2.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case3.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case3.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case4.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case4.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case5.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case5.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case6.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case6.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case7.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case7.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case8.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.case8.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case1.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case1.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case2.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case2.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case3.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case3.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case4.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case4.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case5.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case5.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case6.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case6.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case7.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.case7.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case1.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case1.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case2.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case2.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case3.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case3.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case4.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case4.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case5.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case5.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case6.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.case6.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case1.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case1.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case2.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case2.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case3.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case3.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case4.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case4.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case5.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4, T5>.case5.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4>.case1.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4>.case1.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4>.case2.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4>.case2.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4>.case3.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4>.case3.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4>.case4.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3, T4>.case4.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3>.case1.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3>.case1.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3>.case2.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3>.case2.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3>.case3.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2, T3>.case3.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2>.case1.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2>.case1.ToString() -> string
*REMOVED* ~override ImTools.Union<TUnion, T1, T2>.case2.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Union<TUnion, T1, T2>.case2.ToString() -> string
*REMOVED* ~override ImTools.Unit.Equals(object obj) -> bool
*REMOVED* ~override ImTools.Unit.ToString() -> string
*REMOVED* ~readonly DryIoc.FactoryMethod.FactoryExpression -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly DryIoc.FactoryMethod.FactoryServiceInfo -> DryIoc.ServiceInfo
*REMOVED* ~readonly DryIoc.Interpreter.ParentLambdaArgs.ParamExprs -> object
*REMOVED* ~readonly DryIoc.ParameterServiceInfo.DereferencedParameterType -> System.Type
*REMOVED* ~readonly DryIoc.RegisteredInstanceFactory.Instance -> object
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.ArgumentsExpression.Arguments -> System.Collections.Generic.IReadOnlyList<FastExpressionCompiler.LightExpression.Expression>
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.BinaryExpression.Left -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.BinaryExpression.Right -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.BlockExpression.Expressions -> System.Collections.Generic.IReadOnlyList<FastExpressionCompiler.LightExpression.Expression>
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.BlockExpression.Variables -> System.Collections.Generic.IReadOnlyList<FastExpressionCompiler.LightExpression.ParameterExpression>
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.CatchBlock.Body -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.CatchBlock.Filter -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.CatchBlock.Test -> System.Type
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.CatchBlock.Variable -> FastExpressionCompiler.LightExpression.ParameterExpression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.CoalesceConversionBinaryExpression.Conversion -> FastExpressionCompiler.LightExpression.LambdaExpression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.ConditionalExpression.IfFalse -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.ConditionalExpression.IfTrue -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.ConditionalExpression.Test -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.ConstantExpression.Value -> object
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.ExpressionCompiler.ArrayClosure.ConstantsAndNestedLambdas -> object[]
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.ExpressionCompiler.ArrayClosureWithNonPassedParams.NonPassedParams -> object[]
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.ExpressionCompiler.NestedLambdaWithConstantsAndNestedLambdas.ConstantsAndNestedLambdas -> object
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.ExpressionCompiler.NestedLambdaWithConstantsAndNestedLambdas.NestedLambda -> object
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.FiveArgumentsMethodCallExpression.Argument0 -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.FiveArgumentsMethodCallExpression.Argument1 -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.FiveArgumentsMethodCallExpression.Argument2 -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.FiveArgumentsMethodCallExpression.Argument3 -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.FiveArgumentsMethodCallExpression.Argument4 -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.FiveArgumentsNewExpression.Argument0 -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.FiveArgumentsNewExpression.Argument1 -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.FiveArgumentsNewExpression.Argument2 -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.FiveArgumentsNewExpression.Argument3 -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.FiveArgumentsNewExpression.Argument4 -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.FourArgumentsMethodCallExpression.Argument0 -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.FourArgumentsMethodCallExpression.Argument1 -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.FourArgumentsMethodCallExpression.Argument2 -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.FourArgumentsMethodCallExpression.Argument3 -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.FourArgumentsNewExpression.Argument0 -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.FourArgumentsNewExpression.Argument1 -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.FourArgumentsNewExpression.Argument2 -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.FourArgumentsNewExpression.Argument3 -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.GotoExpression.Target -> System.Linq.Expressions.LabelTarget
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.GotoExpression.Value -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.IndexExpression.Indexer -> System.Reflection.PropertyInfo
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.IndexExpression.Object -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.InvocationExpression.Expression -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.LabelExpression.DefaultValue -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.LabelExpression.Target -> System.Linq.Expressions.LabelTarget
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.LambdaExpression.Body -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.LambdaExpression.ReturnType -> System.Type
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.LoopExpression.Body -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.LoopExpression.BreakLabel -> System.Linq.Expressions.LabelTarget
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.LoopExpression.ContinueLabel -> System.Linq.Expressions.LabelTarget
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.MemberAssignment.Expression -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.MemberBinding.Member -> System.Reflection.MemberInfo
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.MemberExpression.Expression -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.MemberExpression.Member -> System.Reflection.MemberInfo
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.MemberInitExpression.Bindings -> System.Collections.Generic.IReadOnlyList<FastExpressionCompiler.LightExpression.MemberBinding>
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.MemberInitExpression.Expression -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.MethodCallExpression.Method -> System.Reflection.MethodInfo
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.NewExpression.Constructor -> System.Reflection.ConstructorInfo
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.OneArgumentMethodCallExpression.Argument -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.OneArgumentNewExpression.Argument -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.OneVariableTwoExpressionBlockExpression.Expression1 -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.OneVariableTwoExpressionBlockExpression.Expression2 -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.OneVariableTwoExpressionBlockExpression.Variable -> FastExpressionCompiler.LightExpression.ParameterExpression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.ParameterExpression.Name -> string
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.SwitchCase.Body -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.SwitchCase.TestValues -> System.Collections.Generic.IReadOnlyList<FastExpressionCompiler.LightExpression.Expression>
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.SwitchExpression.Comparison -> System.Reflection.MethodInfo
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.SwitchExpression.DefaultBody -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.SwitchExpression.SwitchValue -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.ThreeArgumentsMethodCallExpression.Argument0 -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.ThreeArgumentsMethodCallExpression.Argument1 -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.ThreeArgumentsMethodCallExpression.Argument2 -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.ThreeArgumentsNewExpression.Argument0 -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.ThreeArgumentsNewExpression.Argument1 -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.ThreeArgumentsNewExpression.Argument2 -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.TryExpression.Body -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.TryExpression.Finally -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.TwoArgumentsMethodCallExpression.Argument0 -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.TwoArgumentsMethodCallExpression.Argument1 -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.TwoArgumentsNewExpression.Argument0 -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.TwoArgumentsNewExpression.Argument1 -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.TypeBinaryExpression.Expression -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly FastExpressionCompiler.LightExpression.UnaryExpression.Operand -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~readonly ImTools.ImHashMap<K, V>.Entry -> ImTools.ImHashMapEntry<K, V>
*REMOVED* ~readonly ImTools.ImHashMapConflicts<K, V>.Conflicts -> ImTools.ImHashMapEntry<K, V>[]
*REMOVED* ~readonly ImTools.ImList<T>.Tail -> ImTools.ImList<T>
*REMOVED* ~readonly ImTools.ImMapBranch<V>.Entry -> ImTools.ImMapEntry<V>
*REMOVED* ~readonly ImTools.ImMapTree<V>.Entry -> ImTools.ImMapEntry<V>
*REMOVED* ~readonly ImTools.ImZipper<T>.Left -> ImTools.ImList<T>
*REMOVED* ~readonly ImTools.ImZipper<T>.Right -> ImTools.ImList<T>
*REMOVED* ~static DryIoc.ContainerTools.GetRequestExpression(this DryIoc.IContainer container, DryIoc.Request request, DryIoc.RequestFlags requestParentFlags = (DryIoc.RequestFlags)0) -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~static DryIoc.ContainerTools.RegisterMapping(this DryIoc.IContainer container, System.Type serviceType, System.Type registeredServiceType, object serviceKey = null, object registeredServiceKey = null) -> void
*REMOVED* ~static DryIoc.ContainerTools.RegisterMapping<TService, TRegisteredService>(this DryIoc.IContainer container, object serviceKey = null, object registeredServiceKey = null) -> void
*REMOVED* ~static DryIoc.ContainerTools.RegisterPlaceholder(this DryIoc.IContainer container, System.Type serviceType, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
*REMOVED* ~static DryIoc.ContainerTools.RegisterPlaceholder<TService>(this DryIoc.IContainer container, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
*REMOVED* ~static DryIoc.CurrentScopeReuse.GetNameScopedViaFactoryDelegate(DryIoc.IResolverContext r, object scopeName, bool throwIfNoScope, int id, DryIoc.FactoryDelegate createValue, int disposalIndex) -> object
*REMOVED* ~static DryIoc.CurrentScopeReuse.GetScopedOrSingletonViaFactoryDelegate(DryIoc.IResolverContext r, int id, DryIoc.FactoryDelegate createValue, int disposalIndex) -> object
*REMOVED* ~static DryIoc.CurrentScopeReuse.GetScopedViaFactoryDelegate(DryIoc.IResolverContext r, bool throwIfNoScope, int id, DryIoc.FactoryDelegate createValue, int disposalIndex) -> object
*REMOVED* ~static DryIoc.CurrentScopeReuse.GetScopedViaFactoryDelegateNoDisposalIndex(DryIoc.IResolverContext r, bool throwIfNoScope, int id, DryIoc.FactoryDelegate createValue) -> object
*REMOVED* ~static DryIoc.FactoryDelegateCompiler.CompileToFactoryDelegate(this FastExpressionCompiler.LightExpression.Expression expression, bool useFastExpressionCompiler = false) -> DryIoc.FactoryDelegate
*REMOVED* ~static DryIoc.FactoryDelegateCompiler.CompileToFactoryDelegate(this FastExpressionCompiler.LightExpression.Expression expression, bool useFastExpressionCompiler, bool preferInterpretation) -> DryIoc.FactoryDelegate
*REMOVED* ~static DryIoc.FactoryDelegateCompiler.CompileToFactoryDelegate(this FastExpressionCompiler.LightExpression.Expression expression, System.Type factoryDelegateType, System.Type resultType, bool useFastExpressionCompiler, bool preferInterpretation) -> object
*REMOVED* ~static DryIoc.FactoryDelegateCompiler.NormalizeExpression(this FastExpressionCompiler.LightExpression.Expression expr) -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~static DryIoc.FactoryDelegateCompiler.ToExpression(this FastExpressionCompiler.LightExpression.Expression expr) -> System.Linq.Expressions.Expression
*REMOVED* ~static DryIoc.FactoryDelegateCompiler.WrapInFactoryExpression(this FastExpressionCompiler.LightExpression.Expression expression) -> FastExpressionCompiler.LightExpression.Expression<DryIoc.FactoryDelegate>
*REMOVED* ~static DryIoc.Interpreter.TryInterpret(DryIoc.IResolverContext r, FastExpressionCompiler.LightExpression.Expression expr, object paramExprs, object paramValues, DryIoc.Interpreter.ParentLambdaArgs parentArgs, bool useFec, out object result) -> bool
*REMOVED* ~static DryIoc.Interpreter.TryInterpretAndUnwrapContainerException(DryIoc.IResolverContext r, FastExpressionCompiler.LightExpression.Expression expr, bool useFec, out object result) -> bool
*REMOVED* ~static DryIoc.Made.Of(DryIoc.FactoryMethodSelector factoryMethod = null, DryIoc.ParameterSelector parameters = null, DryIoc.PropertiesAndFieldsSelector propertiesAndFields = null, bool isConditionalImlementation = false) -> DryIoc.Made
*REMOVED* ~static DryIoc.ReflectionTools.GetBaseType(this System.Type type) -> System.Type
*REMOVED* ~static DryIoc.ReflectionTools.GetDefaultValueExpression(this System.Type type) -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~static DryIoc.ReflectionTools.GetGenericParamConstraints(this System.Type type) -> System.Type[]
*REMOVED* ~static DryIoc.ReflectionTools.GetGenericParamsAndArgs(this System.Type type) -> System.Type[]
*REMOVED* ~static DryIoc.ReflectionTools.GetImplementedInterfaces(this System.Type type) -> System.Type[]
*REMOVED* ~static DryIoc.ReflectionTools.IsAbstract(this System.Type type) -> bool
*REMOVED* ~static DryIoc.ReflectionTools.IsClass(this System.Type type) -> bool
*REMOVED* ~static DryIoc.ReflectionTools.IsEnum(this System.Type type) -> bool
*REMOVED* ~static DryIoc.ReflectionTools.IsGeneric(this System.Type type) -> bool
*REMOVED* ~static DryIoc.ReflectionTools.IsGenericDefinition(this System.Type type) -> bool
*REMOVED* ~static DryIoc.ReflectionTools.IsInterface(this System.Type type) -> bool
*REMOVED* ~static DryIoc.ReflectionTools.IsValueType(this System.Type type) -> bool
*REMOVED* ~static DryIoc.ReflectionTools.PublicConstructors(this System.Type type) -> System.Collections.Generic.IEnumerable<System.Reflection.ConstructorInfo>
*REMOVED* ~static DryIoc.Registrator.RegisterDelegate(this DryIoc.IRegistrator registrator, bool isChecked, System.Type serviceType, System.Func<DryIoc.IResolverContext, object> factoryDelegate, DryIoc.IReuse reuse = null, DryIoc.Setup setup = null, DryIoc.IfAlreadyRegistered? ifAlreadyRegistered = null, object serviceKey = null) -> void
*REMOVED* ~static DryIoc.Registrator.ToFactory(this System.Type implType) -> DryIoc.Factory
*REMOVED* ~static DryIoc.Registrator.ToFactory(this System.Type implType, DryIoc.IReuse reuse = null, DryIoc.Made made = null, DryIoc.Setup setup = null) -> DryIoc.Factory
*REMOVED* ~static DryIoc.Registrator.UseInstance(this DryIoc.IContainer c, System.Type serviceType, object instance, bool preventDisposal = false, bool weaklyReferenced = false, object serviceKey = null) -> void
*REMOVED* ~static DryIoc.Registrator.UseInstance(this DryIoc.IContainer c, System.Type serviceType, object instance, DryIoc.IfAlreadyRegistered ifAlreadyRegistered, bool preventDisposal = false, bool weaklyReferenced = false, object serviceKey = null) -> void
*REMOVED* ~static DryIoc.Registrator.UseInstance(this DryIoc.IRegistrator r, System.Type serviceType, object instance, bool preventDisposal = false, bool weaklyReferenced = false, object serviceKey = null) -> void
*REMOVED* ~static DryIoc.Registrator.UseInstance(this DryIoc.IRegistrator r, System.Type serviceType, object instance, DryIoc.IfAlreadyRegistered ifAlreadyRegistered, bool preventDisposal = false, bool weaklyReferenced = false, object serviceKey = null) -> void
*REMOVED* ~static DryIoc.Registrator.UseInstance(this DryIoc.IResolverContext r, System.Type serviceType, object instance, bool preventDisposal = false, bool weaklyReferenced = false, object serviceKey = null) -> void
*REMOVED* ~static DryIoc.Registrator.UseInstance(this DryIoc.IResolverContext r, System.Type serviceType, object instance, DryIoc.IfAlreadyRegistered ifAlreadyRegistered, bool preventDisposal = false, bool weaklyReferenced = false, object serviceKey = null) -> void
*REMOVED* ~static DryIoc.Registrator.UseInstance<TService>(this DryIoc.IContainer c, TService instance, bool preventDisposal = false, bool weaklyReferenced = false, object serviceKey = null) -> void
*REMOVED* ~static DryIoc.Registrator.UseInstance<TService>(this DryIoc.IRegistrator r, TService instance, bool preventDisposal = false, bool weaklyReferenced = false, object serviceKey = null) -> void
*REMOVED* ~static DryIoc.Registrator.UseInstance<TService>(this DryIoc.IResolverContext r, TService instance, bool preventDisposal = false, bool weaklyReferenced = false, object serviceKey = null) -> void
*REMOVED* ~static DryIoc.Registrator.UseInstance<TService>(this DryIoc.IResolverContext r, TService instance, DryIoc.IfAlreadyRegistered ifAlreadyRegistered, bool preventDisposal = false, bool weaklyReferenced = false, object serviceKey = null) -> void
*REMOVED* ~static DryIoc.Request.Create(DryIoc.IContainer container, DryIoc.IServiceInfo serviceInfo, DryIoc.Request preResolveParent = null, DryIoc.RequestFlags flags = (DryIoc.RequestFlags)0, object[] inputArgs = null) -> DryIoc.Request
*REMOVED* ~static DryIoc.Request.Create(DryIoc.IContainer container, System.Type serviceType, object serviceKey = null, DryIoc.IfUnresolved ifUnresolved = DryIoc.IfUnresolved.Throw, System.Type requiredServiceType = null, DryIoc.Request preResolveParent = null, DryIoc.RequestFlags flags = (DryIoc.RequestFlags)0, object[] inputArgs = null) -> DryIoc.Request
*REMOVED* ~static DryIoc.ResolverContext.GetRootOrSelfExpr(DryIoc.Request request) -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~static DryIoc.ResolverContext.OpenScope(this DryIoc.IResolverContext r, object name = null, bool trackInParent = false) -> DryIoc.IResolverContext
*REMOVED* ~static DryIoc.ResolverContext.TrackDisposable<T>(this DryIoc.IResolverContext r, T instance) -> T
*REMOVED* ~static DryIoc.ServiceInfo.Of(System.Type serviceType, DryIoc.IfUnresolved ifUnresolved = DryIoc.IfUnresolved.Throw, object serviceKey = null) -> DryIoc.ServiceInfo
*REMOVED* ~static DryIoc.ServiceInfo.OfServiceType(System.Type serviceType) -> DryIoc.ServiceInfo
*REMOVED* ~static DryIoc.ServiceInfoTools.GetActualServiceType(this DryIoc.IServiceInfo info) -> System.Type
*REMOVED* ~static DryIoc.ServiceInfoTools.InheritInfoFromDependencyOwner(this DryIoc.IServiceInfo dependency, DryIoc.IServiceInfo owner, DryIoc.IContainer container, DryIoc.FactoryType ownerType = DryIoc.FactoryType.Service) -> DryIoc.IServiceInfo
*REMOVED* ~static DryIoc.ServiceInfoTools.InheritInfoFromDependencyOwner(this System.Type serviceType, DryIoc.IServiceInfo owner, DryIoc.IContainer container, DryIoc.FactoryType ownerFactoryType = DryIoc.FactoryType.Service) -> DryIoc.IServiceInfo
*REMOVED* ~static DryIoc.ServiceInfoTools.Print(this System.Text.StringBuilder s, DryIoc.IServiceInfo info) -> System.Text.StringBuilder
*REMOVED* ~static DryIoc.ServiceInfoTools.With(this DryIoc.IServiceInfo source, System.Type serviceType) -> DryIoc.IServiceInfo
*REMOVED* ~static DryIoc.ServiceInfoTools.WithIfUnresolved(this DryIoc.IServiceInfo source, DryIoc.IfUnresolved ifUnresolved) -> DryIoc.IServiceInfo
*REMOVED* ~static DryIoc.Setup.DecoratorWith(System.Func<DryIoc.Request, bool> condition = null, int order = 0, bool useDecorateeReuse = false, bool openResolutionScope = false, bool asResolutionCall = false, bool preventDisposal = false, bool weaklyReferenced = false, bool allowDisposableTransient = false, bool trackDisposableTransient = false, int disposalOrder = 0) -> DryIoc.Setup
*REMOVED* ~static DryIoc.Setup.With(object metadataOrFuncOfMetadata = null, System.Func<DryIoc.Request, bool> condition = null, bool openResolutionScope = false, bool asResolutionCall = false, bool asResolutionRoot = false, bool preventDisposal = false, bool weaklyReferenced = false, bool allowDisposableTransient = false, bool trackDisposableTransient = false, bool useParentReuse = false, int disposalOrder = 0, bool preferInSingleServiceResolve = false) -> DryIoc.Setup
*REMOVED* ~static DryIoc.Setup.WrapperWith(int wrappedServiceTypeArgIndex = -1, bool alwaysWrapsRequiredServiceType = false, System.Func<System.Type, System.Type> unwrap = null, bool openResolutionScope = false, bool asResolutionCall = false, bool preventDisposal = false, bool weaklyReferenced = false, bool allowDisposableTransient = false, bool trackDisposableTransient = false, bool useParentReuse = false, System.Func<DryIoc.Request, bool> condition = null, int disposalOrder = 0) -> DryIoc.Setup
*REMOVED* ~static DryIoc.WrappersSupport.GetLazyExpressionOrDefault(DryIoc.Request request, bool nullWrapperForUnresolvedService = false) -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~static DryIoc.WrappersSupport.GetMetaExpressionOrDefault(DryIoc.Request request) -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~static FastExpressionCompiler.LightExpression.CodePrinter.AppendTypeof(this System.Text.StringBuilder sb, System.Type type, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null) -> System.Text.StringBuilder
*REMOVED* ~static FastExpressionCompiler.LightExpression.CodePrinter.ToArrayInitializerCode(this System.Collections.IEnumerable items, System.Type itemType, FastExpressionCompiler.LightExpression.CodePrinter.IObjectToCode notRecognizedToCode, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null) -> string
*REMOVED* ~static FastExpressionCompiler.LightExpression.CodePrinter.ToCode(this bool x) -> string
*REMOVED* ~static FastExpressionCompiler.LightExpression.CodePrinter.ToCode(this object x, FastExpressionCompiler.LightExpression.CodePrinter.IObjectToCode notRecognizedToCode, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null) -> string
*REMOVED* ~static FastExpressionCompiler.LightExpression.CodePrinter.ToCode(this string x) -> string
*REMOVED* ~static FastExpressionCompiler.LightExpression.CodePrinter.ToCode(this System.Type type, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null) -> string
*REMOVED* ~static FastExpressionCompiler.LightExpression.CodePrinter.ToCommaSeparatedCode(this System.Collections.IEnumerable items, FastExpressionCompiler.LightExpression.CodePrinter.IObjectToCode notRecognizedToCode, bool stripNamespace = false, System.Func<System.Type, string, string> printType = null) -> string
*REMOVED* ~static FastExpressionCompiler.LightExpression.CodePrinter.ToEnumValueCode(this System.Type enumType, object x) -> string
*REMOVED* ~static FastExpressionCompiler.LightExpression.ConstantExpression.ValueToCode -> FastExpressionCompiler.LightExpression.CodePrinter.IObjectToCode
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Add(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.AddAssign(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.AddAssignChecked(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.AddChecked(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.And(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.AndAlso(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.AndAssign(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.ArrayAccess(FastExpressionCompiler.LightExpression.Expression array, params FastExpressionCompiler.LightExpression.Expression[] indexes) -> FastExpressionCompiler.LightExpression.IndexExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.ArrayAccess(FastExpressionCompiler.LightExpression.Expression array, System.Collections.Generic.IEnumerable<FastExpressionCompiler.LightExpression.Expression> indexes) -> FastExpressionCompiler.LightExpression.IndexExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.ArrayIndex(FastExpressionCompiler.LightExpression.Expression array, FastExpressionCompiler.LightExpression.Expression index) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.ArrayLength(FastExpressionCompiler.LightExpression.Expression array) -> FastExpressionCompiler.LightExpression.UnaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Assign(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Bind(System.Reflection.MemberInfo member, FastExpressionCompiler.LightExpression.Expression expression) -> FastExpressionCompiler.LightExpression.MemberAssignment
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Block(FastExpressionCompiler.LightExpression.ParameterExpression variable, FastExpressionCompiler.LightExpression.Expression expression1, FastExpressionCompiler.LightExpression.Expression expression2) -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Block(params FastExpressionCompiler.LightExpression.Expression[] expressions) -> FastExpressionCompiler.LightExpression.BlockExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Block(System.Collections.Generic.IEnumerable<FastExpressionCompiler.LightExpression.ParameterExpression> variables, params FastExpressionCompiler.LightExpression.Expression[] expressions) -> FastExpressionCompiler.LightExpression.BlockExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Block(System.Collections.Generic.IReadOnlyList<FastExpressionCompiler.LightExpression.Expression> expressions) -> FastExpressionCompiler.LightExpression.BlockExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Block(System.Collections.Generic.IReadOnlyList<FastExpressionCompiler.LightExpression.ParameterExpression> variables, System.Collections.Generic.IReadOnlyList<FastExpressionCompiler.LightExpression.Expression> expressions) -> FastExpressionCompiler.LightExpression.BlockExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Block(System.Type type, System.Collections.Generic.IEnumerable<FastExpressionCompiler.LightExpression.ParameterExpression> variables, params FastExpressionCompiler.LightExpression.Expression[] expressions) -> FastExpressionCompiler.LightExpression.BlockExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Block(System.Type type, System.Collections.Generic.IEnumerable<FastExpressionCompiler.LightExpression.ParameterExpression> variables, System.Collections.Generic.IEnumerable<FastExpressionCompiler.LightExpression.Expression> expressions) -> FastExpressionCompiler.LightExpression.BlockExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Break(System.Linq.Expressions.LabelTarget target, FastExpressionCompiler.LightExpression.Expression value = null, System.Type type = null) -> FastExpressionCompiler.LightExpression.GotoExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Call(FastExpressionCompiler.LightExpression.Expression instance, string methodName, System.Type[] typeArguments, params FastExpressionCompiler.LightExpression.Expression[] arguments) -> FastExpressionCompiler.LightExpression.MethodCallExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Call(FastExpressionCompiler.LightExpression.Expression instance, string methodName, System.Type[] typeArguments, System.Collections.Generic.IEnumerable<FastExpressionCompiler.LightExpression.Expression> arguments) -> FastExpressionCompiler.LightExpression.MethodCallExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Call(FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.MethodInfo method) -> FastExpressionCompiler.LightExpression.MethodCallExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Call(FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.MethodInfo method, FastExpressionCompiler.LightExpression.Expression arg0, FastExpressionCompiler.LightExpression.Expression arg1) -> FastExpressionCompiler.LightExpression.MethodCallExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Call(FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.MethodInfo method, FastExpressionCompiler.LightExpression.Expression arg0, FastExpressionCompiler.LightExpression.Expression arg1, FastExpressionCompiler.LightExpression.Expression arg2) -> FastExpressionCompiler.LightExpression.MethodCallExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Call(FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.MethodInfo method, FastExpressionCompiler.LightExpression.Expression arg0, FastExpressionCompiler.LightExpression.Expression arg1, FastExpressionCompiler.LightExpression.Expression arg2, FastExpressionCompiler.LightExpression.Expression arg3) -> FastExpressionCompiler.LightExpression.MethodCallExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Call(FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.MethodInfo method, FastExpressionCompiler.LightExpression.Expression arg0, FastExpressionCompiler.LightExpression.Expression arg1, FastExpressionCompiler.LightExpression.Expression arg2, FastExpressionCompiler.LightExpression.Expression arg3, FastExpressionCompiler.LightExpression.Expression arg4) -> FastExpressionCompiler.LightExpression.MethodCallExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Call(FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.MethodInfo method, FastExpressionCompiler.LightExpression.Expression argument) -> FastExpressionCompiler.LightExpression.MethodCallExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Call(FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.MethodInfo method, params FastExpressionCompiler.LightExpression.Expression[] arguments) -> FastExpressionCompiler.LightExpression.MethodCallExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Call(FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable<FastExpressionCompiler.LightExpression.Expression> arguments) -> FastExpressionCompiler.LightExpression.MethodCallExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Call(System.Reflection.MethodInfo method) -> FastExpressionCompiler.LightExpression.MethodCallExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Call(System.Reflection.MethodInfo method, FastExpressionCompiler.LightExpression.Expression arg0, FastExpressionCompiler.LightExpression.Expression arg1) -> FastExpressionCompiler.LightExpression.MethodCallExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Call(System.Reflection.MethodInfo method, FastExpressionCompiler.LightExpression.Expression arg0, FastExpressionCompiler.LightExpression.Expression arg1, FastExpressionCompiler.LightExpression.Expression arg2) -> FastExpressionCompiler.LightExpression.MethodCallExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Call(System.Reflection.MethodInfo method, FastExpressionCompiler.LightExpression.Expression arg0, FastExpressionCompiler.LightExpression.Expression arg1, FastExpressionCompiler.LightExpression.Expression arg2, FastExpressionCompiler.LightExpression.Expression arg3) -> FastExpressionCompiler.LightExpression.MethodCallExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Call(System.Reflection.MethodInfo method, FastExpressionCompiler.LightExpression.Expression arg0, FastExpressionCompiler.LightExpression.Expression arg1, FastExpressionCompiler.LightExpression.Expression arg2, FastExpressionCompiler.LightExpression.Expression arg3, FastExpressionCompiler.LightExpression.Expression arg4) -> FastExpressionCompiler.LightExpression.MethodCallExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Call(System.Reflection.MethodInfo method, FastExpressionCompiler.LightExpression.Expression argument) -> FastExpressionCompiler.LightExpression.MethodCallExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Call(System.Reflection.MethodInfo method, params FastExpressionCompiler.LightExpression.Expression[] arguments) -> FastExpressionCompiler.LightExpression.MethodCallExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Call(System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable<FastExpressionCompiler.LightExpression.Expression> arguments) -> FastExpressionCompiler.LightExpression.MethodCallExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Call(System.Type type, string methodName, System.Type[] typeArguments, params FastExpressionCompiler.LightExpression.Expression[] arguments) -> FastExpressionCompiler.LightExpression.MethodCallExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Call(System.Type type, string methodName, System.Type[] typeArguments, System.Collections.Generic.IEnumerable<FastExpressionCompiler.LightExpression.Expression> arguments) -> FastExpressionCompiler.LightExpression.MethodCallExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.CallIfNotNull(FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.MethodInfo method) -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.CallIfNotNull(FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable<FastExpressionCompiler.LightExpression.Expression> arguments) -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Catch(FastExpressionCompiler.LightExpression.ParameterExpression variable, FastExpressionCompiler.LightExpression.Expression body) -> FastExpressionCompiler.LightExpression.CatchBlock
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Catch(System.Type test, FastExpressionCompiler.LightExpression.Expression body) -> FastExpressionCompiler.LightExpression.CatchBlock
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Coalesce(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Coalesce(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right, FastExpressionCompiler.LightExpression.LambdaExpression conversion) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Coalesce(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right, System.Type type) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Condition(FastExpressionCompiler.LightExpression.Expression test, FastExpressionCompiler.LightExpression.Expression ifTrue, FastExpressionCompiler.LightExpression.Expression ifFalse) -> FastExpressionCompiler.LightExpression.ConditionalExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Condition(FastExpressionCompiler.LightExpression.Expression test, FastExpressionCompiler.LightExpression.Expression ifTrue, FastExpressionCompiler.LightExpression.Expression ifFalse, System.Type type) -> FastExpressionCompiler.LightExpression.ConditionalExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Constant(bool value) -> FastExpressionCompiler.LightExpression.ConstantExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Constant(int value) -> FastExpressionCompiler.LightExpression.ConstantExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Constant(object value) -> FastExpressionCompiler.LightExpression.ConstantExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Constant(object value, System.Type type) -> FastExpressionCompiler.LightExpression.ConstantExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Constant<T>(T value) -> FastExpressionCompiler.LightExpression.ConstantExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Continue(System.Linq.Expressions.LabelTarget target, System.Type type = null) -> FastExpressionCompiler.LightExpression.GotoExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Convert(FastExpressionCompiler.LightExpression.Expression expression, System.Type type) -> FastExpressionCompiler.LightExpression.UnaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Convert(FastExpressionCompiler.LightExpression.Expression expression, System.Type type, System.Reflection.MethodInfo method) -> FastExpressionCompiler.LightExpression.UnaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Convert<TTo>(FastExpressionCompiler.LightExpression.Expression expression) -> FastExpressionCompiler.LightExpression.UnaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.ConvertChecked(FastExpressionCompiler.LightExpression.Expression expression, System.Type type) -> FastExpressionCompiler.LightExpression.UnaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.ConvertChecked(FastExpressionCompiler.LightExpression.Expression expression, System.Type type, System.Reflection.MethodInfo method) -> FastExpressionCompiler.LightExpression.UnaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Decrement(FastExpressionCompiler.LightExpression.Expression expression) -> FastExpressionCompiler.LightExpression.UnaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Default(System.Type type) -> FastExpressionCompiler.LightExpression.DefaultExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Divide(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.DivideAssign(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Empty() -> FastExpressionCompiler.LightExpression.DefaultExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Equal(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.ExclusiveOr(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.ExclusiveOrAssign(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Field(FastExpressionCompiler.LightExpression.Expression instance, string fieldName) -> FastExpressionCompiler.LightExpression.MemberExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Field(FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.FieldInfo field) -> FastExpressionCompiler.LightExpression.MemberExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Field(System.Reflection.FieldInfo field) -> FastExpressionCompiler.LightExpression.MemberExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Goto(System.Linq.Expressions.LabelTarget target, FastExpressionCompiler.LightExpression.Expression value = null, System.Type type = null) -> FastExpressionCompiler.LightExpression.GotoExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.GreaterThan(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.GreaterThanOrEqual(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.IfThen(FastExpressionCompiler.LightExpression.Expression test, FastExpressionCompiler.LightExpression.Expression ifTrue) -> FastExpressionCompiler.LightExpression.ConditionalExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.IfThenElse(FastExpressionCompiler.LightExpression.Expression test, FastExpressionCompiler.LightExpression.Expression ifTrue, FastExpressionCompiler.LightExpression.Expression ifFalse) -> FastExpressionCompiler.LightExpression.ConditionalExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Increment(FastExpressionCompiler.LightExpression.Expression expression) -> FastExpressionCompiler.LightExpression.UnaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Invoke(FastExpressionCompiler.LightExpression.Expression expression, FastExpressionCompiler.LightExpression.Expression arg0) -> FastExpressionCompiler.LightExpression.InvocationExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Invoke(FastExpressionCompiler.LightExpression.Expression expression, System.Collections.Generic.IEnumerable<FastExpressionCompiler.LightExpression.Expression> args) -> FastExpressionCompiler.LightExpression.InvocationExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Invoke(FastExpressionCompiler.LightExpression.Expression lambda, params FastExpressionCompiler.LightExpression.Expression[] args) -> FastExpressionCompiler.LightExpression.InvocationExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Invoke(FastExpressionCompiler.LightExpression.LambdaExpression expression, FastExpressionCompiler.LightExpression.Expression arg0) -> FastExpressionCompiler.LightExpression.InvocationExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.IsFalse(FastExpressionCompiler.LightExpression.Expression expression) -> FastExpressionCompiler.LightExpression.UnaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.IsTrue(FastExpressionCompiler.LightExpression.Expression expression) -> FastExpressionCompiler.LightExpression.UnaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Label(string name) -> System.Linq.Expressions.LabelTarget
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Label(System.Linq.Expressions.LabelTarget target, FastExpressionCompiler.LightExpression.Expression defaultValue = null) -> FastExpressionCompiler.LightExpression.LabelExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Label(System.Type type = null, string name = null) -> System.Linq.Expressions.LabelTarget
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Lambda(FastExpressionCompiler.LightExpression.Expression body) -> FastExpressionCompiler.LightExpression.LambdaExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Lambda(FastExpressionCompiler.LightExpression.Expression body, params FastExpressionCompiler.LightExpression.ParameterExpression[] parameters) -> FastExpressionCompiler.LightExpression.LambdaExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Lambda(System.Type delegateType, FastExpressionCompiler.LightExpression.Expression body) -> FastExpressionCompiler.LightExpression.LambdaExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Lambda(System.Type delegateType, FastExpressionCompiler.LightExpression.Expression body, FastExpressionCompiler.LightExpression.ParameterExpression[] parameters, System.Type returnType) -> FastExpressionCompiler.LightExpression.LambdaExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Lambda(System.Type delegateType, FastExpressionCompiler.LightExpression.Expression body, params FastExpressionCompiler.LightExpression.ParameterExpression[] parameters) -> FastExpressionCompiler.LightExpression.LambdaExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Lambda(System.Type delegateType, FastExpressionCompiler.LightExpression.Expression body, System.Type returnType) -> FastExpressionCompiler.LightExpression.LambdaExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(FastExpressionCompiler.LightExpression.Expression body) -> FastExpressionCompiler.LightExpression.Expression<TDelegate>
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(FastExpressionCompiler.LightExpression.Expression body, FastExpressionCompiler.LightExpression.ParameterExpression[] parameters, System.Type returnType) -> FastExpressionCompiler.LightExpression.Expression<TDelegate>
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(FastExpressionCompiler.LightExpression.Expression body, params FastExpressionCompiler.LightExpression.ParameterExpression[] parameters) -> FastExpressionCompiler.LightExpression.Expression<TDelegate>
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(FastExpressionCompiler.LightExpression.Expression body, string name, params FastExpressionCompiler.LightExpression.ParameterExpression[] parameters) -> FastExpressionCompiler.LightExpression.Expression<TDelegate>
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Lambda<TDelegate>(FastExpressionCompiler.LightExpression.Expression body, System.Type returnType) -> FastExpressionCompiler.LightExpression.Expression<TDelegate>
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.LeftShift(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.LeftShiftAssign(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.LessThan(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.LessThanOrEqual(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Loop(FastExpressionCompiler.LightExpression.Expression body, System.Linq.Expressions.LabelTarget break = null) -> FastExpressionCompiler.LightExpression.LoopExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Loop(FastExpressionCompiler.LightExpression.Expression body, System.Linq.Expressions.LabelTarget break, System.Linq.Expressions.LabelTarget continue) -> FastExpressionCompiler.LightExpression.LoopExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.MakeBinary(System.Linq.Expressions.ExpressionType binaryType, FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind kind, System.Linq.Expressions.LabelTarget target, FastExpressionCompiler.LightExpression.Expression value, System.Type type = null) -> FastExpressionCompiler.LightExpression.GotoExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.MakeIndex(FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.PropertyInfo indexer, System.Collections.Generic.IEnumerable<FastExpressionCompiler.LightExpression.Expression> arguments) -> FastExpressionCompiler.LightExpression.IndexExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.MakeMemberAccess(FastExpressionCompiler.LightExpression.Expression expression, System.Reflection.MemberInfo member) -> FastExpressionCompiler.LightExpression.MemberExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.MakeUnary(System.Linq.Expressions.ExpressionType unaryType, FastExpressionCompiler.LightExpression.Expression operand, System.Type type) -> FastExpressionCompiler.LightExpression.UnaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.MemberInit(FastExpressionCompiler.LightExpression.Expression instanceExpr, params FastExpressionCompiler.LightExpression.MemberBinding[] assignments) -> FastExpressionCompiler.LightExpression.MemberInitExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.MemberInit(FastExpressionCompiler.LightExpression.NewExpression newExpr, params FastExpressionCompiler.LightExpression.MemberBinding[] bindings) -> FastExpressionCompiler.LightExpression.MemberInitExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Modulo(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.ModuloAssign(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Multiply(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.MultiplyAssign(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.MultiplyAssignChecked(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.MultiplyChecked(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Negate(FastExpressionCompiler.LightExpression.Expression expression) -> FastExpressionCompiler.LightExpression.UnaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.NegateChecked(FastExpressionCompiler.LightExpression.Expression expression) -> FastExpressionCompiler.LightExpression.UnaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.New(System.Reflection.ConstructorInfo ctor) -> FastExpressionCompiler.LightExpression.NewExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.New(System.Reflection.ConstructorInfo ctor, FastExpressionCompiler.LightExpression.Expression arg) -> FastExpressionCompiler.LightExpression.NewExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.New(System.Reflection.ConstructorInfo ctor, FastExpressionCompiler.LightExpression.Expression arg0, FastExpressionCompiler.LightExpression.Expression arg1) -> FastExpressionCompiler.LightExpression.NewExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.New(System.Reflection.ConstructorInfo ctor, FastExpressionCompiler.LightExpression.Expression arg0, FastExpressionCompiler.LightExpression.Expression arg1, FastExpressionCompiler.LightExpression.Expression arg2) -> FastExpressionCompiler.LightExpression.NewExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.New(System.Reflection.ConstructorInfo ctor, FastExpressionCompiler.LightExpression.Expression arg0, FastExpressionCompiler.LightExpression.Expression arg1, FastExpressionCompiler.LightExpression.Expression arg2, FastExpressionCompiler.LightExpression.Expression arg3) -> FastExpressionCompiler.LightExpression.NewExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.New(System.Reflection.ConstructorInfo ctor, FastExpressionCompiler.LightExpression.Expression arg0, FastExpressionCompiler.LightExpression.Expression arg1, FastExpressionCompiler.LightExpression.Expression arg2, FastExpressionCompiler.LightExpression.Expression arg3, FastExpressionCompiler.LightExpression.Expression arg4) -> FastExpressionCompiler.LightExpression.NewExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.New(System.Reflection.ConstructorInfo ctor, params FastExpressionCompiler.LightExpression.Expression[] arguments) -> FastExpressionCompiler.LightExpression.NewExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.New(System.Reflection.ConstructorInfo ctor, System.Collections.Generic.IEnumerable<FastExpressionCompiler.LightExpression.Expression> arguments) -> FastExpressionCompiler.LightExpression.NewExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.New(System.Type type) -> FastExpressionCompiler.LightExpression.NewExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.NewArrayBounds(System.Type type, params FastExpressionCompiler.LightExpression.Expression[] bounds) -> FastExpressionCompiler.LightExpression.NewArrayExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.NewArrayInit(System.Type type, params FastExpressionCompiler.LightExpression.Expression[] initializers) -> FastExpressionCompiler.LightExpression.NewArrayExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Not(FastExpressionCompiler.LightExpression.Expression expression) -> FastExpressionCompiler.LightExpression.UnaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.NotEqual(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.OnesComplement(FastExpressionCompiler.LightExpression.Expression expression) -> FastExpressionCompiler.LightExpression.UnaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Or(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.OrAssign(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.OrElse(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Parameter(System.Type type, string name = null) -> FastExpressionCompiler.LightExpression.ParameterExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.PostDecrementAssign(FastExpressionCompiler.LightExpression.Expression expression) -> FastExpressionCompiler.LightExpression.UnaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.PostIncrementAssign(FastExpressionCompiler.LightExpression.Expression expression) -> FastExpressionCompiler.LightExpression.UnaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Power(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.PowerAssign(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.PreDecrementAssign(FastExpressionCompiler.LightExpression.Expression expression) -> FastExpressionCompiler.LightExpression.UnaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.PreIncrementAssign(FastExpressionCompiler.LightExpression.Expression expression) -> FastExpressionCompiler.LightExpression.UnaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Property(FastExpressionCompiler.LightExpression.Expression expression, string propertyName) -> FastExpressionCompiler.LightExpression.MemberExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Property(FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.PropertyInfo indexer, params FastExpressionCompiler.LightExpression.Expression[] arguments) -> FastExpressionCompiler.LightExpression.IndexExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Property(FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.PropertyInfo indexer, System.Collections.Generic.IEnumerable<FastExpressionCompiler.LightExpression.Expression> arguments) -> FastExpressionCompiler.LightExpression.IndexExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Property(FastExpressionCompiler.LightExpression.Expression instance, System.Reflection.PropertyInfo property) -> FastExpressionCompiler.LightExpression.MemberExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Property(System.Reflection.PropertyInfo property) -> FastExpressionCompiler.LightExpression.MemberExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.PropertyOrField(FastExpressionCompiler.LightExpression.Expression expression, string propertyName) -> FastExpressionCompiler.LightExpression.MemberExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Quote(FastExpressionCompiler.LightExpression.Expression expression) -> FastExpressionCompiler.LightExpression.UnaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.ReferenceEqual(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.ReferenceNotEqual(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Return(System.Linq.Expressions.LabelTarget target, FastExpressionCompiler.LightExpression.Expression value = null, System.Type type = null) -> FastExpressionCompiler.LightExpression.GotoExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.RightShift(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.RightShiftAssign(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Subtract(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.SubtractAssign(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.SubtractAssignChecked(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.SubtractChecked(FastExpressionCompiler.LightExpression.Expression left, FastExpressionCompiler.LightExpression.Expression right) -> FastExpressionCompiler.LightExpression.BinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Switch(FastExpressionCompiler.LightExpression.Expression switchValue, FastExpressionCompiler.LightExpression.Expression defaultBody, params FastExpressionCompiler.LightExpression.SwitchCase[] cases) -> FastExpressionCompiler.LightExpression.SwitchExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Switch(FastExpressionCompiler.LightExpression.Expression switchValue, FastExpressionCompiler.LightExpression.Expression defaultBody, System.Reflection.MethodInfo comparison, params FastExpressionCompiler.LightExpression.SwitchCase[] cases) -> FastExpressionCompiler.LightExpression.SwitchExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Switch(FastExpressionCompiler.LightExpression.Expression switchValue, params FastExpressionCompiler.LightExpression.SwitchCase[] cases) -> FastExpressionCompiler.LightExpression.SwitchExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Switch(System.Type type, FastExpressionCompiler.LightExpression.Expression switchValue, FastExpressionCompiler.LightExpression.Expression defaultBody, System.Reflection.MethodInfo comparison, params FastExpressionCompiler.LightExpression.SwitchCase[] cases) -> FastExpressionCompiler.LightExpression.SwitchExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Switch(System.Type type, FastExpressionCompiler.LightExpression.Expression switchValue, FastExpressionCompiler.LightExpression.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Collections.Generic.IEnumerable<FastExpressionCompiler.LightExpression.SwitchCase> cases) -> FastExpressionCompiler.LightExpression.SwitchExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.SwitchCase(FastExpressionCompiler.LightExpression.Expression body, params FastExpressionCompiler.LightExpression.Expression[] testValues) -> FastExpressionCompiler.LightExpression.SwitchCase
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.SwitchCase(FastExpressionCompiler.LightExpression.Expression body, System.Collections.Generic.IEnumerable<FastExpressionCompiler.LightExpression.Expression> testValues) -> FastExpressionCompiler.LightExpression.SwitchCase
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Throw(FastExpressionCompiler.LightExpression.Expression value) -> FastExpressionCompiler.LightExpression.UnaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Throw(FastExpressionCompiler.LightExpression.Expression value, System.Type type) -> FastExpressionCompiler.LightExpression.UnaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.TryCatch(FastExpressionCompiler.LightExpression.Expression body, params FastExpressionCompiler.LightExpression.CatchBlock[] handlers) -> FastExpressionCompiler.LightExpression.TryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.TryCatchFinally(FastExpressionCompiler.LightExpression.Expression body, FastExpressionCompiler.LightExpression.Expression finally, params FastExpressionCompiler.LightExpression.CatchBlock[] handlers) -> FastExpressionCompiler.LightExpression.TryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.TryFinally(FastExpressionCompiler.LightExpression.Expression body, FastExpressionCompiler.LightExpression.Expression finally) -> FastExpressionCompiler.LightExpression.TryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.TypeAs(FastExpressionCompiler.LightExpression.Expression expression, System.Type type) -> FastExpressionCompiler.LightExpression.UnaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.TypeEqual(FastExpressionCompiler.LightExpression.Expression operand, System.Type type) -> FastExpressionCompiler.LightExpression.TypeBinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.TypeIs(FastExpressionCompiler.LightExpression.Expression operand, System.Type type) -> FastExpressionCompiler.LightExpression.TypeBinaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.UnaryPlus(FastExpressionCompiler.LightExpression.Expression expression) -> FastExpressionCompiler.LightExpression.UnaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Unbox(FastExpressionCompiler.LightExpression.Expression expression, System.Type type) -> FastExpressionCompiler.LightExpression.UnaryExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.Expression.Variable(System.Type type, string name = null) -> FastExpressionCompiler.LightExpression.ParameterExpression
*REMOVED* ~static FastExpressionCompiler.LightExpression.ExpressionCompiler.ArrayClosureArrayField -> System.Reflection.FieldInfo
*REMOVED* ~static FastExpressionCompiler.LightExpression.ExpressionCompiler.ArrayClosureWithNonPassedParamsConstructor -> System.Reflection.ConstructorInfo
*REMOVED* ~static FastExpressionCompiler.LightExpression.ExpressionCompiler.ArrayClosureWithNonPassedParamsField -> System.Reflection.FieldInfo
*REMOVED* ~static FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast(this FastExpressionCompiler.LightExpression.Expression<System.Action> lambdaExpr, bool ifFastFailedReturnNull = false) -> System.Action
*REMOVED* ~static FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast(this FastExpressionCompiler.LightExpression.LambdaExpression lambdaExpr, bool ifFastFailedReturnNull = false) -> System.Delegate
*REMOVED* ~static FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<R>(this FastExpressionCompiler.LightExpression.Expression<System.Func<R>> lambdaExpr, bool ifFastFailedReturnNull = false) -> System.Func<R>
*REMOVED* ~static FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<T1, R>(this FastExpressionCompiler.LightExpression.Expression<System.Func<T1, R>> lambdaExpr, bool ifFastFailedReturnNull = false) -> System.Func<T1, R>
*REMOVED* ~static FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<T1, T2, R>(this FastExpressionCompiler.LightExpression.Expression<System.Func<T1, T2, R>> lambdaExpr, bool ifFastFailedReturnNull = false) -> System.Func<T1, T2, R>
*REMOVED* ~static FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<T1, T2, T3, R>(this FastExpressionCompiler.LightExpression.Expression<System.Func<T1, T2, T3, R>> lambdaExpr, bool ifFastFailedReturnNull = false) -> System.Func<T1, T2, T3, R>
*REMOVED* ~static FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<T1, T2, T3, T4, R>(this FastExpressionCompiler.LightExpression.Expression<System.Func<T1, T2, T3, T4, R>> lambdaExpr, bool ifFastFailedReturnNull = false) -> System.Func<T1, T2, T3, T4, R>
*REMOVED* ~static FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<T1, T2, T3, T4, T5, R>(this FastExpressionCompiler.LightExpression.Expression<System.Func<T1, T2, T3, T4, T5, R>> lambdaExpr, bool ifFastFailedReturnNull = false) -> System.Func<T1, T2, T3, T4, T5, R>
*REMOVED* ~static FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<T1, T2, T3, T4, T5, T6, R>(this FastExpressionCompiler.LightExpression.Expression<System.Func<T1, T2, T3, T4, T5, T6, R>> lambdaExpr, bool ifFastFailedReturnNull = false) -> System.Func<T1, T2, T3, T4, T5, T6, R>
*REMOVED* ~static FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<T1, T2, T3, T4, T5, T6>(this FastExpressionCompiler.LightExpression.Expression<System.Action<T1, T2, T3, T4, T5, T6>> lambdaExpr, bool ifFastFailedReturnNull = false) -> System.Action<T1, T2, T3, T4, T5, T6>
*REMOVED* ~static FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<T1, T2, T3, T4, T5>(this FastExpressionCompiler.LightExpression.Expression<System.Action<T1, T2, T3, T4, T5>> lambdaExpr, bool ifFastFailedReturnNull = false) -> System.Action<T1, T2, T3, T4, T5>
*REMOVED* ~static FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<T1, T2, T3, T4>(this FastExpressionCompiler.LightExpression.Expression<System.Action<T1, T2, T3, T4>> lambdaExpr, bool ifFastFailedReturnNull = false) -> System.Action<T1, T2, T3, T4>
*REMOVED* ~static FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<T1, T2, T3>(this FastExpressionCompiler.LightExpression.Expression<System.Action<T1, T2, T3>> lambdaExpr, bool ifFastFailedReturnNull = false) -> System.Action<T1, T2, T3>
*REMOVED* ~static FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<T1, T2>(this FastExpressionCompiler.LightExpression.Expression<System.Action<T1, T2>> lambdaExpr, bool ifFastFailedReturnNull = false) -> System.Action<T1, T2>
*REMOVED* ~static FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<T1>(this FastExpressionCompiler.LightExpression.Expression<System.Action<T1>> lambdaExpr, bool ifFastFailedReturnNull = false) -> System.Action<T1>
*REMOVED* ~static FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<TDelegate>(this FastExpressionCompiler.LightExpression.Expression<TDelegate> lambdaExpr, bool ifFastFailedReturnNull = false) -> TDelegate
*REMOVED* ~static FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFast<TDelegate>(this FastExpressionCompiler.LightExpression.LambdaExpression lambdaExpr, bool ifFastFailedReturnNull = false) -> TDelegate
*REMOVED* ~static FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileFastToIL(this FastExpressionCompiler.LightExpression.LambdaExpression lambdaExpr, System.Reflection.Emit.ILGenerator il, bool ifFastFailedReturnNull = false) -> bool
*REMOVED* ~static FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileSys(this FastExpressionCompiler.LightExpression.LambdaExpression lambdaExpr) -> System.Delegate
*REMOVED* ~static FastExpressionCompiler.LightExpression.ExpressionCompiler.CompileSys<TDelegate>(this FastExpressionCompiler.LightExpression.Expression<TDelegate> lambdaExpr) -> TDelegate
*REMOVED* ~static FastExpressionCompiler.LightExpression.ExpressionCompiler.IsClosureBoundConstant(object value, System.Reflection.TypeInfo type) -> bool
*REMOVED* ~static FastExpressionCompiler.LightExpression.ExpressionCompiler.NestedLambdaWithConstantsAndNestedLambdas.ConstantsAndNestedLambdasField -> System.Reflection.FieldInfo
*REMOVED* ~static FastExpressionCompiler.LightExpression.ExpressionCompiler.NestedLambdaWithConstantsAndNestedLambdas.NestedLambdaField -> System.Reflection.FieldInfo
*REMOVED* ~static FastExpressionCompiler.LightExpression.ExpressionCompiler.TryCompile(System.Type delegateType, FastExpressionCompiler.LightExpression.Expression bodyExpr, System.Collections.Generic.IReadOnlyList<FastExpressionCompiler.LightExpression.ParameterExpression> paramExprs, System.Type[] paramTypes, System.Type returnType) -> object
*REMOVED* ~static FastExpressionCompiler.LightExpression.ExpressionCompiler.TryCompile<TDelegate>(FastExpressionCompiler.LightExpression.Expression bodyExpr, System.Collections.Generic.IReadOnlyList<FastExpressionCompiler.LightExpression.ParameterExpression> paramExprs, System.Type[] paramTypes, System.Type returnType) -> TDelegate
*REMOVED* ~static FastExpressionCompiler.LightExpression.ExpressionCompiler.TryCompile<TDelegate>(this FastExpressionCompiler.LightExpression.LambdaExpression lambdaExpr) -> TDelegate
*REMOVED* ~static FastExpressionCompiler.LightExpression.ExpressionCompiler.TryCompileWithoutClosure<TDelegate>(this FastExpressionCompiler.LightExpression.LambdaExpression lambdaExpr) -> TDelegate
*REMOVED* ~static FastExpressionCompiler.LightExpression.ExpressionCompiler.TryCompileWithPreCreatedClosure<TDelegate>(this FastExpressionCompiler.LightExpression.LambdaExpression lambdaExpr, params FastExpressionCompiler.LightExpression.ConstantExpression[] closureConstantsExprs) -> TDelegate
*REMOVED* ~static FastExpressionCompiler.LightExpression.ILGeneratorHacks.GetNextLocalVarIndex(this System.Reflection.Emit.ILGenerator il, System.Type t) -> int
*REMOVED* ~static FastExpressionCompiler.LightExpression.OneVariableTwoExpressionBlockExpression.explicit operator FastExpressionCompiler.LightExpression.BlockExpression(FastExpressionCompiler.LightExpression.OneVariableTwoExpressionBlockExpression x) -> FastExpressionCompiler.LightExpression.BlockExpression
*REMOVED* ~static ImTools.ArrayTools.Append<T>(this System.Collections.Generic.IEnumerable<T> source, System.Collections.Generic.IEnumerable<T> other) -> T[]
*REMOVED* ~static ImTools.ArrayTools.Append<T>(this T[] source, params T[] added) -> T[]
*REMOVED* ~static ImTools.ArrayTools.Append<T>(this T[] source, T value) -> T[]
*REMOVED* ~static ImTools.ArrayTools.AppendOrUpdate<T>(this T[] source, T value, int index = -1) -> T[]
*REMOVED* ~static ImTools.ArrayTools.AppendTo<T>(T[] source, int sourcePos, int count, T[] results = null) -> T[]
*REMOVED* ~static ImTools.ArrayTools.Copy<T>(this T[] items) -> T[]
*REMOVED* ~static ImTools.ArrayTools.Empty<T>() -> T[]
*REMOVED* ~static ImTools.ArrayTools.EmptyIfNull<T>(this T[] source) -> T[]
*REMOVED* ~static ImTools.ArrayTools.FindFirst<T, S>(this T[] source, S state, System.Func<S, T, bool> predicate) -> T
*REMOVED* ~static ImTools.ArrayTools.FindFirst<T>(this System.Collections.Generic.IEnumerable<T> source, System.Func<T, bool> predicate) -> T
*REMOVED* ~static ImTools.ArrayTools.FindFirst<T>(this T[] source, System.Func<T, bool> predicate) -> T
*REMOVED* ~static ImTools.ArrayTools.ForEach<T>(this T[] source, System.Action<T> action) -> void
*REMOVED* ~static ImTools.ArrayTools.IndexOf<T, S>(this T[] source, S state, System.Func<S, T, bool> predicate) -> int
*REMOVED* ~static ImTools.ArrayTools.IndexOf<T>(this T[] source, System.Func<T, bool> predicate) -> int
*REMOVED* ~static ImTools.ArrayTools.IndexOf<T>(this T[] source, T value) -> int
*REMOVED* ~static ImTools.ArrayTools.IndexOfReference<T>(this T[] source, T reference) -> int
*REMOVED* ~static ImTools.ArrayTools.IsNullOrEmpty<T>(this T[] source) -> bool
*REMOVED* ~static ImTools.ArrayTools.Map<T, A, B, R>(this T[] source, A a, B b, System.Func<A, B, T, R> map) -> R[]
*REMOVED* ~static ImTools.ArrayTools.Map<T, R>(this System.Collections.Generic.IEnumerable<T> source, System.Func<T, R> map) -> System.Collections.Generic.IEnumerable<R>
*REMOVED* ~static ImTools.ArrayTools.Map<T, R>(this T[] source, System.Func<T, R> map) -> R[]
*REMOVED* ~static ImTools.ArrayTools.Map<T, S, R>(this T[] source, S state, System.Func<S, T, R> map) -> R[]
*REMOVED* ~static ImTools.ArrayTools.Match<T, R>(this System.Collections.Generic.IEnumerable<T> source, System.Func<T, bool> condition, System.Func<T, R> map) -> System.Collections.Generic.IEnumerable<R>
*REMOVED* ~static ImTools.ArrayTools.Match<T, R>(this T[] source, System.Func<T, bool> condition, System.Func<T, R> map) -> R[]
*REMOVED* ~static ImTools.ArrayTools.Match<T, S, R>(this T[] source, S state, System.Func<S, T, bool> condition, System.Func<S, T, R> map) -> R[]
*REMOVED* ~static ImTools.ArrayTools.Match<T, S>(this T[] source, S state, System.Func<S, T, bool> condition) -> T[]
*REMOVED* ~static ImTools.ArrayTools.Match<T>(this System.Collections.Generic.IEnumerable<T> source, System.Func<T, bool> condition) -> System.Collections.Generic.IEnumerable<T>
*REMOVED* ~static ImTools.ArrayTools.Match<T>(this T[] source, System.Func<T, bool> condition) -> T[]
*REMOVED* ~static ImTools.ArrayTools.One<T>(this T one) -> T[]
*REMOVED* ~static ImTools.ArrayTools.Remove<T>(this T[] source, T value) -> T[]
*REMOVED* ~static ImTools.ArrayTools.RemoveAt<T>(this T[] source, int index) -> T[]
*REMOVED* ~static ImTools.ArrayTools.SingleOrDefaultIfMany<T>(this System.Collections.Generic.IEnumerable<T> source) -> T
*REMOVED* ~static ImTools.ArrayTools.ToArrayOrSelf<T>(this System.Collections.Generic.IEnumerable<T> source) -> T[]
*REMOVED* ~static ImTools.ArrayTools.ToListOrSelf<T>(this System.Collections.Generic.IEnumerable<T> source) -> System.Collections.Generic.IList<T>
*REMOVED* ~static ImTools.ArrayTools.UpdateItemOrShrinkUnsafe<T, S>(this T[] source, S state, System.Func<S, T, T> tryMap) -> T[]
*REMOVED* ~static ImTools.Box<TBox, T>.Of(T x) -> TBox
*REMOVED* ~static ImTools.Fun.Do<T, S>(this T x, S state, System.Action<T, S> effect) -> T
*REMOVED* ~static ImTools.Fun.Do<T>(this T x, System.Action<T> effect) -> T
*REMOVED* ~static ImTools.Fun.To<R>(this object x) -> R
*REMOVED* ~static ImTools.Fun.To<T, R>(this T x, System.Func<T, R> map) -> R
*REMOVED* ~static ImTools.Fun.To<T, S, R>(this T x, S state, System.Func<T, S, R> map) -> R
*REMOVED* ~static ImTools.GrowingList.Push<T>(ref T[] items, int count, T item) -> void
*REMOVED* ~static ImTools.GrowingList.PushSlot<T>(ref T[] items, int count) -> T
*REMOVED* ~static ImTools.GrowingList.ResizeToArray<T>(T[] items, int count) -> T[]
*REMOVED* ~static ImTools.GrowingList.ToString<T>(T[] items, int count) -> string
*REMOVED* ~static ImTools.ImHashMap.AddOrUpdate<V>(this ImTools.ImHashMap<System.Type, V> map, System.Type key, V value) -> ImTools.ImHashMap<System.Type, V>
*REMOVED* ~static ImTools.ImHashMap.Contains<K, V>(this ImTools.ImHashMap<K, V> map, int hash, K key) -> bool
*REMOVED* ~static ImTools.ImHashMap.Contains<K, V>(this ImTools.ImHashMap<K, V> map, K key) -> bool
*REMOVED* ~static ImTools.ImHashMap.GetEntryOrDefault<K, V>(this ImTools.ImHashMap<K, V> map, int hash, K key) -> ImTools.ImHashMapEntry<K, V>
*REMOVED* ~static ImTools.ImHashMap.GetEntryOrDefault<K, V>(this ImTools.ImHashMap<K, V> map, K key) -> ImTools.ImHashMapEntry<K, V>
*REMOVED* ~static ImTools.ImHashMap.GetValueOrDefault<K, V>(this ImTools.ImHashMap<K, V> map, int hash, K key, V defaultValue = default(V)) -> V
*REMOVED* ~static ImTools.ImHashMap.GetValueOrDefault<K, V>(this ImTools.ImHashMap<K, V> map, K key, V defaultValue = default(V)) -> V
*REMOVED* ~static ImTools.ImHashMap.GetValueOrDefault<V>(this ImTools.ImHashMap<System.Type, V> map, int hash, System.Type key, V defaultValue = default(V)) -> V
*REMOVED* ~static ImTools.ImHashMap.GetValueOrDefault<V>(this ImTools.ImHashMap<System.Type, V> map, System.Type key, V defaultValue = default(V)) -> V
*REMOVED* ~static ImTools.ImHashMap.TryFind<K, V>(this ImTools.ImHashMap<K, V> map, int hash, K key, out V value) -> bool
*REMOVED* ~static ImTools.ImHashMap.TryFind<K, V>(this ImTools.ImHashMap<K, V> map, K key, out V value) -> bool
*REMOVED* ~static ImTools.ImHashMap.TryFind<V>(this ImTools.ImHashMap<System.Type, V> map, int hash, System.Type key, out V value) -> bool
*REMOVED* ~static ImTools.ImHashMap.TryFind<V>(this ImTools.ImHashMap<System.Type, V> map, System.Type key, out V value) -> bool
*REMOVED* ~static ImTools.ImHashMapSlots.AddOrKeep<K, V>(this ImTools.ImHashMap<K, V>[] slots, int hash, K key, V value, int hashMaskToFindSlot = 31) -> void
*REMOVED* ~static ImTools.ImHashMapSlots.AddOrKeep<K, V>(this ImTools.ImHashMap<K, V>[] slots, K key, V value, int hashMaskToFindSlot = 31) -> void
*REMOVED* ~static ImTools.ImHashMapSlots.AddOrUpdate<K, V>(this ImTools.ImHashMap<K, V>[] slots, int hash, K key, V value, ImTools.Update<K, V> update, int hashMaskToFindSlot = 31) -> void
*REMOVED* ~static ImTools.ImHashMapSlots.AddOrUpdate<K, V>(this ImTools.ImHashMap<K, V>[] slots, int hash, K key, V value, int hashMaskToFindSlot = 31) -> void
*REMOVED* ~static ImTools.ImHashMapSlots.AddOrUpdate<K, V>(this ImTools.ImHashMap<K, V>[] slots, K key, V value, ImTools.Update<K, V> updateValue, int hashMaskToFindSlot = 31) -> void
*REMOVED* ~static ImTools.ImHashMapSlots.AddOrUpdate<K, V>(this ImTools.ImHashMap<K, V>[] slots, K key, V value, int hashMaskToFindSlot = 31) -> void
*REMOVED* ~static ImTools.ImHashMapSlots.CreateWithEmpty<K, V>(int slotCountPowerOfTwo = 32) -> ImTools.ImHashMap<K, V>[]
*REMOVED* ~static ImTools.ImHashMapSlots.Fold<K, V, S>(this ImTools.ImHashMap<K, V>[] slots, S state, System.Func<ImTools.ImHashMapEntry<K, V>, S, S> reduce) -> S
*REMOVED* ~static ImTools.ImHashMapSlots.RefAddOrKeepSlot<K, V>(ref ImTools.ImHashMap<K, V> slot, int hash, K key, V value) -> void
*REMOVED* ~static ImTools.ImHashMapSlots.RefAddOrUpdateSlot<K, V>(ref ImTools.ImHashMap<K, V> slot, int hash, K key, V value) -> void
*REMOVED* ~static ImTools.ImHashMapSlots.RefAddOrUpdateSlot<K, V>(ref ImTools.ImHashMap<K, V> slot, int hash, K key, V value, ImTools.Update<K, V> update) -> void
*REMOVED* ~static ImTools.ImHashMapSlots.RefUpdateSlot<K, V>(ref ImTools.ImHashMap<K, V> slot, int hash, K key, V value) -> void
*REMOVED* ~static ImTools.ImHashMapSlots.Update<K, V>(this ImTools.ImHashMap<K, V>[] slots, int hash, K key, V value, int hashMaskToFindSlot = 31) -> void
*REMOVED* ~static ImTools.ImHashMapSlots.Update<K, V>(this ImTools.ImHashMap<K, V>[] slots, K key, V value, int hashMaskToFindSlot = 31) -> void
*REMOVED* ~static ImTools.ImList.Deconstruct<T>(this ImTools.ImList<T> list, out T head, out ImTools.ImList<T> tail, out bool isEmpty) -> void
*REMOVED* ~static ImTools.ImList.Fold<T, S>(this ImTools.ImList<T> list, S state, System.Func<T, int, S, S> reduce) -> S
*REMOVED* ~static ImTools.ImList.Fold<T, S>(this ImTools.ImList<T> list, S state, System.Func<T, S, S> reduce) -> S
*REMOVED* ~static ImTools.ImList.ForEach<T>(this ImTools.ImList<T> list, System.Action<T> effect) -> void
*REMOVED* ~static ImTools.ImList.List<T>(params T[] items) -> ImTools.ImList<T>
*REMOVED* ~static ImTools.ImList.List<T>(this T head) -> ImTools.ImList<T>
*REMOVED* ~static ImTools.ImList.List<T>(this T head, ImTools.ImList<T> tail) -> ImTools.ImList<T>
*REMOVED* ~static ImTools.ImList.Map<T, R>(this ImTools.ImList<T> list, System.Func<T, int, R> map) -> ImTools.ImList<R>
*REMOVED* ~static ImTools.ImList.Map<T, R>(this ImTools.ImList<T> list, System.Func<T, R> map) -> ImTools.ImList<R>
*REMOVED* ~static ImTools.ImList.Reverse<T>(this ImTools.ImList<T> list) -> ImTools.ImList<T>
*REMOVED* ~static ImTools.ImList.ToArray<T>(this ImTools.ImList<T> source) -> T[]
*REMOVED* ~static ImTools.ImList.ToImList<T>(this System.Collections.Generic.IEnumerable<T> source) -> ImTools.ImList<T>
*REMOVED* ~static ImTools.ImList.ToImList<T>(this System.Collections.Generic.IList<T> source) -> ImTools.ImList<T>
*REMOVED* ~static ImTools.ImMap.AddEntryUnsafe<V>(this ImTools.ImMap<V> map, ImTools.ImMapEntry<V> entry) -> ImTools.ImMap<V>
*REMOVED* ~static ImTools.ImMap.AddOrKeep<K>(this ImTools.ImMap<ImTools.ImMap.KValue<K>> map, int hash, K key) -> ImTools.ImMap<ImTools.ImMap.KValue<K>>
*REMOVED* ~static ImTools.ImMap.AddOrKeep<K>(this ImTools.ImMap<ImTools.ImMap.KValue<K>> map, int hash, K key, object value) -> ImTools.ImMap<ImTools.ImMap.KValue<K>>
*REMOVED* ~static ImTools.ImMap.AddOrKeep<V>(this ImTools.ImMap<V> map, int key) -> ImTools.ImMap<V>
*REMOVED* ~static ImTools.ImMap.AddOrKeep<V>(this ImTools.ImMap<V> map, int key, V value) -> ImTools.ImMap<V>
*REMOVED* ~static ImTools.ImMap.AddOrKeepEntry<V>(this ImTools.ImMap<V> map, ImTools.ImMapEntry<V> entry) -> ImTools.ImMap<V>
*REMOVED* ~static ImTools.ImMap.AddOrUpdate(this ImTools.ImMap<ImTools.ImMap.KValue<System.Type>> map, System.Type type, object value) -> ImTools.ImMap<ImTools.ImMap.KValue<System.Type>>
*REMOVED* ~static ImTools.ImMap.AddOrUpdate<K>(this ImTools.ImMap<ImTools.ImMap.KValue<K>> map, int hash, ImTools.ImMapEntry<ImTools.ImMap.KValue<K>> entry) -> ImTools.ImMap<ImTools.ImMap.KValue<K>>
*REMOVED* ~static ImTools.ImMap.AddOrUpdate<K>(this ImTools.ImMap<ImTools.ImMap.KValue<K>> map, int hash, K key, object value) -> ImTools.ImMap<ImTools.ImMap.KValue<K>>
*REMOVED* ~static ImTools.ImMap.AddOrUpdate<K>(this ImTools.ImMap<ImTools.ImMap.KValue<K>> map, int hash, K key, object value, ImTools.Update<K, object> update) -> ImTools.ImMap<ImTools.ImMap.KValue<K>>
*REMOVED* ~static ImTools.ImMap.AddOrUpdate<V>(this ImTools.ImMap<V> map, int key, V value) -> ImTools.ImMap<V>
*REMOVED* ~static ImTools.ImMap.AddOrUpdateEntry<V>(this ImTools.ImMap<V> map, ImTools.ImMapEntry<V> entry) -> ImTools.ImMap<V>
*REMOVED* ~static ImTools.ImMap.Contains<V>(this ImTools.ImMap<V> map, int key) -> bool
*REMOVED* ~static ImTools.ImMap.CreateKValueEntry<K>(int hash, K key) -> ImTools.ImMapEntry<ImTools.ImMap.KValue<K>>
*REMOVED* ~static ImTools.ImMap.Enumerate<K>(this ImTools.ImMap<ImTools.ImMap.KValue<K>> map) -> System.Collections.Generic.IEnumerable<ImTools.ImMapEntry<ImTools.ImMap.KValue<K>>>
*REMOVED* ~static ImTools.ImMap.Enumerate<V>(this ImTools.ImMap<V> map, ImTools.ImMapTree<V>[] parentStack = null) -> System.Collections.Generic.IEnumerable<ImTools.ImMapEntry<V>>
*REMOVED* ~static ImTools.ImMap.Fold<K, S>(this ImTools.ImMap<ImTools.ImMap.KValue<K>> map, S state, System.Func<ImTools.ImMapEntry<ImTools.ImMap.KValue<K>>, S, S> reduce, ImTools.ImMapTree<ImTools.ImMap.KValue<K>>[] parentsStack = null) -> S
*REMOVED* ~static ImTools.ImMap.Fold<V, S, A>(this ImTools.ImMap<V> map, S state, A a, System.Func<ImTools.ImMapEntry<V>, S, A, S> reduce, ImTools.ImMapTree<V>[] parentStack = null) -> S
*REMOVED* ~static ImTools.ImMap.Fold<V, S>(this ImTools.ImMap<V> map, S state, System.Func<ImTools.ImMapEntry<V>, S, S> reduce, ImTools.ImMapTree<V>[] parentStack = null) -> S
*REMOVED* ~static ImTools.ImMap.GetEntryOrDefault(this ImTools.ImMap<ImTools.ImMap.KValue<System.Type>> map, int hash, System.Type type) -> ImTools.ImMapEntry<ImTools.ImMap.KValue<System.Type>>
*REMOVED* ~static ImTools.ImMap.GetEntryOrDefault<K>(this ImTools.ImMap<ImTools.ImMap.KValue<K>> map, int hash, K key) -> ImTools.ImMapEntry<ImTools.ImMap.KValue<K>>
*REMOVED* ~static ImTools.ImMap.GetEntryOrDefault<V>(this ImTools.ImMap<V> map, int key) -> ImTools.ImMapEntry<V>
*REMOVED* ~static ImTools.ImMap.GetSurePresentEntry<V>(this ImTools.ImMap<V> map, int key) -> ImTools.ImMapEntry<V>
*REMOVED* ~static ImTools.ImMap.GetValueOrDefault(this ImTools.ImMap<ImTools.ImMap.KValue<System.Type>> map, int hash, System.Type typeKey) -> object
*REMOVED* ~static ImTools.ImMap.GetValueOrDefault(this ImTools.ImMap<ImTools.ImMap.KValue<System.Type>> map, System.Type typeKey) -> object
*REMOVED* ~static ImTools.ImMap.GetValueOrDefault<K>(this ImTools.ImMap<ImTools.ImMap.KValue<K>> map, int hash, K key) -> object
*REMOVED* ~static ImTools.ImMap.GetValueOrDefault<V>(this ImTools.ImMap<V> map, int key) -> V
*REMOVED* ~static ImTools.ImMap.TryFind<K>(this ImTools.ImMap<ImTools.ImMap.KValue<K>> map, int hash, K key, out object value) -> bool
*REMOVED* ~static ImTools.ImMap.TryFind<V>(this ImTools.ImMap<V> map, int key, out V value) -> bool
*REMOVED* ~static ImTools.ImMap.TryFindEntry<V>(this ImTools.ImMap<V> map, int key, out ImTools.ImMapEntry<V> result) -> bool
*REMOVED* ~static ImTools.ImMap.Update<K>(this ImTools.ImMap<ImTools.ImMap.KValue<K>> map, int hash, K key, object value, ImTools.Update<K, object> update = null) -> ImTools.ImMap<ImTools.ImMap.KValue<K>>
*REMOVED* ~static ImTools.ImMap.Update<V>(this ImTools.ImMap<V> map, int key, V value) -> ImTools.ImMap<V>
*REMOVED* ~static ImTools.ImMap.UpdateEntryUnsafe<V>(this ImTools.ImMap<V> map, ImTools.ImMapEntry<V> entry) -> ImTools.ImMap<V>
*REMOVED* ~static ImTools.ImMap.UpdateToDefault<K>(this ImTools.ImMap<ImTools.ImMap.KValue<K>> map, int hash, K key) -> ImTools.ImMap<ImTools.ImMap.KValue<K>>
*REMOVED* ~static ImTools.ImMap.UpdateToDefault<V>(this ImTools.ImMap<V> map, int key) -> ImTools.ImMap<V>
*REMOVED* ~static ImTools.ImMap.Visit<K, S>(this ImTools.ImMap<ImTools.ImMap.KValue<K>> map, S state, System.Action<ImTools.ImMapEntry<ImTools.ImMap.KValue<K>>, S> effect, ImTools.ImMapTree<ImTools.ImMap.KValue<K>>[] parentsStack = null) -> S
*REMOVED* ~static ImTools.ImMap.Visit<K>(this ImTools.ImMap<ImTools.ImMap.KValue<K>> map, System.Action<ImTools.ImMapEntry<ImTools.ImMap.KValue<K>>> effect, ImTools.ImMapTree<ImTools.ImMap.KValue<K>>[] parentsStack = null) -> void
*REMOVED* ~static ImTools.ImMap.Visit<V>(this ImTools.ImMap<V> map, System.Action<ImTools.ImMapEntry<V>> visit, ImTools.ImMapTree<V>[] parentStack = null) -> void
*REMOVED* ~static ImTools.ImMapSlots.AddOrKeep<V>(this ImTools.ImMap<V>[] slots, int key, int keyMaskToFindSlot = 31) -> void
*REMOVED* ~static ImTools.ImMapSlots.AddOrKeep<V>(this ImTools.ImMap<V>[] slots, int key, V value, int keyMaskToFindSlot = 31) -> void
*REMOVED* ~static ImTools.ImMapSlots.AddOrUpdate<V>(this ImTools.ImMap<V>[] slots, int key, V value, int keyMaskToFindSlot = 31) -> void
*REMOVED* ~static ImTools.ImMapSlots.CreateWithEmpty<V>(int slotCountPowerOfTwo = 32) -> ImTools.ImMap<V>[]
*REMOVED* ~static ImTools.ImMapSlots.Fold<V, S>(this ImTools.ImMap<V>[] slots, S state, System.Func<ImTools.ImMapEntry<V>, S, S> reduce) -> S
*REMOVED* ~static ImTools.ImMapSlots.RefAddOrKeepSlot<V>(ref ImTools.ImMap<V> slot, int key) -> void
*REMOVED* ~static ImTools.ImMapSlots.RefAddOrKeepSlot<V>(ref ImTools.ImMap<V> slot, int key, V value) -> void
*REMOVED* ~static ImTools.ImMapSlots.RefAddOrUpdateSlot<V>(ref ImTools.ImMap<V> slot, int key, V value) -> void
*REMOVED* ~static ImTools.ImZipper.Fold<T, S>(this ImTools.ImZipper<T> z, S state, System.Func<T, int, S, S> reduce) -> S
*REMOVED* ~static ImTools.ImZipper.Fold<T, S>(this ImTools.ImZipper<T> z, S state, System.Func<T, S, S> reduce) -> S
*REMOVED* ~static ImTools.ImZipper.ForEach<T>(this ImTools.ImZipper<T> z, System.Action<T> effect) -> void
*REMOVED* ~static ImTools.ImZipper.RemoveAt<T>(this ImTools.ImZipper<T> z, int i) -> ImTools.ImZipper<T>
*REMOVED* ~static ImTools.ImZipper.ShiftTo<T>(this ImTools.ImZipper<T> z, int i) -> ImTools.ImZipper<T>
*REMOVED* ~static ImTools.ImZipper.ToArray<T>(this ImTools.ImZipper<T> z) -> T[]
*REMOVED* ~static ImTools.ImZipper.Update<T>(this ImTools.ImZipper<T> z, System.Func<T, T> update) -> ImTools.ImZipper<T>
*REMOVED* ~static ImTools.ImZipper.UpdateAt<T>(this ImTools.ImZipper<T> z, int i, System.Func<T, T> update) -> ImTools.ImZipper<T>
*REMOVED* ~static ImTools.ImZipper.Zip<T>(params T[] items) -> ImTools.ImZipper<T>
*REMOVED* ~static ImTools.Item<TItem, T>.Of(T x) -> ImTools.Item<TItem, T>.item
*REMOVED* ~static ImTools.KV.Of<K, V>(K key, V value) -> ImTools.KV<K, V>
*REMOVED* ~static ImTools.KV.WithValue<K, V>(this ImTools.KV<K, V> kv, V value) -> ImTools.KV<K, V>
*REMOVED* ~static ImTools.Lazy.Of<T>(System.Func<T> valueFactory) -> System.Lazy<T>
*REMOVED* ~static ImTools.Ref.NewRef<T>(this ImTools.Ref<T> original) -> ImTools.Ref<T>
*REMOVED* ~static ImTools.Ref.Of<T>(T value) -> ImTools.Ref<T>
*REMOVED* ~static ImTools.Ref.Swap<T, A, B, C>(ref T value, A a, B b, C c, System.Func<T, A, B, C, T> getNewValue, int retryCountUntilThrow = 50) -> T
*REMOVED* ~static ImTools.Ref.Swap<T, A, B>(ref T value, A a, B b, System.Func<T, A, B, T> getNewValue, int retryCountUntilThrow = 50) -> T
*REMOVED* ~static ImTools.Ref.Swap<T, A>(ref T value, A a, System.Func<T, A, T> getNewValue, int retryCountUntilThrow = 50) -> T
*REMOVED* ~static ImTools.Ref.Swap<T>(ref T value, System.Func<T, T> getNewValue, int retryCountUntilThrow = 50) -> T
*REMOVED* ~static ImTools.Ref.SwapAndGetNewValue<T, A>(ref T value, A a, System.Func<T, A, T> getNewValue, int retryCountUntilThrow = 50) -> T
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Of(T1 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Of(T10 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Of(T2 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Of(T3 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Of(T4 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Of(T5 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Of(T6 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Of(T7 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Of(T8 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Of(T9 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Of(T1 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Of(T2 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Of(T3 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Of(T4 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Of(T5 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Of(T6 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Of(T7 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Of(T8 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Of(T9 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8, T9>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.Of(T1 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.Of(T2 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.Of(T3 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.Of(T4 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.Of(T5 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.Of(T6 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.Of(T7 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.Of(T8 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7, T8>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.Of(T1 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.Of(T2 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.Of(T3 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.Of(T4 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.Of(T5 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.Of(T6 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.Of(T7 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6, T7>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.Of(T1 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.Of(T2 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.Of(T3 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.Of(T4 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.Of(T5 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.Of(T6 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5, T6>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5>.Of(T1 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5>.Of(T2 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5>.Of(T3 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5>.Of(T4 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4, T5>.Of(T5 x) -> ImTools.Union<TUnion, T1, T2, T3, T4, T5>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4>.Of(T1 x) -> ImTools.Union<TUnion, T1, T2, T3, T4>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4>.Of(T2 x) -> ImTools.Union<TUnion, T1, T2, T3, T4>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4>.Of(T3 x) -> ImTools.Union<TUnion, T1, T2, T3, T4>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3, T4>.Of(T4 x) -> ImTools.Union<TUnion, T1, T2, T3, T4>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3>.Of(T1 x) -> ImTools.Union<TUnion, T1, T2, T3>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3>.Of(T2 x) -> ImTools.Union<TUnion, T1, T2, T3>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2, T3>.Of(T3 x) -> ImTools.Union<TUnion, T1, T2, T3>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2>.Of(T1 x) -> ImTools.Union<TUnion, T1, T2>.union
*REMOVED* ~static ImTools.Union<TUnion, T1, T2>.Of(T2 x) -> ImTools.Union<TUnion, T1, T2>.union
*REMOVED* ~static readonly DryIoc.FactoryDelegateCompiler.FactoryDelegateParamExprs -> FastExpressionCompiler.LightExpression.ParameterExpression[]
*REMOVED* ~static readonly DryIoc.FactoryDelegateCompiler.FactoryDelegateParamTypes -> System.Type[]
*REMOVED* ~static readonly DryIoc.FactoryDelegateCompiler.ResolverContextParamExpr -> FastExpressionCompiler.LightExpression.ParameterExpression
*REMOVED* ~static readonly DryIoc.ResolverContext.CurrentScopeExpr -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~static readonly DryIoc.ResolverContext.ParentExpr -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~static readonly DryIoc.ResolverContext.RootOrSelfExpr -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~static readonly DryIoc.ResolverContext.SingletonScopeExpr -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~static readonly DryIoc.ServiceInfo.Empty -> DryIoc.IServiceInfo
*REMOVED* ~static readonly DryIoc.WrappersSupport.Wrappers -> ImTools.ImMap<ImTools.ImMap.KValue<System.Type>>
*REMOVED* ~static readonly FastExpressionCompiler.LightExpression.Expression.FalseConstant -> FastExpressionCompiler.LightExpression.ConstantExpression
*REMOVED* ~static readonly FastExpressionCompiler.LightExpression.Expression.NullConstant -> FastExpressionCompiler.LightExpression.ConstantExpression
*REMOVED* ~static readonly FastExpressionCompiler.LightExpression.Expression.TrueConstant -> FastExpressionCompiler.LightExpression.ConstantExpression
*REMOVED* ~static readonly FastExpressionCompiler.LightExpression.Expression.ZeroConstant -> FastExpressionCompiler.LightExpression.ConstantExpression
*REMOVED* ~static readonly FastExpressionCompiler.LightExpression.ExpressionCompiler.EmptyArrayClosure -> FastExpressionCompiler.LightExpression.ExpressionCompiler.ArrayClosure
*REMOVED* ~static readonly ImTools.ImHashMap<K, V>.Empty -> ImTools.ImHashMap<K, V>
*REMOVED* ~static readonly ImTools.ImHashMapEntry<K, V>.Empty -> ImTools.ImHashMapEntry<K, V>
*REMOVED* ~static readonly ImTools.ImList<T>.Empty -> ImTools.ImList<T>
*REMOVED* ~static readonly ImTools.ImMap<V>.Empty -> ImTools.ImMap<V>
*REMOVED* ~static readonly ImTools.ImZipper<T>.Empty -> ImTools.ImZipper<T>
*REMOVED* ~static readonly ImTools.Item<TItem>.Single -> ImTools.Item<TItem>.item
*REMOVED* ~virtual DryIoc.Factory.ApplyReuse(FastExpressionCompiler.LightExpression.Expression serviceExpr, DryIoc.Request request) -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~virtual DryIoc.Factory.FactoryGenerator.get -> DryIoc.IConcreteFactoryGenerator
*REMOVED* ~virtual DryIoc.Factory.GetExpressionOrDefault(DryIoc.Request request) -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~virtual DryIoc.Factory.UseInterpretation(DryIoc.Request request) -> bool
*REMOVED* ~virtual DryIoc.ParameterServiceInfo.Details.get -> DryIoc.ServiceDetails
*REMOVED* ~virtual DryIoc.ParameterServiceInfo.ServiceType.get -> System.Type
*REMOVED* ~virtual DryIoc.PropertyOrFieldServiceInfo.Details.get -> DryIoc.ServiceDetails
*REMOVED* ~virtual FastExpressionCompiler.LightExpression.Expression.Reduce() -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~virtual FastExpressionCompiler.LightExpression.LambdaExpression.Parameters.get -> System.Collections.Generic.IReadOnlyList<FastExpressionCompiler.LightExpression.ParameterExpression>
*REMOVED* ~virtual FastExpressionCompiler.LightExpression.MethodCallExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<FastExpressionCompiler.LightExpression.Expression>
*REMOVED* ~virtual FastExpressionCompiler.LightExpression.MethodCallExpression.Object.get -> FastExpressionCompiler.LightExpression.Expression
*REMOVED* ~virtual FastExpressionCompiler.LightExpression.NewExpression.Arguments.get -> System.Collections.Generic.IReadOnlyList<FastExpressionCompiler.LightExpression.Expression>
*REMOVED* ~virtual FastExpressionCompiler.LightExpression.UnaryExpression.Method.get -> System.Reflection.MethodInfo
